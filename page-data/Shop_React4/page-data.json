{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React4/","result":{"data":{"cur":{"id":"bc13ded1-996b-563c-9cf5-6bce01c09c20","html":"<h1 id=\"auth--인증-\" style=\"position:relative;\"><a href=\"#auth--%EC%9D%B8%EC%A6%9D-\" aria-label=\"auth  인증  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auth ( 인증 )</h1>\n<h2 id=\"auth-route-생성\" style=\"position:relative;\"><a href=\"#auth-route-%EC%83%9D%EC%84%B1\" aria-label=\"auth route 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>auth route 생성</h2>\n<p>페이지 이동 시 로그인 여부 및 관리자 여부(권한)등을 체크하기 위해 구현\n토큰 생성 후 토큰을 client 측에선 쿠키에다가 넣어주고 서버 측에서는 user database 에다가 넣어줬는데 이 두가지를 이용해 서로 토큰이 일치하는지 체크\n클라이언트에서 서버로 전달된 incode(암호화) 되어있는 token을 decode(복호화)해 user_id를 얻어내어 database user collection에서 유저를 찾은 후 쿠키에서 받아온 토큰이 유저도 갖고 있다면 인증 완료되는 구조\n토큰이 없거나 일치하지 않으면 인증실패\n토큰 일치시 인증 완료 그리고 해당하는 유저의 정보들을 선별해(아이디,이미지 등) front end측으로 보내줌\n(server/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> auth <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./middleware/auth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// auth라는 미들웨어를 추가 </span>\n<span class=\"token comment\">// 미들웨어: end point의 request를 받은 후 callback function을 하기 전 중간에 작업하기 위함</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/auth'</span><span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//여기 까지 미들웨어를 통과해 온 건 Authentication = True 라는 뜻</span>\n  <span class=\"token comment\">// 클라이언트에 authentication = ture 라는 정보를 전달해주기 위해 res.status(200)넣어주고 json데이터로 클라이언트에 원하는 유저 정보(server/models/User.js내 userSchema)를 제공해줌</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//middleware에서 req.user = user 해서 request에 넣어줬기 때문에 여기서 req.user._id 가능</span>\n    <span class=\"token comment\">//이렇게 정보를 주면 어떤 페이지에서든지 유저 정보를 이용 가능함</span>\n    _id<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 0이면 false 아니면 ture</span>\n    <span class=\"token comment\">// role 0 -> 일반유저   role 0이 아니면  관리자</span>\n    isAdmin<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>role <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    isAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    lastname<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>lastname<span class=\"token punctuation\">,</span>\n    role<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">,</span>\n    image<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>image\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>(server/models/middleware/auth.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/User'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// auth 정의</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">auth</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//인증 처리</span>\n    <span class=\"token comment\">// 1. cookie parser를 이용해 클라이언트 쿠키에서 토큰을 가져옴</span>\n    <span class=\"token comment\">// cookie를 넣을 때 x_auth라는 이름으로 넣었기 때문에 req.cookies.x_auth</span>\n    <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>x_auth<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. 유저 모델{ User }을 불러 온 후 server/models/User.js에서 메소드를 만들어서 토큰을 복호화 한후 유저 찾음</span>\n    User<span class=\"token punctuation\">.</span><span class=\"token function\">findByToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 유저 없다면 클라이언트에  isAuth: false, error: true  정보 전해줌</span>\n        <span class=\"token comment\">// 즉 index.js내 findByToken메소드로 돌아가지 못하고 미들웨어 내에서 return해 빠져나가게 됨</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 유저 있다면 request token에다가 위에 받아온 token 넣어주고 </span>\n        req<span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> token<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// request user에다가도 user정보를 다 넣어준 후 </span>\n        req<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 미들웨어에서 다음으로 넘어갈 수 있게함</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//  request에다가 token과 user를 넣어주는 이유는 router(index.js)에서 request를 받을 때</span>\n<span class=\"token comment\">//  token과 user를 request에 넣어줌으로 인해 req.user시 미들웨어 내 구현한 user, token 정보를 사용하기 위함</span>\n\n\n<span class=\"token comment\">// 3. 유저가 있으면 인증 완료</span>\n<span class=\"token comment\">// 4. 유저가 없으면 인증 실패</span>\n\n<span class=\"token comment\">// auth를 다른 파일에서도 사용가능하도록 export - index.js에서 import</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> auth <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(server/models/User.js)\nfindByToken 메소드 생성해 복호화\n<a href=\"https://www.npmjs.com/package/jsonwebtoken\">공식문서 참고</a>\nverify a token symmetric</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">userSchema<span class=\"token punctuation\">.</span>statics<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">findByToken</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 가져온 토큰을 decode(복호화)할 땐 verify 사용</span>\n    <span class=\"token comment\">// 토큰 생성시 사용했던 secretToken을 넣어주면 decoded(디코드 된 결과물 = user_id)나옴</span>\n    jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">'secretToken'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> decoded</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// user_id 이용해서 유저를 찾은 다음 클라이언트에서 가져온 token과 DB에 보관된 토큰이 일치하는지 확인</span>\n        <span class=\"token comment\">// user 가져온 후 mongodb메소드인 findOne을 통해 user_id(decoded)과 token으로 찾음 </span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span> decoded<span class=\"token punctuation\">,</span> <span class=\"token string\">\"token\"</span><span class=\"token operator\">:</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// err와 user callback function을 주는데 만약 에러 있다면 callback으로 에러를 전달해줌</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 에러 없다면 user정보를 전달해주고 다시 미들웨어 auth.js에 가서 token과 err, user callback 써줌</span>\n            <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","excerpt":"Auth ( 인증 ) auth route 생성 페이지 이동 시 로그인 여부 및 관리자 여부(권한)등을 체크하기 위해 구현\n토큰 생성 후 토큰을 client 측에선 쿠키에다가 넣어주고 서버 측에서는 user database 에다가 넣어줬는데 이 두가지를 이용해 서로 토큰이 일치하는지 체크\n클라이언트에서 서버로 전달된 incode(암호화) 되어있는 token을 decode(복호화)해 user_id를 얻어내어 database user collection에서 유저를 찾은 후 쿠키에서 받아온 토큰이 유저도 갖고 있다면 인증 완료되는 구조\n토큰이 없거나 일치하지 않으면 인증실패\n토큰 일치시 인증 완료 그리고 해당하는 유저의 정보들을 선별해(아이디,이미지 등) front end측으로 보내줌\n(server/index.js) (server/models/middleware/auth.js) (server/models/User.js) \nfindByToken 메소드 생성해 복호화\n공식문서 참고\nverif…","frontmatter":{"date":"November 14, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React4/"}},"next":{"id":"01749ce1-54ad-54e8-bc6e-3fdf2fee76d2","html":"<h1 id=\"회원가입-기능\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EA%B8%B0%EB%8A%A5\" aria-label=\"회원가입 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 기능</h1>\n<h2 id=\"bcrypt로-비밀번호-암호화\" style=\"position:relative;\"><a href=\"#bcrypt%EB%A1%9C-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EC%95%94%ED%98%B8%ED%99%94\" aria-label=\"bcrypt로 비밀번호 암호화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bcrypt로 비밀번호 암호화</h2>\n<p><a href=\"https://www.npmjs.com/package/bcrypt\">공식문서 참고</a></p>\n<ul>\n<li>DB에 저장 시 Bcrypt라는 라이브러리 사용해 비밀번호를 암호화해 관리자도 암호를 모르게 하는게 목표\n<code class=\"language-text\">npm i bcrypt</code></li>\n<li>\n<p>Bcrypt로 비밀번호 암호화 하는 과정</p>\n<ol>\n<li>Register Router(server/index.js)에서 유저 정보들(Account, Password 등)을 데이터베이스(user model인 userSchema)에 저장(user.save)하기 전\n암호화하기 위해 server/models/User.js에서 유저 스키마를 가져와서 mongoose 메소드인 pre를 사용</li>\n<li>function 내 작업 끝나면 다시 user.save로 돌아가게끔 파라미터로 next를 넣어 next() function으로 user.save로 보냄</li>\n<li>비밀번호를 암호화 시키기 위해서 다운받은 bcrypt를 가져옴</li>\n<li>To hash a password\n-> salt가 몇글자인지 나타내는 saltRounds를 먼저 지정 후 salt를 생성함 -> 솔트를 이용해 비밀번호를 암호화 시킴</li>\n<li>\n<p>비밀번호 암호화를 userSchema 모델안의 필드 중 password가 변환될 때에만 해줌\n유저정보를 변경해 저장할 때마다 userSchema.pre쪽을 계속 바꾸게 되어 이메일만 변경해도 비밀번호를 암호화해버리는 문제가 발생하기 때문에\n비밀번호 바꿀때만 실행해야하게 조건(if (user.isModified(‘password’)) {) 달아줌\n( server/models/User.js )</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> saltRounds <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token operator\">...</span>\nuserSchema<span class=\"token punctuation\">.</span><span class=\"token function\">pre</span><span class=\"token punctuation\">(</span><span class=\"token string\">'save'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>if (user.isModified(‘password’)) {</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 비밀번호 암호화\n// bcrypt를 가져와서 salt를 만들 때 saltRounds과 callback function을 넣어줌\nbcrypt.genSalt(saltRounds, function (err, salt) {\n    // 에러나면 err를 가져와서 리턴시켜 user.save로 돌아가고\n    if (err) return next(err)\n    // salt를 제대로 생성했다면 다시 bcrypt가져와 암호화 되지 않은 비밀번호와 salt를 이용해서 해시에 넣어줌\n    // 암호화 되지 않은 비밀번호는 const user = new User(req.body)이렇게 req.body를 User모델에 넣었기 때문에\n    // var user = this;를 이용해 userSchema의 password를 user.password로 가져옴\n    // callback function으로 err와 암호화된 비밀번호인 hash를 넣어줌   \n    bcrypt.hash(user.password, salt, function (err, hash) {\n       // 에러 발생시 err를 리턴\n        if (err) return next(err)\n        // hash(암호화된 비밀번호)를 만드는 데 성공했다면 user.password(암호화 되지 않은 비밀번호)를 hash된 비밀번호로 교체해주고 \n        user.password = hash\n        // next()를 이용해서 user.save로 돌아감\n        next()\n    })\n})</code></pre></div>\n<p>} else {\n//비밀번호 바꾸는게 아닌 다른걸 바꾸면 그냥 next()를 해줘서 여기서 머물지 않고 바로 save쪽으로 넘어가게 해줌\nnext()\n}\n})</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(server/index.js) \n```js\n//user에 관한 api를 생성  -> express에서 제공되는 router를 이용\napp.post('/api/users/register', (req, res) => {\n\nconst user = new User(req.body)\n------------저장하기 전-----------------\nuser.save((err, userInfo) => {\nif (err) return res.json({ success: false, err })\nreturn res.status(200).json({\n  success: true\n})\n})\n})</code></pre></div>\n<h1 id=\"로그인-기능\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B8%B0%EB%8A%A5\" aria-label=\"로그인 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 기능</h1>\n<h2 id=\"로그인-router-생성\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-router-%EC%83%9D%EC%84%B1\" aria-label=\"로그인 router 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 Router 생성</h2>\n</li>\n<li>post method 사용</li>\n<li>end point는 /login</li>\n<li>request, response 받음</li>\n<li>요청된 이메일(브라우저에 입력한 이메일)을 데이터베이스에 있는지 찾음</li>\n<li>요청된 이메일이 데이터 베이스에 있다면 비밀번호가 같은지 확인</li>\n<li>\n<p>비밀번호 까지 맞다면 그 유저를 위한 토큰을 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// 요청된 이메일(브라우저에 입력한 이메일)을 데이터베이스에 있는지 찾음</span>\n<span class=\"token comment\">// 유저 모델을 가져와서 mongoDB에서 제공하는 method인 findOne으로 찾고자 하는 이메일을 넣어 찾음</span>\n<span class=\"token comment\">// err, user로 callback function을 줌  </span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>email <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// User collection 안에 해당 이메일을 가진 유저가 한명도 없다면(!user) </span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// return을 해줄 때 response json 데이터로 loginSuccess: false와 message를 줌</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    loginSuccess<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">\"제공된 이메일에 해당하는 유저가 없습니다.\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 요청된 이메일이 데이터 베이스에 있다면 (user collection 안에 해당 이메일을 가진 유저가 있다면) 비밀번호가 같은지 확인</span>\n<span class=\"token comment\">// user안에는 유저의 이름, 비밀번호, 이메일이 들어있는데 여기서 comparePassword 메소드를 생성해 (작명 아무렇게나 가능)</span>\n<span class=\"token comment\">// req.body.password(암호화 되기 전 비밀번호)와 callback function으로 두가지 인자(argument)를 넣음</span>\n<span class=\"token comment\">// 에러가 나면 err, 비밀번호를 비교해서 브라우저에서 입력한 비밀번호와 db내 비밀번호를 비교해 일치 시 isMatch로 맞는지 가져오는 메소드를 유저 모델에서 만듦</span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">comparePassword</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> isMatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// isMatch가 없으면 비밀번호가 틀렸다는 뜻이기 때문에 response를 client에다가 loginSuccess: false, message를 줌</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMatch<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loginSuccess<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"비밀번호가 틀렸습니다.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>(server/models/User.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// userSchema를 가져온 다음에 comparePassword function에 plainPassword, cb 을 준다음</span>\nuserSchema<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">comparePassword</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">plainPassword<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// plainPassword 와 db에 있는 암호회된 비밀번호가 같은지 체크하려면 plainPassword를 암호화 해서 비교하면 됨</span>\n<span class=\"token comment\">// bcrypt를 가져와서 compare(plainPassword, 암호화된 비밀번호를 가져오기 위해 userSchema에서 password를 가져옴, callback function  )</span>\nbcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>plainPassword<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> isMatch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 비밀번호가 다르면 callback error를 줌</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token comment\">// 같다면 cb을 줄때 에러는 없고(null) 비밀번호가 같음(true)을 넘겨줌</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> isMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 다시 로그인 라우터 쪽의  user.comparePassword(req.body.password, (err, isMatch) => { 로 가서 comparePassword 실행</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"토큰-생성-jsonwebtoken\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0-%EC%83%9D%EC%84%B1-jsonwebtoken\" aria-label=\"토큰 생성 jsonwebtoken permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰 생성 (jsonwebtoken)</h2>\n<p><a href=\"https://www.npmjs.com/package/jsonwebtoken\">공식문서 참고</a></p>\n<ul>\n<li>토큰 생성을 위해 라이브러리 설치\n<code class=\"language-text\">npm i jsonwebtoken</code>\njsonwebtoken을 import 해와서 sign이라는 메소드 이용해서 합쳐주면 토큰 생성됨</li>\n<li>\n<p>쿠키 사용을 위한 express에서 제공하는 라이브러리 설치\n<code class=\"language-text\">npm i cookie-parser</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// cookie parser 사용하기 위한 작업</span>\n<span class=\"token keyword\">const</span> cookieParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cookie-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>app.post(‘/api/users/login’, (req, res) => {\n// … 요청된 이메일이 데이터 베이스에 있다면 (user collection 안에 해당 이메일을 가진 유저가 있다면) 비밀번호가 같은지 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  // 비밀번호가 맞다면 그 유저를 위한 토큰을 생성\n  // 토큰 생성 시 위에서 따로 comparePassword 메소드 생성한 것처럼 generateToken을 생성\n  // callback function 파라미터에 하나만 들어있음 function (cb) \n  user.generateToken((err, user) => {\n    // 에러가 있다면 res.status(400)을 클라이언트에 전해주고 err메시지도 같이 전달해줌\n    if (err) return res.status(400).send(err);\n    // User.js에서 var token = jwt.sign(user._id.toHexString(), 'secretToken')이렇게 토큰을 생성한 다음에 user.token에다가 넣어준 걸 받아온 상태 (user)\n    // 이 user안에 토큰이 들어있는데 이걸 쿠키 or 로컳스토리지 or session 저장을 해서 보관해야됨\n    // 이 중에 어디에 저장해야 가장 안전할까에 대한 논란이 많음 각기 장단점이 존재\n    // 쿠키에다 저장 시 토큰 저장을 user.token을 아무 이름(x_auth)으로 지정\n    res.cookie(\"x_auth\", user.token)\n      //.status(200)는 성공했다는 표시\n      .status(200)\n      // json으로 데이터(loginSuccess와 userId) 보내줌 \n      .json({ loginSuccess: true, userId: user._id })\n  })\n})</code></pre></div>\n<p>  })\n})</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(server/models/User.js)\n```js\n//jsonwebtoken을 import 해옴\nconst jwt = require('jsonwebtoken');\n\nuserSchema.methods.generateToken = function (cb) {\n    var user = this;\n    \n    // jsonwebtoken(jwt의 sign 메소드)을 이용해서 db내 user id와 secretToken(아무거나)를 합쳐 token을 생성함\n    // user._id + 'secretToken' = token\n    // 나중에 token 해석 시 secretToken를 넣으면 user._id가 나오게 되기 때문에 이 사람이 누구인지 알 수 있음\n    // user._id를 plain object로 변환시키기 위해 toHexString()사용해야 에러 발생하지 않음\n    var token = jwt.sign(user._id.toHexString(), 'secretToken')\n    // 만든 token을 userSchema에 있는 token 필드에 넣어줌\n    user.token = token\n    user.save(function (err, user) {\n      // 에러 있다면 리턴 시 callback으로 err를 전달해주고\n        if (err) return cb(err)\n        // save 성공 시 err는 없고(null) user정보만 user.generateToken((err, user) => { 로 다시 전달해줌\n        cb(null, user)\n    })\n}</code></pre></div>","frontmatter":{"date":"November 13, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React3/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React4/","nextSlug":"/Shop_React3/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}