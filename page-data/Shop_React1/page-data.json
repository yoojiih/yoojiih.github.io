{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React1/","result":{"data":{"cur":{"id":"2d2e79d3-950b-59ca-acb0-c0bbefd48bd2","html":"<h2 id=\"환경설정\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95\" aria-label=\"환경설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경설정</h2>\n<p>기본 요구사항</p>\n<ul>\n<li>Node.js : 자바스크립트 런타임 </li>\n<li>NPM : 패키지 매니저 도구</li>\n</ul>\n<h1 id=\"node-js\" style=\"position:relative;\"><a href=\"#node-js\" aria-label=\"node js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node js</h1>\n<ul>\n<li>javascirpt를 server side에서 사용할 수 있는 언어</li>\n<li>npm package 생성\n<code class=\"language-text\">npm init</code></li>\n<li>sever 폴더 생성 후 폴더 안에다가 백엔드 서버 시작하기 위한 index.js 파일 생성  </li>\n</ul>\n<h1 id=\"express\" style=\"position:relative;\"><a href=\"#express\" aria-label=\"express permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express</h1>\n<ul>\n<li>node js를 쉽게 이용할 수 있게 해주는 프레임워크</li>\n<li>Light HTTP web Framework</li>\n<li>설치\n<code class=\"language-text\">npm install express</code>\n<a href=\"https://expressjs.com/ko/starter/hello-world.html\">Express 공식문서</a> </li>\n<li>\n<p>서버 생성, 시작</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 다운받았던 express 모듈을 가져옴</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// express function을 이용해서 새로운 express app을 만들고 </span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// port는 아무값이나 설정해도 됨 ex) 3000, 4000, 5000 </span>\n<span class=\"token comment\">// 5000을 back server로 둘 거기 때문에 5000으로 설정</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">5000</span>\n<span class=\"token comment\">// express app은 루트 URL(/) 또는 라우트에 대한 요청에 “Hello World!”로 응답하며 다른 모든 경로에 대해서는 404 Not Found로 응답</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\nres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// app은 서버를 시작하며 5000번 포트에서 연결을 listen하면 콘솔 출력되도록함</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Example app listening at http://localhost:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>Express 기본 라우팅 (참고)\n라우팅은 URI(또는 경로) 및 특정한 HTTP 요청 메소드(GET, POST 등)인 특정 엔드포인트에 대한 클라이언트 요청에 애플리케이션이 응답하는 방법을 결정하는 것\n각 라우트는 하나 이상의 핸들러 함수를 가질 수 있으며, 이러한 함수는 라우트가 일치할 때 실행됨</li>\n</ul>\n<p>라우트 정의 구조\n<code class=\"language-text\">app.METHOD(PATH, HANDLER)</code>\n> app: express의 인스턴스\n> METHOD: HTTP 요청 메소드\n> PATH: 서버에서의 경로\n> HANDLER: 라우트가 일치할 때 실행되는 함수</p>\n<p>홈 페이지에서 Hello World!로 응답:\napp.get(’/’, function (req, res) {\nres.send(‘Hello World!’);\n});</p>\n<p>애플리케이션의 홈 페이지인 루트 라우트(/)에서 POST 요청에 응답:\napp.post(’/’, function (req, res) {\nres.send(‘Got a POST request’);\n});</p>\n<p>/user 라우트에 대한 PUT 요청에 응답:\napp.put(‘/user’, function (req, res) {\nres.send(‘Got a PUT request at /user’);\n});</p>\n<p>/user 라우트에 대한 DELETE 요청에 응답:\napp.delete(‘/user’, function (req, res) {\nres.send(‘Got a DELETE request at /user’);\n});</p>\n<p>package.json 파일에 <code class=\"language-text\">\"start\": \"node server/index.js\",</code> 명령 작성 후 터미널에 <code class=\"language-text\">npm run start</code> 입력해 앱을 실행\nnpm run start 중 start하면 node app을 실행하는데 시작점이 index.js\n-> 브라우저에서 <a href=\"http://localhost:3000/%EC%9D%84\">http://localhost:3000/을</a> 로드하여 결과물을 확인</p>\n<h1 id=\"express-js-app에-mongo-db-연결\" style=\"position:relative;\"><a href=\"#express-js-app%EC%97%90-mongo-db-%EC%97%B0%EA%B2%B0\" aria-label=\"express js app에 mongo db 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express js app에 mongo db 연결</h1>\n<p><a href=\"https://www.mongodb.com/\">설치 사이트</a></p>\n<ol>\n<li>회원가입 후 클러스터(Cluster) 생성\n클라우드 상에다가 mongo db를 만들기 위해 클라우드를 제공하는 여러 곳 중에 aws를 선택\ncluster name: Cluster0 </li>\n<li>mongo db 유저 생성\n클러스터에서 CONNECT 클릭해 Username과 Password 설정\nusername: yoojiih password:</li>\n<li>mongo db object modeling tool 설치\nMongoose: mongo db 다루기 쉽게 해주는 툴\n<code class=\"language-text\">npm i mongoose</code></li>\n<li>\n<p>app에 mongodb 연결<br>\nmongoose를 모듈 가져옴\nmongoose를 이용해서 app과 mongo db를 연결</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mongo db에서 유저 생성 후 복사한 connection app code</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 오류 발생가능성 제거를 위한 코드</span>\nuseNewUrlParser<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> useUnifiedTopology<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> useCreateIndex<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> useFindAndModify<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token comment\">// 연결 잘 됐다면 then, err가 있으면 콘솔에 err보여줌</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MongoDB Connected...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ol>\n<h1 id=\"user-model-생성\" style=\"position:relative;\"><a href=\"#user-model-%EC%83%9D%EC%84%B1\" aria-label=\"user model 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>user model 생성</h1>\n<ul>\n<li>\n<p>MongoDB Model &#x26; Schema\n유저랑 관련된 데이터들을 데이터베이스에 보관하기 위해서 스키마와 스키마를 감싸주는 역할을 하는 모델을 생성\nserver>models>User.js</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//mongoose를 이용해 schema 생성</span>\n<span class=\"token keyword\">const</span> userSchema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\nname<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    maxlength<span class=\"token operator\">:</span> <span class=\"token number\">50</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nemail<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//입력한 이메일에 공백이 포함되어있을 경우 없애주는 역할</span>\n    trim<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 똑같은 이메일을 쓰지 못하게, 이메일 중복 방지</span>\n    unique<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\npassword<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//일반 유저와 관리자를 구분</span>\nrole<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//object를 주지않고 string 이런식으로만 해도 됨</span>\nimage<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n<span class=\"token comment\">//유효성 관리</span>\ntoken<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\ntokenExp<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> Number\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// schema를 model로 감싸줌</span>\n<span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User'</span><span class=\"token punctuation\">,</span> userSchema<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 이 model을 다른 파일에서 사용가능하도록 설정</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>","excerpt":"환경설정 기본 요구사항 Node.js : 자바스크립트 런타임  NPM : 패키지 매니저 도구 Node js javascirpt를 server side에서 사용할 수 있는 언어 npm package 생성\n sever 폴더 생성 후 폴더 안에다가 백엔드 서버 시작하기 위한 index.js 파일 생성   Express node js를 쉽게 이용할 수 있게 해주는 프레임워크 Light HTTP web Framework 설치\n\nExpress 공식문서  서버 생성, 시작 Express 기본 라우팅 (참고)\n라우팅은 URI(또는 경로) 및 특정한 HTTP 요청 메소드(GET, POST 등)인 특정 엔드포인트에 대한 클라이언트 요청에 애플리케이션이 응답하는 방법을 결정하는 것\n각 라우트는 하나 이상의 핸들러 함수를 가질 수 있으며, 이러한 함수는 라우트가 일치할 때 실행됨 라우트 정의 구조\n\n    > app: express의 인스턴스\n    > METHOD: HTTP 요청 메소드\n    > P…","frontmatter":{"date":"November 11, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React1/"}},"next":{"id":"f1ffc20d-507b-50ab-8452-dacf17aef84b","html":"<h1 id=\"project명-무제-_-개인-프로젝트\" style=\"position:relative;\"><a href=\"#project%EB%AA%85-%EB%AC%B4%EC%A0%9C-_-%EA%B0%9C%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"project명 무제 _ 개인 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project명 (무제) _ 개인 프로젝트</h1>\n<ul>\n<li>\n<h3 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목표</h3>\n<p>Front end 뿐만 아니라 백 서버와 DB를 구축해서 어느 서비스에나 존재하는\n로그인, 회원가입과 더불어 상품들을 관리하는 쇼핑몰 프로젝트를 진행하고자 한다\n추가적으로 완성한 프로젝트를 aws로 배포해보고자 한다</p>\n</li>\n<li>\n<h3 id=\"프로젝트-예상-기간-2021년-11월-10일--2021년-11월-23일\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%98%88%EC%83%81-%EA%B8%B0%EA%B0%84-2021%EB%85%84-11%EC%9B%94-10%EC%9D%BC--2021%EB%85%84-11%EC%9B%94-23%EC%9D%BC\" aria-label=\"프로젝트 예상 기간 2021년 11월 10일  2021년 11월 23일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 예상 기간 (2021년 11월 10일 ~ 2021년 11월 23일)</h3>\n</li>\n</ul>\n<h1 id=\"스택\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D\" aria-label=\"스택 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택</h1>\n<ul>\n<li>\n<h2 id=\"front-end\" style=\"position:relative;\"><a href=\"#front-end\" aria-label=\"front end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Front-end</h2>\n<blockquote>\n<p>React\nRedux, Redux-Toolkit\nJavascript\nTailwind</p>\n</blockquote>\n</li>\n<li>\n<h2 id=\"back-end\" style=\"position:relative;\"><a href=\"#back-end\" aria-label=\"back end permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Back-end</h2>\n<blockquote>\n<p>node js\nexpress</p>\n</blockquote>\n</li>\n<li>\n<h2 id=\"db\" style=\"position:relative;\"><a href=\"#db\" aria-label=\"db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB</h2>\n<blockquote>\n<p>mongo DB</p>\n</blockquote>\n</li>\n<li>\n<h2 id=\"배포\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%ED%8F%AC\" aria-label=\"배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배포</h2>\n<blockquote>\n<p>aws</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"구현-순서\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EC%88%9C%EC%84%9C\" aria-label=\"구현 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 순서</h1>\n<ol>\n<li>모델 설계</li>\n<li>백엔드 로직 구현</li>\n<li>프론트 구현</li>\n<li>최적화 및 TDD</li>\n<li>Redux로 상태관리</li>\n<li>배포 </li>\n</ol>\n<p>Reference</p>","frontmatter":{"date":"November 10, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React0/"}},"prev":{"id":"01749ce1-54ad-54e8-bc6e-3fdf2fee76d2","html":"<h1 id=\"회원가입-기능\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EA%B8%B0%EB%8A%A5\" aria-label=\"회원가입 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 기능</h1>\n<h2 id=\"bcrypt로-비밀번호-암호화\" style=\"position:relative;\"><a href=\"#bcrypt%EB%A1%9C-%EB%B9%84%EB%B0%80%EB%B2%88%ED%98%B8-%EC%95%94%ED%98%B8%ED%99%94\" aria-label=\"bcrypt로 비밀번호 암호화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bcrypt로 비밀번호 암호화</h2>\n<p><a href=\"https://www.npmjs.com/package/bcrypt\">공식문서 참고</a></p>\n<ul>\n<li>DB에 저장 시 Bcrypt라는 라이브러리 사용해 비밀번호를 암호화해 관리자도 암호를 모르게 하는게 목표\n<code class=\"language-text\">npm i bcrypt</code></li>\n<li>\n<p>Bcrypt로 비밀번호 암호화 하는 과정</p>\n<ol>\n<li>Register Router(server/index.js)에서 유저 정보들(Account, Password 등)을 데이터베이스(user model인 userSchema)에 저장(user.save)하기 전\n암호화하기 위해 server/models/User.js에서 유저 스키마를 가져와서 mongoose 메소드인 pre를 사용</li>\n<li>function 내 작업 끝나면 다시 user.save로 돌아가게끔 파라미터로 next를 넣어 next() function으로 user.save로 보냄</li>\n<li>비밀번호를 암호화 시키기 위해서 다운받은 bcrypt를 가져옴</li>\n<li>To hash a password\n-> salt가 몇글자인지 나타내는 saltRounds를 먼저 지정 후 salt를 생성함 -> 솔트를 이용해 비밀번호를 암호화 시킴</li>\n<li>\n<p>비밀번호 암호화를 userSchema 모델안의 필드 중 password가 변환될 때에만 해줌\n유저정보를 변경해 저장할 때마다 userSchema.pre쪽을 계속 바꾸게 되어 이메일만 변경해도 비밀번호를 암호화해버리는 문제가 발생하기 때문에\n비밀번호 바꿀때만 실행해야하게 조건(if (user.isModified(‘password’)) {) 달아줌\n( server/models/User.js )</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> saltRounds <span class=\"token operator\">=</span> <span class=\"token number\">10</span></code></pre></div>\n</li>\n</ol>\n</li>\n</ul>\n<p>userSchema.pre(‘save’, function (next) {\nvar user = this;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if (user.isModified('password')) {\n    // 비밀번호 암호화\n    // bcrypt를 가져와서 salt를 만들 때 saltRounds과 callback function을 넣어줌\n    // 에러나면 err를 가져와서 리턴시켜 user.save로 바로 들어가고\n    // salt를 제대로 생성했다면 다시 bcrypt가져와 암호화 되지 않은 비밀번호와 가져온 salt를 이용해서 해시에 넣어줌\n    // 이 암호화 되지 않은 비밀번호는 const user = new User(req.body) 이런식으로 req.body를 User모델에 넣었기 때문에\n    // var user = this;를 이용해 userSchema에 password를 user.password로 가져옴\n    // callback function으로 err를 넣어주고 암호화된 비밀번호인 hash를 넣어줌\n    // 에러 발생시 err를 리턴\n    // hash(암호화된 비밀번호)를 만드는 데 성공했다면 user.password(암호화 되지 않은 비밀번호)를 hash된 비밀번호로 교체해주고 next()를 이용해서 user.save로 돌아감\n    bcrypt.genSalt(saltRounds, function (err, salt) {\n        if (err) return next(err)\n\n        bcrypt.hash(user.password, salt, function (err, hash) {\n            if (err) return next(err)\n            user.password = hash\n            next()\n        })\n    })\n} else {\n  //비밀번호 바꾸는게 아닌 다른걸 바꾸면 그냥 next()를 해줘서 여기서 머물지 않고 바로 save쪽으로 넘어가게 해줌\n    next()\n}</code></pre></div>\n<p>})</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(server/index.js)\n```js\napp.post('/api/users/register', (req, res) => {\n\n  const user = new User(req.body)\n  ------------저장하기 전-----------------\n  user.save((err, userInfo) => {\n    if (err) return res.json({ success: false, err })\n    return res.status(200).json({\n      success: true\n    })\n  })\n})</code></pre></div>\n<h1 id=\"로그인-기능\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B8%B0%EB%8A%A5\" aria-label=\"로그인 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 기능</h1>\n<h2 id=\"로그인-router-생성\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-router-%EC%83%9D%EC%84%B1\" aria-label=\"로그인 router 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 Router 생성</h2>\n<ul>\n<li>post method 사용</li>\n<li>end point는 /login</li>\n<li>request, response 받음</li>\n<li>요청된 이메일(브라우저에 입력한 이메일)을 데이터베이스에 있는지 찾음</li>\n<li>요청된 이메일이 데이터 베이스에 있다면 비밀번호가 같은지 확인</li>\n<li>\n<p>비밀번호 까지 맞다면 그 유저를 위한 토큰을 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// 요청된 이메일(브라우저에 입력한 이메일)을 데이터베이스에 있는지 찾음</span>\n<span class=\"token comment\">// 유저 모델을 가져와서 mongoDB에서 제공하는 method인 findOne으로 찾고자 하는 이메일을 넣어 찾음</span>\n<span class=\"token comment\">// err, user로 callback function을 줌  </span>\n\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>email <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// User collection 안에 해당 이메일을 가진 유저가 한명도 없다면 이 유저가 없을 테니(!user) return을 해줄 때 </span>\n<span class=\"token comment\">// response json 데이터로  loginSuccess: false 가 되고  message도 줌</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    loginSuccess<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    message<span class=\"token operator\">:</span> <span class=\"token string\">\"제공된 이메일에 해당하는 유저가 없습니다.\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 요청된 이메일이 데이터 베이스에 있다면 (user collection 안에 해당 이메일을 가진 유저가 있다면) 비밀번호가 같은지 확인</span>\n<span class=\"token comment\">// user안에는 유저의 이름, 비밀번호, 이메일이 들어있는데 여기서 comparePassword 메소드를 생성해 (작명 아무렇게나 가능)</span>\n<span class=\"token comment\">// req.body.password(암호화 되기 전 비밀번호), (err, isMatch) 라는 에러가 나면 err, 비밀번호를 비교해서 브라우저에서 입력한 비밀번호와</span>\n<span class=\"token comment\">// db안에 들어있는 비밀번호를 비교해 맞다면 isMatch로 맞는지를 가져옴</span>\n<span class=\"token comment\">// 그 메소드를 유저 모델에서 만듦</span>\n<span class=\"token comment\">// 콜백function 두가지 인자(argument)를  </span>\nuser<span class=\"token punctuation\">.</span><span class=\"token function\">comparePassword</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> isMatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// isMatch가 없으면 비밀번호가 틀렸다는 뜻이기 때문에 response를 client에다가 loginSuccess: false, message를 줌</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMatch<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loginSuccess<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"비밀번호가 틀렸습니다.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>(server/models/User.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// userSchema를 가져온 다음에 comparePassword function에 plainPassword, cb 을 준다음</span>\nuserSchema<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">comparePassword</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">plainPassword<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// plainPassword 와 db에 있는 암호회된 비밀번호가 같은지 체크하려면</span>\n<span class=\"token comment\">// plainPassword를 암호화 해서 비교하면 됨</span>\n<span class=\"token comment\">// bcrypt를 가져와서 compare(plainPassword, 암호화된 비밀번호를 가져오기 위해 userSchema에서 password를 가져옴, callback function  )</span>\nbcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>plainPassword<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> isMatch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 비밀번호가 다르면 callback error를 줌</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token comment\">// 암호화 한 값과 db에 있는 값이 같다면 cb을 줄때 에러는 없고(null) 비밀번호가 같다(isMatch = true)</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> isMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 다시 로그인 라우터 쪽의  user.comparePassword(req.body.password, (err, isMatch) => { 로 가서 comparePassword 실행</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"토큰-생성-jsonwebtoken\" style=\"position:relative;\"><a href=\"#%ED%86%A0%ED%81%B0-%EC%83%9D%EC%84%B1-jsonwebtoken\" aria-label=\"토큰 생성 jsonwebtoken permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>토큰 생성 (jsonwebtoken)</h2>\n<p><a href=\"https://www.npmjs.com/package/jsonwebtoken\">공식문서 참고</a></p>\n<ul>\n<li>토큰 생성을 위해 라이브러리 설치\n<code class=\"language-text\">npm i jsonwebtoken</code>\njsonwebtoken을 import 해와서 sign이라는 메소드 이용해서 합쳐주면 토큰 생성됨</li>\n<li>\n<p>쿠키 사용을 위한 express에서 제공하는 라이브러리 설치\n<code class=\"language-text\">npm i cookie-parser</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// cookie parser 사용하기 위한 작업</span>\n<span class=\"token keyword\">const</span> cookieParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cookie-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>app.post(‘/api/users/login’, (req, res) => {\n// … 요청된 이메일이 데이터 베이스에 있다면 (user collection 안에 해당 이메일을 가진 유저가 있다면) 비밀번호가 같은지 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  //비밀번호가 맞다면 그 유저를 위한 토큰을 생성\n  // 토큰 생성 시 위에서 따로 comparePassword 메소드 생성한 것처럼 generateToken 생성\n  // callback function 파라미터에 하나만 들어있음 function (cb) \n  user.generateToken((err, user) => {\n    // 에러가 있다면 (res.status(400))을 클라이언트에 전해주고 err메시지도 같이 전달해줌\n    if (err) return res.status(400).send(err);\n    // User.js에서 var token = jwt.sign(user._id.toHexString(), 'secretToken')이렇게 토큰을 생성한 다음에\n    // user.token = token이렇게  user에다가 넣어준걸 받아온 상태 generateToken((err, user\n    // 이 user안에 토큰이 들어있는데 이걸 쿠키 or 로컳스토리지 or session 저장을 해서 보관해ㅑㅇ됨\n    // 어디에 저장해야 가장 안전할까에 대한 논란이 많음 각기 장단점이 존재\n    // 근데 여기선 쿠키에다가 함\n    // 토큰 저장할 때 user.token을 아무 이름(x_auth)으로 쿠키에다가 저장함\n\n    res.cookie(\"x_auth\", user.token)\n      //.status(200)는 성공했다는 표시\n      .status(200)\n      // json으로 데이터(loginSuccess와 userId) 보내줌 \n      .json({ loginSuccess: true, userId: user._id })\n  })\n})</code></pre></div>\n<p>  })\n})</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(server/models/User.js)\n```js\n//jsonwebtoken을 import 해옴\nconst jwt = require('jsonwebtoken');\n\nuserSchema.methods.generateToken = function (cb) {\n    var user = this;\n    \n    // jsonwebtoken(wt의 sign 메소드)을 이용해서 token을 생성 \n    // sign이라는 이용해서 합쳐주면 토큰 생성됨 \n    // db내 user id를 넣어주고 아무거나 넣어주면 \n    //user._id + 'secretToken' = token 만들어줌\n     // 나중에 token 해석 시 secretToken를 넣으면 user._id가 나오게 되기 때문에\n     // token을 가지고 이 사람이 누구인지 알 수 있음 \n     // secretToken를 넣었을 때 user._id가 나오니끼 기억해둬야됨\n\n     // sign을 해서 token 생성 시 \n     // user._id를 plain object로 변환시키기 위해 toHexString()사용해야 에러 발생하지 않음\n    var token = jwt.sign(user._id.toHexString(), 'secretToken')\n    // 만든 token을 userSchema에 있는 token 필드에 넣어줌\n    user.token = token\n    user.save(function (err, user) {\n      // 에러 있다면 리턴 시 callback으로 err를 전달해주고\n        if (err) return cb(err)\n        // save 성공 시 err는 없고(null) user정보만 user.generateToken((err, user) => { 로 다시 전달해줌\n        cb(null, user)\n    })\n}\n\nuserSchema.statics.findByToken = function(token, cb) {\n    var user = this;\n    // user._id + ''  = token\n    //토큰을 decode 한다. \n    jwt.verify(token, 'secretToken', function (err, decoded) {\n        //유저 아이디를 이용해서 유저를 찾은 다음에 \n        //클라이언트에서 가져온 token과 DB에 보관된 토큰이 일치하는지 확인\n        user.findOne({ \"_id\": decoded, \"token\": token }, function (err, user) {\n            if (err) return cb(err);\n            cb(null, user)\n        })\n    })\n}</code></pre></div>","frontmatter":{"date":"November 12, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React3/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React1/","nextSlug":"/Shop_React0/","prevSlug":"/Shop_React3/"}},"staticQueryHashes":["1073350324","2938748437"]}