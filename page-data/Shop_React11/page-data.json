{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React11/","result":{"data":{"cur":{"id":"1efd8bac-58c3-5222-9ed2-995ae8b69b80","html":"<h2 id=\"구현-목표\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%AA%A9%ED%91%9C\" aria-label=\"구현 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 목표</h2>\n<ul>\n<li>Redux로 상품 관리</li>\n<li>상품 리스트 페이지에서 “장바구니 담기” 버튼 클릭 시, navbar 내 장바구니의 숫자가 1씩 증가하면서 동시에 장바구니 페이지에 담기게 함</li>\n<li>장바구니 페이지에서 삭제 버튼(휴지통 모양의 아이콘)을 클릭하였을 때, navbar 내 장바구니의 숫자가 감소하며 동시에 장바구니의 상품을 삭제</li>\n</ul>\n<p>[Node.js] </p>\n<h1 id=\"moment-사용하기\" style=\"position:relative;\"><a href=\"#moment-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"moment 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>moment 사용하기</h1>\n<ol>\n<li>서론\nnode.js는 javascript 기반으로 기본적으로 시간 및 날짜 오브젝트인 Date를 가지고 있다. 하지만 Date 오브젝트를 사용하여 코드를 작성하면 가독성이 떨어지는 경우가 생겨 moment.js를 사용하는 경우가 있다. 물론 성능과 속도 측면에서 보면 moment가 뒤쳐질 수 있으나 경우에 따라서 개발자가 잘 결정해서 사용하는 것이 중요하다.</li>\n</ol>\n<h1 id=\"momentjs-설치\" style=\"position:relative;\"><a href=\"#momentjs-%EC%84%A4%EC%B9%98\" aria-label=\"momentjs 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>moment.js 설치</h1>\n<p>npm install moment</p>\n<h1 id=\"momentjs-사용\" style=\"position:relative;\"><a href=\"#momentjs-%EC%82%AC%EC%9A%A9\" aria-label=\"momentjs 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>moment.js 사용</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> moment <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 현재 날짜: moment()</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 특정 날짜 지정: moment('date') ->// Moment&lt;2021-01-27T00:00:00+09:00></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"YYYY-MM-DD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// ========== 형식 지정: format() =============</span>\n<span class=\"token comment\">// 현재 날짜 형식 지정</span>\n<span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 년-월-일 (2021-01-27)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYY-MM-DD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 시:분:초 (00:00:00)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 요일 (Wednesday)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dddd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 년-월-일 요일 (2021-01-27)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYY-MM-DD dddd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 년-월-일 시:분:초 (2021-01-27 00:00:00)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYY-MM-DD HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 년-월-일 요일 시:분:초 (2021-01-27 Wednesday 00:00:00)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYY-MM-DD dddd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// ======== 날짜 더하거나 빼기: add(), subtract()=========</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"days\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2021-01-28</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"months\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2021-03-27</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"years\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2023-01-27</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"days\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2021-01-26</span>\n<span class=\"token comment\">// ==============  시간 순서 비교 ===============</span>\n<span class=\"token comment\">// isBefore: moment()의 날짜가 isBefore 파라미터 날짜보다 이전인지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isBefore ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// isAfter: moment()의 날짜가 isAfter의 파라미터 날짜보다 이후인지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isAfter ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// isSame: moment()의 날짜가 isSame의 파라미터 날짜와 같은지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isSame ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// isSameOrBefore: moment()의 날짜가 isSameOrBefore의 파라미터 날짜와 같거나 이후인지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isSameOrBefore ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSameOrBefore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// isSameOrAfter: moment()의 날짜가 isSameOrAfter의 파라미터 날짜와 같거나 이후인지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isSameOrAfter ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSameOrAfter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// isBetween: moment()의 날짜가 isBetween의 파라미터들 사이의 날짜인지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isBetween ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBetween</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2021-01-02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// isBetween의 첫 번째 파라미터는 항상 두 번쨰 파라미터보다 이전인 날짜여야 한다.</span>\n<span class=\"token comment\">// 그렇지 않으면 항상 false (결과가 제대로 출력되지 않음)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBetween</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2020-12-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// =============== 시간의 차이: diff ===================</span>\n<span class=\"token comment\">// moment()의 날짜를 기준으로 diff의 첫 번쨰 파라미터 날짜와의 차이를 두 번째 파라미터를 기준으로 계산하여 출력한다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"days\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-30\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"minute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1440</span></code></pre></div>\n<p><code class=\"language-text\">npm install --save react-dropzone</code>\n<a href=\"https://github.com/react-dropzone/react-dropzone\">react-dropzone</a></p>\n<p>npm install @headlessui/react;<br>\nnpm install @tailwindcss/aspect-ratio</p>\n<p>문제: Can’t resolve ‘@heroicons/react/outline’\n해결: npm install @heroicons/react    </p>\n<p>문제: cannot find tailwind css forms\n해결: npm i @tailwindcss/forms;\nReference</p>\n<p><a href=\"https://millo-l.github.io/Nodejs-moment-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/\">milo님 블로그</a></p>","excerpt":"구현 목표 Redux로 상품 관리 상품 리스트 페이지에서 “장바구니 담기” 버튼 클릭 시, navbar 내 장바구니의 숫자가 1씩 증가하면서 동시에 장바구니 페이지에 담기게 함 장바구니 페이지에서 삭제 버튼(휴지통 모양의 아이콘)을 클릭하였을 때, navbar 내 장바구니의 숫자가 감소하며 동시에 장바구니의 상품을 삭제 Node.js  moment 사용하기 서론\nnode.js는 javascript 기반으로 기본적으로 시간 및 날짜 오브젝트인 Date를 가지고 있다. 하지만 Date 오브젝트를 사용하여 코드를 작성하면 가독성이 떨어지는 경우가 생겨 moment.js를 사용하는 경우가 있다. 물론 성능과 속도 측면에서 보면 moment가 뒤쳐질 수 있으나 경우에 따라서 개발자가 잘 결정해서 사용하는 것이 중요하다. moment.js 설치 npm install moment moment.js 사용 \nreact-dropzone npm install @headlessui/react; npm …","frontmatter":{"date":"December 12, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React11/"}},"next":{"id":"7bd5ed81-9721-5e7a-9ad6-0068dca1886a","html":"<h1 id=\"auth\" style=\"position:relative;\"><a href=\"#auth\" aria-label=\"auth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auth</h1>\n<ul>\n<li>아무나 진입 가능한 페이지: Landing Page, About Page</li>\n<li>로그인한 회원만 진입 가능한 페이지: Detail Page</li>\n<li>로그인한 회원은 진입 못하는 페이지: Register Page, Login Page</li>\n<li>관리자만 진입 가능한 페이지: Admin Page</li>\n<li>\n<p>댓글 작성, 파일 전송, 파일 업로드 등등 인증에 관한 것들을 컨트롤 해주기 위해 HOC라는 Higher Order Component를 사용해 페이지들에 대해 진입을 통제\n모든 가능한 케이스에 대해 처리</p>\n<h2 id=\"hoc\" style=\"position:relative;\"><a href=\"#hoc\" aria-label=\"hoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HOC</h2>\n<p>다른 컴포넌트를 받은 후 새로운 컴포넌트를 리턴하는 function\n<code class=\"language-text\">const EnhancedComponent = higherOrderComponent(WrapperComponent);</code>\nAuth 컴포넌트(react 부분)를 HOC로 설정하고 Auth에다가 다른 모든 컴포넌트들을 집어 넣어 새로운 컴포넌트를 생성\nbackend에다가 request를 날려서 현재 페이지에 들어와있는 사람의 상태정보를 HOC으로 가지고 올 수 있기 때문에 그 정보를 가지고 접근 제어를 할 수 있음 (페이지별 인증 컨트롤)</p>\n</li>\n<li>frontend : react, auth 컴포넌트</li>\n<li>backend : node js, request, 상태(로그인된 유저인지 어드민 유저인지 로그인이 되어있지 않은 유저인지)</li>\n</ul>\n<p>// 1. user_action.js에다가 export 작성 2. 타입 정의 후 3. types.js에다가 정의 4. reducer부분에서 import 해주고 case 작성해 리턴\n(client/src/hoc/auth.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> auth <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../_actions/user_action'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">SpecificComponent<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">,</span> adminRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ------------- option ----------------</span>\n    <span class=\"token comment\">//  null    =>  아무나 출입이 가능한 페이지</span>\n    <span class=\"token comment\">//  true    =>  로그인한 유저만 출입이 가능한 페이지</span>\n    <span class=\"token comment\">//  false   =>  로그인한 유저는 출입 불가능한 페이지</span>\n    <span class=\"token comment\">// --------------------------------------</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">AuthenticationCheck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 백엔드에 request를 날려서 유저의 현재상태를 가져오기 위해 useEffect 사용 (react 라이브러리에서 import)</span>\n<span class=\"token comment\">// server/index.js(백엔드)에 app.get('/api/users/auth',auth,(req,res))API를 이미 만들어 놨기 때문에 </span>\n<span class=\"token comment\">// get request로 요청을 주면 auth라는 미들웨어 부분으로 인해 server/middleware/auth.js로 요청이 오게됨</span>\n<span class=\"token comment\">// 그래서 여기서 토큰이 들어있는 쿠키를 사용해서 이 사람이 로그인한 유저인지 아닌지 판단해서 </span>\n<span class=\"token comment\">// 다시 react부분에 정보를 전달해주는 route부분(server/index.js)에다가 request를 날려주면 됨 </span>\n\n<span class=\"token comment\">// 현재 auth.js으로 돌아와서 원래는 Axios.get('api/users/auth')하면 되지만 여기선 리덕스를 사용할 거기 때문에</span>\n<span class=\"token comment\">// dispatch로 액션을 날려줌 => import {useDispathch} from 'react-redux' 라는 hook사용</span>\n<span class=\"token comment\">// const dispatch = useDispatch();해서 액션 이름은 auth라고 지음 dispatch(auth())</span>\n\n<span class=\"token comment\">// 이 auth를 (client/src/_actions/user_action.js)에다가 작성하기 때문에 현재 auth.js파일 맨 위에  import { auth } from ; 작성해줌</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// End point와 get method로 request 보내줌</span>\n    <span class=\"token comment\">// get메소드니까 바디부분(dataToSubmit)은 필요 없으니 지움</span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/auth'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// type는 AUTH_USER라고 해준 후 types.js에다가도 정의 </span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// (user_reducer.js) -> 이후 auth.js로 돌아감</span>\n<span class=\"token keyword\">case</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> userData<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n        <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n     \n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// then으로 백엔드(server/index.js의 appp.get auth 라우터)에서 처리해서 가져온 유저 정보들이 들어있는 response 안에는 </span>\n            <span class=\"token comment\">// 로그인 하기 전 (localhost:3000/login)</span>\n            <span class=\"token comment\">// type: \"auth_user\" payload: isAuth: false, error: true, __proto__: Object __proto__: Objet</span>\n            <span class=\"token comment\">// 로그인 후 (localhost:3000)</span>\n            <span class=\"token comment\">// type:\"auth_user\" payload: id:\"dsdwdfwdsf\" isAdmin: true isAuth: true email:\"dfsdf@gmail.com\" name: \"jiih\" lastname: \"yoo\" role: 1 __proto__: Object __proto__: Object </span>\n            \n                <span class=\"token comment\">// Auth 체크한 정보로 Auth 컴포넌트에서 분기처리를 해줌</span>\n                <span class=\"token comment\">// 로그인 페이지에 진입하는데 이미 로그인한 사람이면 Auth부분에서 못들어오게 막아주는 분기처리를 해야하기 때문에     </span>\n                <span class=\"token comment\">// 로그인 하지 않은 상태 (isAuth: false)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>isAuth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// 로그인하지 않는 사람이 로그인 한 사람만 들어갈 수 있는 option이 true인 페이지에 들어가려고 하는 거기 때문에 강제로 로그인 페이지로 이동시킴</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// 로그인 한 상태 </span>\n                    <span class=\"token comment\">// admin이 아닌데 admin만 들어갈 수있는 페이지를 들어가려고 할 때(adminRoute가 ture)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>adminRoute <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>isAdmin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// 로그인한 유저가 출입 불가능한 페이지(로그인, 레지스터페이지)를 가려고 할 때</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>option <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n                            props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>SpecificComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> AuthenticationCheck\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>(server/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// role 0 -> 일반유저   role 0이 아니면  관리자 </span>\n<span class=\"token comment\">// 이 라우트에서 모든 것을 처리하고 난 후 유저정보들을 클라이언트에 전해주고 있기 때문에 user_reducer.js에서 payload 부분에 모든 유저 데이터가 들어있음 그리고 다시 auth.js로 돌아감 </span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/auth'</span><span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//여기 까지 미들웨어를 통과해 왔다는 얘기는  Authentication 이 True 라는 말.</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    _id<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 어드민 유저인지 아니면 false고 맞으면 true</span>\n    isAdmin<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>role <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 인증된 유저인지(즉, 로그인된 사람인지)</span>\n    isAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    lastname<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>lastname<span class=\"token punctuation\">,</span>\n    role<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">,</span>\n    image<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>image\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"hoc-적용\" style=\"position:relative;\"><a href=\"#hoc-%EC%A0%81%EC%9A%A9\" aria-label=\"hoc 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HOC 적용</h1>\n<p>hoc는 다른 컴포넌트를 넣어줘야하기 때문에 모든 페이지 컴포넌트들이 있는 app.js를 이용함</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  BrowserRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span>\n  Switch<span class=\"token punctuation\">,</span>\n  Route<span class=\"token punctuation\">,</span>\n  Link\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> LandingPage <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/views/LandingPage/LandingPage'</span>\n<span class=\"token keyword\">import</span> LoginPage <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/views/LoginPage/LoginPage'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RegisterPage <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/views/RegisterPage/RegisterPage'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1. auth 컴포넌트를 import해옴</span>\n<span class=\"token keyword\">import</span> Auth <span class=\"token keyword\">from</span> <span class=\"token string\">'./hoc/auth'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n        <span class=\"token comment\">// 2. LandingPage 컴포넌트를 불러온 Auth 컴포넌트로 감싸줌 </span>\n        \n        <span class=\"token comment\">// 감싸줄 때 옵션 설정</span>\n        <span class=\"token comment\">// 1번째 파라미터 => client/src/hoc/auth.js의 인자인 SpecificComponent로 해당하는 컴포넌트인 LandingPage을 넣어줌</span>\n        <span class=\"token comment\">// 2번째 파라미터 => 아무나 출입 가능한 페이지인 null라는 옵션 설정해줌 </span>\n        <span class=\"token comment\">// 3번째 파라미터 => admin user만 들어가길 원하는 페이지라면 여기다가 ture라고 해주면 됨. 아무값도 안넣으면 기본값은 null</span>\n\n        <span class=\"token comment\">// ------------- option ----------------</span>\n        <span class=\"token comment\">//  null    =>  아무나 출입이 가능한 페이지 = LandingPage</span>\n        <span class=\"token comment\">//  true    =>  로그인한 유저만 출입이 가능한 페이지</span>\n        <span class=\"token comment\">//  false   =>  로그인한 유저는 출입 불가능한 페이지 = Login, RegisterPage </span>\n        <span class=\"token comment\">// --------------------------------------</span>\n\n          <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">Auth</span><span class=\"token punctuation\">(</span>LandingPage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/login\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">Auth</span><span class=\"token punctuation\">(</span>LoginPage<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/register\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">Auth</span><span class=\"token punctuation\">(</span>RegisterPage<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Reference</p>","frontmatter":{"date":"December 10, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React10/"}},"prev":{"id":"6f81dcdf-61c7-5c95-8a24-475ecbba5264","html":"<h1 id=\"상품-페이지-구현\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%92%88-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%AC%ED%98%84\" aria-label=\"상품 페이지 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상품 페이지 구현</h1>\n<h2 id=\"구현-목표\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%AA%A9%ED%91%9C\" aria-label=\"구현 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 목표</h2>\n<ul>\n<li>상품 전체 리스트 api를 불러와 렌더링</li>\n<li>각 상품 이미지 클릭 시 각 상품 id를 url뒤에 붙여 각 아이템에 맞는 페이지를 보여줌</li>\n<li>상품 상세페이지 구현 시 url에 있는 id만 뽑아와서 그에 맞는 api주소를 불러와서 렌더링 해줌</li>\n</ul>\n<h2 id=\"router\" style=\"position:relative;\"><a href=\"#router\" aria-label=\"router permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Router</h2>\n<ul>\n<li>react-router-dom 설치</li>\n</ul>\n<p><code class=\"language-text\">npm install react-router-dom</code></p>\n<p>url을 매치해 해당하는 라우터를 가져와서 보여줌\n/home/  :/home/과 /home/introduction\n/home/introduction : /home/introduction만\n이렇게 2개의 라우터가 있으면 모두 다 렌더링 하기 때문에 한페이지에서 두개의 컴포넌트가 겹쳐보이게 되기 때문에 <code class=\"language-text\">exact</code>를 사용함</p>\n<p>exact를 넣으면 path가 오직 “특정경로” 일때만 동작하도록 실행됨</p>\n<p>//match.params 값을 id 이름으로 받을 것임\n<Route exact path=\"/login/:id\" component={Login} />\n[공식문서 참고]](<a href=\"https://v5.reactrouter.com/web/api/Link/to-object\">https://v5.reactrouter.com/web/api/Link/to-object</a>)</p>\n<h2 id=\"link\" style=\"position:relative;\"><a href=\"#link\" aria-label=\"link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Link</h2>\n<ul>\n<li>링크를 연결시켜줄 뿐 아니라 object 전달이 가능한 <Link>를 사용해 id값 전달</li>\n<li>React에서는 링크를 걸어줄때 <a> tage 대신 <Link>를 사용하게 된다.</li>\n<li><a> tag를 사용하게 되면 링크를 누를때마다 재 렌더링 되기 때문에 웹페이지가 새로고침 되버리기 때문 </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> pathname<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/detail/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n            state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    title<span class=\"token operator\">:</span> title<span class=\"token punctuation\">,</span>\n                    name<span class=\"token operator\">:</span> name\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>img\n            src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>image_link<span class=\"token punctuation\">}</span>\n            alt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>path와 state를 지정하여 링크 연결 가능하며 속성(props)으로 전달한다</li>\n</ul>\n<p>(pathname에 목표 url을 지정하고, state에 내가 전달하려는 데이터를 집어넣으면 Link를 통해 데이터를 전달 가능함 )</p>\n<ul>\n<li>전달된 속성(props)를 받아 원하는대로 render해서 사용 가능함</li>\n</ul>\n<p><code class=\"language-text\">location.state.title</code></p>\n<ul>\n<li>주소창에 이런식으로 출력됨 => <a href=\"http://localhost:3000/detail/740\">http://localhost:3000/detail/740</a></li>\n<li>상품 리스트 페이지에서 “장바구니 담기” 버튼 클릭 시, navbar 내 장바구니의 숫자가 1씩 증가하면서 동시에 장바구니 페이지에 담기게 함</li>\n<li>장바구니 페이지에서 삭제 버튼(휴지통 모양의 아이콘)을 클릭하였을 때, navbar 내 장바구니의 숫자가 감소하며 동시에 장바구니의 상품을 삭제</li>\n</ul>\n<p>Reference\n<a href=\"https://rrecoder.tistory.com/101\">rrecoder님 블로그</a>\n<a href=\"https://velog.io/@devstone/react-router-dom-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B3%A0-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\">devstone님 블로그</a>\n<a href=\"https://dsc-sookmyung.tistory.com/41\">dsc님 블로그</a>\n<a href=\"https://velog.io/@sham/Router-Props-link%EB%A1%9C-%EC%A0%84%EB%8B%AC%ED%95%98%EB%8A%94-props\">sham님 블로그</a></p>","frontmatter":{"date":"December 13, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React12/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React11/","nextSlug":"/Shop_React10/","prevSlug":"/Shop_React12/"}},"staticQueryHashes":["1073350324","2938748437"]}