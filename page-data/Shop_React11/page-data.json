{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React11/","result":{"data":{"cur":{"id":"1efd8bac-58c3-5222-9ed2-995ae8b69b80","html":"<h2 id=\"구현-목표\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%AA%A9%ED%91%9C\" aria-label=\"구현 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 목표</h2>\n<ul>\n<li>Redux로 상품 관리</li>\n<li>상품 리스트 페이지에서 “장바구니 담기” 버튼 클릭 시, navbar 내 장바구니의 숫자가 1씩 증가하면서 동시에 장바구니 페이지에 담기게 함</li>\n<li>장바구니 페이지에서 삭제 버튼(휴지통 모양의 아이콘)을 클릭하였을 때, navbar 내 장바구니의 숫자가 감소하며 동시에 장바구니의 상품을 삭제</li>\n</ul>\n<p>[Node.js] </p>\n<h1 id=\"moment-사용하기\" style=\"position:relative;\"><a href=\"#moment-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"moment 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>moment 사용하기</h1>\n<ol>\n<li>서론\nnode.js는 javascript 기반으로 기본적으로 시간 및 날짜 오브젝트인 Date를 가지고 있다. 하지만 Date 오브젝트를 사용하여 코드를 작성하면 가독성이 떨어지는 경우가 생겨 moment.js를 사용하는 경우가 있다. 물론 성능과 속도 측면에서 보면 moment가 뒤쳐질 수 있으나 경우에 따라서 개발자가 잘 결정해서 사용하는 것이 중요하다.</li>\n</ol>\n<h1 id=\"momentjs-설치\" style=\"position:relative;\"><a href=\"#momentjs-%EC%84%A4%EC%B9%98\" aria-label=\"momentjs 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>moment.js 설치</h1>\n<p>npm install moment</p>\n<h1 id=\"momentjs-사용\" style=\"position:relative;\"><a href=\"#momentjs-%EC%82%AC%EC%9A%A9\" aria-label=\"momentjs 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>moment.js 사용</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> moment <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 현재 날짜: moment()</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 특정 날짜 지정: moment('date') ->// Moment&lt;2021-01-27T00:00:00+09:00></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"YYYY-MM-DD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// ========== 형식 지정: format() =============</span>\n<span class=\"token comment\">// 현재 날짜 형식 지정</span>\n<span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 년-월-일 (2021-01-27)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYY-MM-DD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 시:분:초 (00:00:00)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 요일 (Wednesday)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dddd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 년-월-일 요일 (2021-01-27)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYY-MM-DD dddd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 년-월-일 시:분:초 (2021-01-27 00:00:00)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYY-MM-DD HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 년-월-일 요일 시:분:초 (2021-01-27 Wednesday 00:00:00)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYY-MM-DD dddd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// ======== 날짜 더하거나 빼기: add(), subtract()=========</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"days\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2021-01-28</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"months\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2021-03-27</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"years\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2023-01-27</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-27\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"days\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2021-01-26</span>\n<span class=\"token comment\">// ==============  시간 순서 비교 ===============</span>\n<span class=\"token comment\">// isBefore: moment()의 날짜가 isBefore 파라미터 날짜보다 이전인지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isBefore ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// isAfter: moment()의 날짜가 isAfter의 파라미터 날짜보다 이후인지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isAfter ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// isSame: moment()의 날짜가 isSame의 파라미터 날짜와 같은지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isSame ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// isSameOrBefore: moment()의 날짜가 isSameOrBefore의 파라미터 날짜와 같거나 이후인지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isSameOrBefore ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSameOrBefore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// isSameOrAfter: moment()의 날짜가 isSameOrAfter의 파라미터 날짜와 같거나 이후인지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isSameOrAfter ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSameOrAfter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// isBetween: moment()의 날짜가 isBetween의 파라미터들 사이의 날짜인지 여부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========== isBetween ==========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBetween</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2021-01-02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// isBetween의 첫 번째 파라미터는 항상 두 번쨰 파라미터보다 이전인 날짜여야 한다.</span>\n<span class=\"token comment\">// 그렇지 않으면 항상 false (결과가 제대로 출력되지 않음)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBetween</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-01\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2020-12-01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// =============== 시간의 차이: diff ===================</span>\n<span class=\"token comment\">// moment()의 날짜를 기준으로 diff의 첫 번쨰 파라미터 날짜와의 차이를 두 번째 파라미터를 기준으로 계산하여 출력한다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"days\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2020-12-30\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"minute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1440</span></code></pre></div>\n<p><code class=\"language-text\">npm install --save react-dropzone</code>\n<a href=\"https://github.com/react-dropzone/react-dropzone\">react-dropzone</a></p>\n<p>npm install @headlessui/react;<br>\nnpm install @tailwindcss/aspect-ratio</p>\n<p>문제: Can’t resolve ‘@heroicons/react/outline’\n해결: npm install @heroicons/react    </p>\n<p>문제: cannot find tailwind css forms\n해결: npm i @tailwindcss/forms;\nReference</p>\n<p><a href=\"https://millo-l.github.io/Nodejs-moment-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/\">milo님 블로그</a></p>","excerpt":"구현 목표 Redux로 상품 관리 상품 리스트 페이지에서 “장바구니 담기” 버튼 클릭 시, navbar 내 장바구니의 숫자가 1씩 증가하면서 동시에 장바구니 페이지에 담기게 함 장바구니 페이지에서 삭제 버튼(휴지통 모양의 아이콘)을 클릭하였을 때, navbar 내 장바구니의 숫자가 감소하며 동시에 장바구니의 상품을 삭제 Node.js  moment 사용하기 서론\nnode.js는 javascript 기반으로 기본적으로 시간 및 날짜 오브젝트인 Date를 가지고 있다. 하지만 Date 오브젝트를 사용하여 코드를 작성하면 가독성이 떨어지는 경우가 생겨 moment.js를 사용하는 경우가 있다. 물론 성능과 속도 측면에서 보면 moment가 뒤쳐질 수 있으나 경우에 따라서 개발자가 잘 결정해서 사용하는 것이 중요하다. moment.js 설치 npm install moment moment.js 사용 \nreact-dropzone npm install @headlessui/react; npm …","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React11/"}},"next":{"id":"be6a6ee8-7812-5786-b74c-23873709c50d","html":"<h1 id=\"react-js\" style=\"position:relative;\"><a href=\"#react-js\" aria-label=\"react js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React js</h1>\n<ul>\n<li>페이스북에서 제공하는 자바스크립트 라이브러리 오픈소스</li>\n<li>자바스크립트로 AJAX, HTML 조작 → 코드 多 / React, Angular, Vue 라이브러리 사용 → 간결한 코드</li>\n<li>Component 기반 구조\nComponent는 독립적인 단위의 소프트웨어 모듈을 말하며 컴포넌트로 이루어져 있어 재사용 성이 뛰어남 (컴포넌트 조립해서 사용)\nReact는 UI(View)를 여러 컴포넌트(component)를 쪼개서 만들기 때문에 전체 코드를 파악하기가 쉬우며 한페이지 내에서도 기능 단위로 캡슐화시켜 코드를 관리하기 때문에 재사용성이 높음\n컴포넌트만 import해 사용하면 되니까 코드 반복 입력할 필요없이 간편하며, 애플리케이션이 복잡해지더라도 코드의 유지보수, 관리가 용이함</li>\n<li>Virtural DOM\n예전에 RealDOM을 쓸 땐 하나만 업데이트 해도 전체를 다 reload했는데 이제는 virtural DOM 형태인 React를 사용해 Virtual DOM을 이용해서 처음에 스냅샷을 찍어 놓고 관찰해 바뀐 부분만을 찾아내서 RealDOM에서 이 부분만을 바꿔주기 때문에 훨씬 더 빠르게 한 부분만을 바꿀 수 있게 해줌</li>\n<li>UX가 뛰어나 좋은 사용자경험 제공</li>\n<li>HTML 관리 편함</li>\n<li>SPA(싱글 페이지 어플리케이션)나 iOS/Android 모바일 앱 제작 가능</li>\n<li>다른 페이지로 넘어가도 새로고침없이 스무스하게 동작하는게 모바일 앱이랑 비슷해 앱이라 부름</li>\n<li>React는 데이터 흐름이 한 방향으로만 흐르는 단방향 데이터 흐름을 가짐\n양방향 데이터 바인딩은 규모가 커질수록 데이터의 흐름을 추적하기가 힘들고 복잡해지는 경향이 있어, 단방향으로 복잡한 앱에서도 데이터 흐름에서 일어나는 변화를 보다 예측 가능할 수 있도록 함</li>\n<li>Props and State\nProps: 부모 컴포넌트에서 자식 컴포넌트로 전달해 주는 변경 불가능한 데이터 (props 전달해준 최상위 부모 컴포넌트만 props 변경 가능)\nState: 컴포넌트 내부에서 선언하며 내부에서 값을 변경 가능. 동적인 데이터를 다룰 때 사용 (사용자와의 상호작용을 통한 변경 시)</li>\n</ul>\n<h2 id=\"bable-webpack\" style=\"position:relative;\"><a href=\"#bable-webpack\" aria-label=\"bable webpack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bable, webpack</h2>\n<ul>\n<li>babel\n최신 버전의 ECMAScript(unsupported or cutting-edge)를 ES5로 변환해주는 역할을 하는 transpiler\n(ES5는 최신 자바스크립트 문법을 지원하지 않는 범용적인(구형) 브라우저에서 지원을 하기 때문)</li>\n<li>\n<p>webpack\ndependency 분석기이자 module bundler</p>\n<p>이전에 js,css,html 파일 몇개로만 웹사이트를 만들었을 때와 달리 규모가 점점 커지면서 많은 라이브러리, 프레임워크등을 쓰다보니 등장하게 된 것. 많은 모듈들을 하나의 웹팩을 이용해 bundle 해줌 (묶어줌)\n예를들어 module A가 B를 dependency로 요청을하고, module B가 C를 dependency로 요청을 한다면 webpack은 C-B-A 와 같이 dependency map을 생성한다.\n실제로는 매우 복잡하지만, 기본적인 컨셉은 webpack이 모듈들을 복잡한 dependency 관계들과 함께 번들들로 통합해줌\nwebpack은 src폴더 내에만 관리해주고 public은 관리를 안해주기 때문에 이미지 파일 같은 것들을 앱에다 넣고 싶으면 src 안에다가 넣어야만 bundle 작용 가능</p>\n</li>\n<li>webpack과 babel의 관계\n웹팩이 종속성을 처리할 때, 웹팩은 자바스크립트 위에서 작동하기 때문에 모든 것을 자바스크립트로 변환해야 한다. 그 결과, 다른 로더를 사용하여 다른 유형의 리소스/코드를 javascript로 변환한다. ES6 또는 ES7에 대한 변환이 필요할 때에는 babel-loader를 사용해서 webpack과 babel을 연결시켜 사용한다.</li>\n</ul>\n<h2 id=\"cra\" style=\"position:relative;\"><a href=\"#cra\" aria-label=\"cra permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRA</h2>\n<p>원래 리액트 앱을 처음 실행 시 webpack이나 babel 같은 것을 설정하기 위해서 엄청나게 많은 시간이 걸렸는데 이젠 CRA(create react app) Command로 바로 시작 가능\n<code class=\"language-text\">npx create-react-app .</code>\n<code class=\"language-text\">npx create-react-app 프로젝트명 --template cra-template-pwa</code>\n이렇게 뜨면 설치 완료된 것</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">We suggest that you begin by typing:\n  <span class=\"token builtin class-name\">cd</span> reactshop\n  <span class=\"token function\">npm</span> start\nHappy hacking<span class=\"token operator\">!</span></code></pre></div>\n<h1 id=\"npm-vs-npx\" style=\"position:relative;\"><a href=\"#npm-vs-npx\" aria-label=\"npm vs npx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm VS npx</h1>\n<p>요즘 대부분의 라이브러리에서 npx의 설치 방식을 공식문서에 소개하는 만큼 굉장히 자주 사용하는 도구이기에 해당 명령어가 어떤 의미를 가지고 있는지를 파악한 후 사용하는 것이 중요</p>\n<h2 id=\"npx란\" style=\"position:relative;\"><a href=\"#npx%EB%9E%80\" aria-label=\"npx란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npx란?</h2>\n<p>npx = Package Runner (실행)</p>\n<ul>\n<li>npx는 npm과 비교대상이 아닌 npm에서 제공하는 npm 레지스트리에 올라가있는 패키지를 쉽게 설치하고 관리할 수 있도록 도와주는 CLI 도구</li>\n<li>npm을 통해 설치하는 모든 종류의 Node.js 기반의 파일들을 굉장히 간단하게 설치하고 실행할 수 있게 도와줌</li>\n<li>npx는 해당 패키지를 실행만 되게 해주기 때문에 가벼움</li>\n</ul>\n<p>npm = Package Manager (관리) </p>\n<ul>\n<li>자바스크립트 패키지 관리 모듈 (Node Package Module)</li>\n<li>라이브러리 레지스트리(저장소)역할과 파일 build 시켜주는 역할을 함, npm에 관한 것은 package.json에 다 정의 되어있음</li>\n</ul>\n<p><code class=\"language-text\">npm install -g npx</code></p>\n<h2 id=\"등장한-이유\" style=\"position:relative;\"><a href=\"#%EB%93%B1%EC%9E%A5%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"등장한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>등장한 이유</h2>\n<p>과거 npm으로 패키지를 설치할 땐 전역으로 패키지를 설치해 의존성 라이브러리들을 전체적으로 관리하는 방법과 특정 프로젝트에만 의존성 라이브러리를 설치하는 방법이 존재했음</p>\n<p>이렇게 되면 패키지 업데이트 될 때 전역 따로 로컬 따로 업데이트 해야하기에 번거롭고 모듈 업데이트가 확인 불가하며 모듈 업데이트 변경으로 인한 다른 모듈 에러발생 등의 문제가 발생하는데 이를 해결하는 도구가 npx인 것</p>\n<p>npx는 기존에 npm 설치 방법과는 다르게 일일이 설치, 실행, 제거를 할 필요 없이 일회성으로 원하는 패키지를 npm 레지스트리에 접근해서 실행시키고 설치하는 실행도구라\n패키지 설치 및 업데이트를 하지 않더라도 npm 레지스트리에 올라가 있는 최신 버전을 실행시키고 설치만 시키면 끝 </p>\n<p>예를들어 원래는 create-react-app할 때 npm install -g create-react-app 이런식으로 global디렉토리에 다운받았었는데</p>\n<p>이제는 npx가 npm registry에서 create-react-app을 찾아서(look up) 굳이 다운로드 받지 않다도 실행 시켜줌</p>\n<h2 id=\"npx-이점\" style=\"position:relative;\"><a href=\"#npx-%EC%9D%B4%EC%A0%90\" aria-label=\"npx 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npx 이점</h2>\n<ol>\n<li>global로 컴퓨터에 다운받지 않아도 되니까 disk space를 낭비하지 않을 수 있음</li>\n<li>npm registry에 있는 create-react-app을 찾아서(look up)실행 시켜주는 거니까 항상 최신버전 사용 가능</li>\n</ol>\n<h2 id=\"사용\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9\" aria-label=\"사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용</h2>\n<ul>\n<li>npm run-script를 사용하지 않고 로컬에 설치된 패키지를 사용할 경우 npx A만 입력하면 로컬 devDependencies에 설치된 A 패키지를 바로 실행가능\n{\n“devDependencies”: {\n“A”: “^1.4.0”\n}\n}</li>\n<li>로컬에 존재하지 않는 패키지를 일회성 명령으로 원하는 패키지를 npm 레지스트리에 접근해 실행, 설치\nnpx는 우선적으로 로컬에 패키지가 설치되어있는지 파악한 후 패키지가 존재하지 않는다면, npm 레지스트리에서 해당 이름의 패키지가 자동으로 설치되고 호출됨\n그래서 패키지를 업데이트 하지 않아도 npm 레지스트리에 올라가 있는 최신 버전을 수행함</li>\n<li>gist-based scripts를 실행할 경우\n<code class=\"language-text\">npx gist 주소</code>\nGithub의 gist에 올라가 있는 스크립트를 npx를 사용해서 쉽게 실행 간으</li>\n<li>특정 노드 버전의 스크립트를 실행할 경우\nnode 패키지는 nvm, nave 또는 n과 같은 노드 버전 관리 도구를 사용하지 않고도 서로 다른 노드 버전을 사용하여 노드 명령을 매우 쉽게 쓸 수 있는 툴</li>\n</ul>\n<h2 id=\"pwa-progressive-web-apps\" style=\"position:relative;\"><a href=\"#pwa-progressive-web-apps\" aria-label=\"pwa progressive web apps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PWA (Progressive Web Apps)</h2>\n<p><code class=\"language-text\">npx create-react-app reactshop --template cra-template-pwa</code></p>\n<h3 id=\"pwa란\" style=\"position:relative;\"><a href=\"#pwa%EB%9E%80\" aria-label=\"pwa란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PWA란</h3>\n<p>네이티브 앱을 개발하고 유지보수하는 것은 상당히 길고 복잡한 과정이며, 상당한 비용이 소요되는 경우도 많기 때문에</p>\n<p>굳이 앱을 개발하지 않고 웹만으로 웹에서 사용하는 기술과 네이티브 앱의 장점을 결합한 것 => 실제 네이티브 앱과 견줄 수 있을 정도로 좋음</p>\n<p>PWA를 통해서 사용자는 모바일 앱과 같은 사용자 경험(UX)을 누릴 수 있으며 실제 네이티브 앱이 제공하는 모바일 푸시 (알림), 오프라인이나 저속의 네트웍 속도에서의 사용을 지원함 </p>\n<p>게다가 HTML, JAVASCRIPT, CSS같은 웹 기술만으로도 구현이 가능함 </p>\n<p>인터넷 웹사이트의 파일들(html, javascript, css등)을 컴퓨터에 저장(캐싱)해 놨다가 다시 요청이 올 때 저장(캐싱)된 파일들을 먼저 보여주고 </p>\n<p>필요할 떄 웹서버에 있는 데이터를 받아서 보여주는 기술과 홈화면에 바로가기 아이콘을 설치 할 수 있게 하는 기술, 서버의 소식을 클라이언트에 전하는 Push기술.</p>\n<p>스마트폰으로 이 사이트에 접속 시 홈 화면에 설치 가능하며 이후 저장된 사이트를 열어보면 모양도 네이티브 앱처럼 보이고 기능도 모두 같고 브라우저 창도 없음\nPWA로 웹 애플리케이션을 만들 때의 가장 큰 장점은 운영체제에 관계없이 실행 가능하다는 것 (안드로이드 폰 , 아이폰)</p>\n<p>PWA인 대표적인 웹사이트들\n트위터닷컴(twitter.com), 스타벅스(Starbucks.com), 핀터레스트(Pinterest.com), 워싱턴포스트(Washingtonpost.com), 우버(Uber.com) 등</p>\n<h2 id=\"네이티브-앱-vs-pwa\" style=\"position:relative;\"><a href=\"#%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EC%95%B1-vs-pwa\" aria-label=\"네이티브 앱 vs pwa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>네이티브 앱 VS PWA</h2>\n<p>일반적으로 애플의 앱스토어나 구글의 플레이스토어에서 다운로드할 수 있는 네이티브 앱은 해당 플랫폼에 특화된 프로그래밍 언어(iOS: Swift, 안드로이드앱: Java)로 만드는 경우가 많아 </p>\n<p>다양한 환경에 필요한 관련된 기술을 알아야만 앱스토어에 출시가 가능하지만 PWA 방식을 이용하면 두 개의 환경에서 모두 실행되는 앱으르 개발이 가능함</p>\n<p>PWA는 일단 홈 화면에 저장되면 브라우저에서 실행되며, 네이티브 앱처럼 동작함\n그리고 보안상의 이유로 브라우저가 접근하지 못하는 시스템 하드웨어와 소프트웨어에도 접근 가능하기에 PWA의 성능이 뛰어나다면, 사용자들은 자신들이 웹 기반의 앱을 사용하고 있는 것인지, 아니면 네이티브 앱을 사용하고 있는 것인지를 구분하지 못함</p>\n<p>하지만 여러 브라우저들이 PWA를 위한 기술들을 빠르게 채택하고 있기는 하지만, iOS의 경우 사파리(Safari) 브라우저가 지원하지 않는 경우가 많아 다른 플랫폼에서와 동일한 환경을 구성하는 것이 번거로움\n게다가 네이티브 앱이 훨씬 더 깊숙이까지 운영체제 속으로 접근 가능하기에 고성능 게임과 같은 서비스를 개발 하는데에는 한계가 존재해 아직은 많은 부분에서 네이티브 앱이 우위를 보이고 있음</p>\n<p>그렇기 때문에 반드시 PWA로 해야하는 명확한 이유가 존재해야함\nPWA로 모바일 서비스를 하는 것도 좋지만 사용하고자 하는 사람이 없다면 개발할 이유가 없기 때문이다.\n누구를 위한것인지 고객이 사용하긴 하는지 훨씬 더 쉬운방법이 존재하는지 사용자경험에 도움이 되는 것인지 어디에 있는 사람들인지 데이터 통신이 원활한 지역에 살면서 하드웨어에 가기도 좋은 걸 사용하는지 자문해봐야한다</p>\n<h2 id=\"pwa-장점\" style=\"position:relative;\"><a href=\"#pwa-%EC%9E%A5%EC%A0%90\" aria-label=\"pwa 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PWA 장점</h2>\n<p>일단 많은 사람들이 앱을 개발하고자 하는 이유는 앱을 통해서 참여율을 더욱 끌어올릴 수 있기 때문</p>\n<p>앱을 설치하는 사용자들은 이미 관심이 있는 것이기 때문에 푸시 알림을 이용하면, 사용자들의 관심을 더욱 쉽게 이끌어낼 수 있어 브랜드에 도움이 되는 뛰어난 경험을 제공 가능함</p>\n<ul>\n<li>다양한 앱스토어에 출시하기 위해서 별도의 프로세스를 거치지 않아도 된다.</li>\n<li>일반적인 웹 기술을 활용해서 PWA를 만들 수 있다.</li>\n<li>일반적으로 개발 비용이 더 저렴하다.</li>\n<li>기존의 웹사이트를 앱으로 만들 수 있기 때문에, 추가로 유지관리해야 하는 코드베이스(codebase, 소스코드 일체)가 적다.</li>\n<li>PWA는 기본적으로 반응형(responsive)이기 때문에, 다양한 화면 크기에도 잘 동작한다.</li>\n<li>PWA는 부드럽고 빠르며 가볍다.</li>\n<li>구글이나 애플에게 거액의 돈을 줄 필요가 없다.</li>\n<li>일반적인 웹사이트와는 달리, 오프라인에서도 작동한다.</li>\n<li>PWA는 검색엔진을 통해서 찾을 수 있다. (앱스토어보다는 검색엔진을 사용하는 사람들이 훨씬 더 많다. </li>\n<li>그리고 원한다면 앱스토어를 통해서도 PWA를 배포할 수 있다.)</li>\n<li>푸시 알림을 통해서 사용자들의 관심을 끌 수 있다.</li>\n<li>PWA를 설치하게 함으로써 보다 높은 참여를 이끌어낼 수 있다.</li>\n</ul>\n<p>PWA에서 검색엔진 최적화(SEO)와 관련해서 고려해야 하는 요소들\nPWA는 기본적으로 웹(web)이 중심입니다. 웹에서 태어났고, 검색엔진으로 쉽게 찾을 수 있도록 개발되었습니다.\n물론, 오래된 웹사이트로도 얼마든지 PWA를 만들 수 있고, 이렇게 하면 시간도 많이 걸리지 않습니다.\n그러나 PWA는 자바스크립트를 활용해서 더욱 복잡한 기능을 구현하는 경우가 많습니다.\n그리고 요즘에는 검색엔진들도 자바스크립트의 렌더링(rendering, 코드를 화면에 표시하기 위해 변환하는 것)을 더욱 잘할 수 있기는 하지만, 여전히 우려해야 하는 부분들은 남아 있습니다.</p>\n<p>우선 PWA를 위한 환경을 설정할 때는, 검색엔진이 자바스크립트에 액세스 할 수 있도록 해야 합니다. 검색엔진의 봇(bot)이 파일에 접근하는 것을 막아 놓으면 안 되며, 링크도 유효한 것인지를 확인해야 합니다. 렌더링 프로세스를 개선하려면, 여러분의 자바스크립트 프레임워크가 서버 측 렌더링(웹페이지의 내용을 서버에서 렌더링 해서 전송해주는 방식)을 사용하도록 설정하는 것이 좋습니다.</p>\n<p>기존의 웹사이트를 PWA로 바꾼다고 해서 그것이 곧바로 SEO의 개선을 의미하는 것은 아닙니다. 기존의 사이트를 PWA로 전환하는 게 타당하다면 그렇게 해야 합니다. 하지만 단지 SEO를 개선하기 위한 목적으로 바꾸는 것은 좋지 않습니다. 훌륭한 PWA를 갖게 되면 사람들에게 환상적인 사용자 경험을 제공할 수 있으며, 여러분의 경쟁력을 한층 더 높일 수 있습니다. 그런 측면에서, 여러분이 만든 PWA의 모바일 SEO 전략은 어떠한지를 살펴보는 것이 좋습니다.</p>\n<p>기존의 웹사이트를 PWA로 바꾸기 전 해야할 작업 세 가지의 주요 구성요\nPWA를 설정하는 데는 많은 작업이 필요하지 않습니다. 기존의 웹사이트를 그럴듯한 PWA로 바꾸기 전에 해야 할 작업은 크게 3가지가 있습니다.\nPWA를 실행하기 위해 필요한 3가지</p>\n<ul>\n<li>보안 연결(HTTPS): PWA는 신뢰할 수 있는 연결 상태에서만 동작하기 때문에, 보안 연결을 통해서 서비스를 제공해야 합니다. 이건 단지 보안상의 이유 때문만은 아니고, 사용자들의 신뢰를 얻기 위해서도 아주 중요한 부분입니다.</li>\n<li>서비스 작업자(service worker): 서비스 작업자는 백그라운드에서 실행되는 스크립트입니다. 서비스 작업자는 네트워크와 관련된 요청의 처리를 도와주기 때문에, 여러분은 그 점에 대해서는 걱정하지 않고 더욱 복잡한 작업을 수행할 수 있습니다.</li>\n<li>매니페스트 파일(manifest file, 설정 파일): 이것은 제이슨(JSON, 용량이 적은 데이터를 교환하기 위한 형식) 파일이며, PWA가 표시되고 기능하는 방식에 대한 정보들이 포함되어 있는 것입니다. 여기에서는 PWA의 이름, 설명, 아이콘, 색상 등을 지정할 수 있습니다.</li>\n</ul>\n<p>PWA로 사용자들의 참여를 이끌어내기\nPWA는 여러분의 모바일 서비스에서 아주 뛰어난 역할을 담당할 수 있습니다. 제대로 만들면 아주 빠르고, 오프라인에서도 동작하며, 네이티브 앱과 같은 기능을 발휘할 수 있습니다. 전반적으로, PWA는 사람들에게 아주 멋진 사용자 경험을 제공할 수 있습니다.</p>\n<h2 id=\"pwa특징\" style=\"position:relative;\"><a href=\"#pwa%ED%8A%B9%EC%A7%95\" aria-label=\"pwa특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PWA특징</h2>\n<p>App처럼 홈스크린에 아이콘을 설치하여 APP처럼 쉽게 바로가기를 실현 가능함</p>\n<h2 id=\"push-메시지-기능\" style=\"position:relative;\"><a href=\"#push-%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B8%B0%EB%8A%A5\" aria-label=\"push 메시지 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Push 메시지 기능</h2>\n<p>App의 중요 특징 중 하나인 Push가 가능하다는 것입니다. 원래 웹은 클라이언트에서 서버로 요청이 있어야만 결과물을 보내주는 형태로 구현이 되는데 Push는 반대로 클라이언트의 요청이 없더라도 서버의 필요에 의해서 클라이언트에게 데이터를 보낼 수 있는 기능입니다. 보통 쪽지나 Notice형태로 제공됩니다.</p>\n<h3 id=\"offline-접속-기능\" style=\"position:relative;\"><a href=\"#offline-%EC%A0%91%EC%86%8D-%EA%B8%B0%EB%8A%A5\" aria-label=\"offline 접속 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Offline 접속 기능</h3>\n<p>PWA가 캐싱이 되기 때문에 Offline이거나 속도가 느린 상태에서도 미리 다운로드 되어 있는 정보를 계속 볼 수 있습니다.</p>\n<h3 id=\"보안\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88\" aria-label=\"보안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안</h3>\n<p>PWA는 HTTPS에서만 사용이 가능하기 때문에 일반 인터넷 데이터에 비해 보안이 강화된 상태라고 할 수 있습니다.</p>\n<h3 id=\"pwa-제작-기술\" style=\"position:relative;\"><a href=\"#pwa-%EC%A0%9C%EC%9E%91-%EA%B8%B0%EC%88%A0\" aria-label=\"pwa 제작 기술 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PWA 제작 기술</h3>\n<p>PWA를 구현하기 위해서는 크게 manifest.json과 Service Workers라는 2가지의 기술이 필요합니다.</p>\n<h3 id=\"manifestjson\" style=\"position:relative;\"><a href=\"#manifestjson\" aria-label=\"manifestjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>manifest.json</h3>\n<p>설치 시 아이콘은 무얼 사용하고 아이콘을 눌렀을때 접속할 페이지는 무엇인지, 배경색은 무슨색으로 할 것인지에 관한 설정파일</p>\n<h3 id=\"service-worker\" style=\"position:relative;\"><a href=\"#service-worker\" aria-label=\"service worker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>service-worker</h3>\n<p>PWA의 핵심으로 캐싱은 어떻게 할 것인지 요청시 캐시를 먼저 보여줄지 웹서버를 통해서 먼저 보여줄지, push 등등에 대한 프로그래밍하는 기술 (PWA의 거의 80%에 해당하는 기술)</p>\n<h2 id=\"react-구조\" style=\"position:relative;\"><a href=\"#react-%EA%B5%AC%EC%A1%B0\" aria-label=\"react 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 구조</h2>\n<ul>\n<li>index.js 파일:\nReactDOM.render(<App />, document.getElementById(‘root’));\npublic/index.html의  <div id=\"root\"></div> 부분에다가 보여주고 싶은 컴포넌트를 넣어주는데 App컴포넌트라고 정의를 해줌\n즉, app.js 페이지 렌더링 됨</li>\n</ul>\n<p>&#x3C; Src 폴더 내 > </p>\n<ul>\n<li>_actions, _reducer : Redux를 위한 폴더들</li>\n<li>components/views : Page들을 넣음 - Landing Page: 처음로딩되는 페이지에 관한 파일</li>\n<li>components/views/Sections : 해당 페이지에 관련된 css파일이나 component들을 넣음</li>\n<li>App.js: Routing 관련 처리 (페이지 별 분류)</li>\n<li>Config.js : 환경변수 정의</li>\n<li>hoc : Higher Order Component. 다른 컴포넌트를 갖는 function\n예를 들어 admin이라는 컴포넌트에 진입시 auth라는 hoc이 유저의 자격을 체크해서 컴포넌트에 진입 여부를 결정해 다음 액션을 취할 수있게 해줌\nauth 안에 여러 컴포넌트들을 넣어놓고 사용 가능 </li>\n<li>utils : 여러군데에서 쓰일 수 있는 것들을 이곳에 넣어 어디서든 쓸 수있게해줌</li>\n</ul>\n<h2 id=\"react-router-dom--페이지간-이동-\" style=\"position:relative;\"><a href=\"#react-router-dom--%ED%8E%98%EC%9D%B4%EC%A7%80%EA%B0%84-%EC%9D%B4%EB%8F%99-\" aria-label=\"react router dom  페이지간 이동  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Router Dom ( 페이지간 이동 )</h2>\n<p><a href=\"https://v5.reactrouter.com/web/example/basic\">참고</a>\n<code class=\"language-text\">npm i react-router-dom</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  BrowserRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span>\n  Switch<span class=\"token punctuation\">,</span>\n  Route<span class=\"token punctuation\">,</span>\n  Link\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> functiion <span class=\"token function\">BasicExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n   <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/signin\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/signup\"</span><span class=\"token operator\">></span>register<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>\n        <span class=\"token comment\">//라우터 안에 Home 컴포넌트 삽입</span>\n          <span class=\"token operator\">&lt;</span>LandingPage <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n        <span class=\"token comment\">// 한줄로 표현 가능</span>\n       <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/signin\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>LandingPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/signup\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>SignupPage <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nfuntion <span class=\"token function\">LandingPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 위의 컴포넌트를 따로 파일로 빼서 import 해올 수 있음</span>\n<span class=\"token keyword\">import</span> SigninPage <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/views/SigninPage/SigninPage'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>client<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>views<span class=\"token operator\">/</span>SigninPages<span class=\"token operator\">/</span>SigninPage<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\nfuntion <span class=\"token function\">SigninPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> SigninPage\n\nSignupPage<span class=\"token operator\">...</span> </code></pre></div>\n<h1 id=\"react-vs-react-hooks\" style=\"position:relative;\"><a href=\"#react-vs-react-hooks\" aria-label=\"react vs react hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React VS React Hooks</h1>\n<h2 id=\"react-component\" style=\"position:relative;\"><a href=\"#react-component\" aria-label=\"react component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Component</h2>\n<ul>\n<li>\n<p>Class Component\nProvide more features 더 많은 기능들 사용 가능\nLonger Code 코드 길어짐\nMore Complex Code 복잡한 코드\nSlower Performance 성능측면에서 느려짐</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// react 생성 순서(Life cycle) </span>\n<span class=\"token comment\">// 제일 먼저 constructor 실행</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// state을 먼저 부여해줌 name은 아무것도 없는 걸로 해줌</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// render후에 실행되는 부분</span>\n<span class=\"token comment\">// componentDidMount을 통해 데이터를 가져오거나 하고싶은 것들을 해주면 됨</span>\n<span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user/name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// constructor다음 render </span>\n<span class=\"token comment\">// DOM에다가 알맞게 넣어줘서 화면에 랜더링 해주는 것 </span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> My name is <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Functional Component\nProvide less features 한정적인 기능\nShorter Code 코드 짧음\nSimpler Code 코드 간단\nFaster Performance 성능이 더 좋음</li>\n</ul>\n<h2 id=\"functional-component에선-쓰지-못하는-class-component-기능\" style=\"position:relative;\"><a href=\"#functional-component%EC%97%90%EC%84%A0-%EC%93%B0%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-class-component-%EA%B8%B0%EB%8A%A5\" aria-label=\"functional component에선 쓰지 못하는 class component 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional Component에선 쓰지 못하는 Class Component 기능</h2>\n<p><a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">참고</a>\nClass Component를 이용할 때 리액트에서 처음에 페이지 켤 때 생성, 업데이트. 삭제 시\nconstructor-> render-> react updates DOM and refs -> componentDidMount 이런식의 과정을 거치는데 functional component에서는 이것들을 쓸 수가 없기에 빠르다는 장점을 제외하고는 기능이 제한적이다보니 대부분 클래스 컴포넌트를 사용해왔지만\nReact에서 Hooks을 발표한 이후부턴 life cycle, state 부여하는 기능등을 통해 functional component만으로도 Class Component기능들을 쓸 수있게됨\ncomponentDidMount = useEffect, this.state 를 useState로 대체해서 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Hooks</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// useEffect Hooks</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      Axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user/name'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> My name is <span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reference</p>\n<p><a href=\"https://webruden.tistory.com/275\">베이스 캠프</a>\n<a href=\"https://velog.io/@jini_eun/React-React.js%EB%9E%80-%EA%B0%84%EB%8B%A8-%EC%A0%95%EB%A6%AC\">Jini님 블로그</a>\n<a href=\"http://blog.wishket.com/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%A0%88%EC%8B%9C%EB%B8%8C-%EC%9B%B9-%EC%95%B1pwa%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%A9%B0-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80/\">wishket님 블로그</a></p>","frontmatter":{"date":"November 15, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React5/"}},"prev":{"id":"352d02f7-0c0f-55c0-9cdd-c4286b0775d1","html":"<blockquote>\n<p>서비스는 개발이 다가 아니라 빌드 후 배포까지 하는게 진정한 완성이다</p>\n</blockquote>\n<p>프론트엔드 개발을 시작하기에 참 편한 시대이지만, localhost에서만 작동하는 서비스는 서비스로서 전혀 의미가 없다.\n프론트엔드 서비스가 사용자에게 서비스로서 다가가기 위해서는 서비스에 걸맞는 도메인 이름, 도메인으로 접근했을 때의 빠른 첫 화면 표시, 오류 없는 구동, HTTPS를 통한 안전한 통신 보장 등 갖추어야 할 조건이 상당히 많다.</p>\n<p>물론 많은 부분을 최소한의 설정으로 쉽게 해결해주는 vercel, netlify, github pages와 같은 SaaS 서비스를 이용할 수도 있지만\n이런 서비스들은 개발자나 사용자들의 요구사항에 맞게 조작하기엔 한계가 있기 마련이다\n그렇기에 프론트엔드뿐만 아니라 웹서비스의 개발을 위한 거의 모든 도구들을 최상의 자유도로 제공하는 IaaS 서비스중 하나인 AWS\n를 이용해 개발자가 스스로의 용도에 맞게 조립하기도 한다 </p>\n<p>필자는 SaaS 서비스를 이용해 블로그 글을 배포하고 있기 때문에 이번 쇼핑몰 프로젝트에선 IaaS를 사용해보고 싶기도 하고\nAWS를 이용한 배포를 배우는 것은 시간은 오래 걸릴지언정 프론트엔드뿐만 아닌 전반적인 컴퓨터과학적인 지식의 학습의 기회가 될 것이고,\n실제 서비스의 인프라에 대해 더욱 깊게 이해할 수 있는 기회가 될 것 같아 IaaS 서비스를 이용하고자 한다</p>\n<h2 id=\"프로젝트-환경\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%98%EA%B2%BD\" aria-label=\"프로젝트 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 환경</h2>\n<p>client: React\nserver: Node.js, Express를 사용함</p>\n<ul>\n<li>디렉토리 구조\nprojectName/\nclient/\n/build\nserver/\nindex.js</li>\n<li>웹서버: NGINX 사용</li>\n<li>React로 만든 code를 build하여 정적 파일(html,css 등)을 웹 서버를 통해 제공합니다.</li>\n</ul>\n<p>그리고 DB 연결과 비지니스 로직을 담당하고있는 Node.js 서버를 Reverse Proxy로 요청을 처리하고 있구요</p>\n<h2 id=\"git-배포-전략-브랜치-전략-지속적-통합배포cicd를-위한-git-workflow-전략\" style=\"position:relative;\"><a href=\"#git-%EB%B0%B0%ED%8F%AC-%EC%A0%84%EB%9E%B5-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9%EB%B0%B0%ED%8F%ACcicd%EB%A5%BC-%EC%9C%84%ED%95%9C-git-workflow-%EC%A0%84%EB%9E%B5\" aria-label=\"git 배포 전략 브랜치 전략 지속적 통합배포cicd를 위한 git workflow 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git (배포 전략, 브랜치 전략, 지속적 통합/배포(CI/CD)를 위한 git workflow 전략)</h2>\n<p>릴리즈를 위한 branch를 생성하고 checkout하기 위해</p>\n<ul>\n<li>\n<p>브랜치 생성 (git branch 브랜치명)</p>\n<ul>\n<li>ex) git branch RB_1.0 master</li>\n<li>첫번째 매개변수는 생성하려는 브랜치명이고 두번째는 분기해 나올 브랜치명이라 master 브랜치에서 RB_1.0이라는 브랜치를 생성함 (RB는 릴리스 브랜치의 약어)</li>\n</ul>\n</li>\n<li>브랜치 이동 (git checkout 브랜치명)</li>\n<li>-b 옵션을 넣으면 브랜치 작성과 체크아웃을 한꺼번에 실행 가능\n<code class=\"language-text\">git checkout -b release-1.0.0</code></li>\n<li>\n<p>나중에 재배포시 밑의 명령어들을 차례로 입력해 github에 업로드 해 줌 (나중에 AWS환경에서 코드를 쉽게 가져올 수 있게함)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -am <span class=\"token string\">\"커밋 내용\"</span>\n<span class=\"token function\">git</span> checkout master\n<span class=\"token function\">git</span> merge release-1.0.0\n<span class=\"token function\">git</span> push origin master</code></pre></div>\n<h2 id=\"serverindexjs\" style=\"position:relative;\"><a href=\"#serverindexjs\" aria-label=\"serverindexjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>server/index.js</h2>\n</li>\n<li>PORT 설정</li>\n<li>static 설정</li>\n<li>\n<p>index.html 연결해줌</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">5000</span>\n<span class=\"token comment\">// key.js 파일 내부에서 product 모드이면</span>\n<span class=\"token comment\">// process.env에서 키를 참조하고,</span>\n<span class=\"token comment\">// dev 모드이면 dev.js 파일에서 참조하도록 설정함</span></code></pre></div>\n</li>\n</ul>\n<p>// 개발환경 분리(로컬 vs 배포모드)\nconst config = require(“./config/key”);\n// /client/build 폴더를 static 파일로 사용할 수 있도록 함</p>\n<p>// Serve static assets if in production\nif (process.env.NODE_ENV === “production”) {</p>\n<p>  // Set static folder\napp.use(express.static(“client/build”));</p>\n<p>  // index.html for all page routes 요청\napp.get(”*”, (req, res) => {\nres.sendFile(path.resolve(__dirname, “../client”, “build”, “index.html”));\n});\n}\napp.listen(PORT, () => console.log(<code class=\"language-text\">port ${PORT}</code>));</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## AWS에 배포\n\n# EC2: Elastic Compute Cloud \n# AWS: Amazon Web Services\n\n## AWS EC2란\n- AWS에서 제공하는 클라우드 컴퓨팅 서비스 (가상 컴퓨팅 환경)\n- 이 서비스를 통해 아마존이 각 세계에 구축한 데이터 센터의 서버용 컴퓨터들의 자원을 원격으로 사용 가능\n- AWS가 제공하는 URL(Public DNS)를 통해 이 컴퓨터에 접근 가능\n\n## EC2의 장점\n\n용량을 늘리거나 줄일 수 있다. (탄력성)\n사용한 만큼 지불하므로 저렴하다.\n사용자가 인스턴스를 완전히 제어할 수 있다.\n보안 및 네트워크 구성, 스토리지 관리 효과적이다.\n\n## 배포 준비\n프로젝트를 통째로 EC2 인스턴스에 NginX를 설치해 업로드 하는 것이 아니라 번들러를 이용해 하나의 파일로 묶어서 업로드 해야 한다.\n번들러 사용 시 최초 요청 완료 시간이 더 빠름\n##  번들러 설치 및 설정\n### 번들러 역할\n- 웹 서비스 배포 시, 수 많은 모듈로 분리 된 JS 파일들을 종속성에 따라 하나의 파일로 묶어줌\n- 내장 된 트랜스파일러로 자바스크립트 최신 문법을 ES5버전으로 `트랜스파일링` 해줌\n- 가독성을 위해 작성 되었던 여백 등을 지워주면서 파일의 크기를 줄여주는 기능 제공\n\n## 번들러 종류\n수 많은 종류의 번들러들이 있지만 그 중 이 세가지가 가장 많이 쓰인다\n- Webpack : 다양한 서드파티 필요 시 사용\n- Parcel : 작은 규모의 프로젝트, 간단한 설정에 적합\n- Rollup\n근데 CRA로 프로젝트를 생성 시 webpack이 자동으로 설정되어있어 이 경우 굳이 신경 안써도 됨\n\n## React와 Express 서버의 작동방식\nReact 앱과 Express서버는 접속 포트가 다르기에 각자 개별적으로 동작해 localhost:3000과 localhost:5000에서 접근 가능함\n\n(물론 React는 Express가 아닌 자체 서버를 사용하고 있기 때문에 이 상태로도 React 앱 개발 가능함)\n\n근데 이렇게 된다면 React와 Express간의 통신이 굉장히 번거롭기 때문에 Express 서버에서 바로 리액트 앱을 유저에게 보여주는 형태로 만들어 줌\n\n## React Build 파일을 Express 서버 위에서 돌리기.\n\n- `cd client &amp;&amp; npm build`를 통해 /client/build에 React build 파일을 생성\n\n- `client % npx serve -s build`\n\n- nodemon app을 통해 express 서버를 실행시킨 후 웹브라우저에 접속해 보면 localhost:5000 을 통해 리액트 빌드 파일이 보여짐\n\n## Concurrently &amp; http-proxy-middleware\n이렇게 매번 npm build를 수행해 개발을 진행하게 되면 최종 결과물이 Express 서버를 통해 나타나는 장점이 있지만 \n\nReact 개발을 하고 변동사항이 있을 때 마다 npm build를 통해 빌드한 후에나 React 변경사항을 확인가능하다.\n\n그렇기 때문에 이 번거로움을 해결하기 위해 concurrently를 통해 Webpack서버와 Express 서버를 동시에 실행시키고, http-proxy-middleware를 통해 두 서버에 프록시를 구성함\n\n이렇게 되면 결과적으로 개발 단계에서 두 서버가 따로 작동하도록 개발함에도 배포단계와 최대한 비슷한 느낌을 가져올 수 있음\n\n- Concurrently &amp; http-proxy-middleware 설치\n`npm i concurrently` \n`cd client &amp;&amp; npm i http-proxy-middleware` \n\n- Concurrently: 한 개의 터미널에서 두 개의 서버 작동이 가능하도록 해줌\n- package.json의 scripts 수정\n```json\n  \"scripts\": {\n    \"start\": \"node server/index.js\",\n    \"backend\": \"nodemon server/index.js\",\n    \"frontend\": \"npm run front --prefix client\",\n    \"dev\": \"concurrently \\\"npm run backend\\\" \\\"npm run start --prefix client\\\"\",\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },</code></pre></div>\n<p>이후 터미널에 <code class=\"language-text\">npm run dev</code>를 실행</p>\n<ul>\n<li>http-proxy-middleware: localhost:3000와 5000 사이에 프록시를 구성하여 두 서버가 하나의 서버인 것처럼 작동하게 만들어줌</li>\n<li>proxy: 특정 요청이 들어오면 용도에 맞게 서버를 연결해주는 역할을 하는 것</li>\n</ul>\n<p>/client/src/setupProxy.js </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createProxyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http-proxy-middleware\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">createProxyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      target<span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n      changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 되면 http-proxy-middleware가 setupProxy.js를 인식하기 때문에 localhost:3000/api 이하의 경로로 시작되는 요청이 <a href=\"http://localhost:5000/api\">http://localhost:5000/api</a> 에서 처리됨</p>\n<p>이후 터미널에 <code class=\"language-text\">npm run dev</code>를 실행해 proxy created… 관련 내용 뜨면 성공</p>\n<h1 id=\"amazon-ec2-생성-가상-머신-시작\" style=\"position:relative;\"><a href=\"#amazon-ec2-%EC%83%9D%EC%84%B1-%EA%B0%80%EC%83%81-%EB%A8%B8%EC%8B%A0-%EC%8B%9C%EC%9E%91\" aria-label=\"amazon ec2 생성 가상 머신 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Amazon EC2 생성 (가상 머신 시작)</h1>\n<p>인스턴스(가상 컴퓨터)를 생성하여 AWS가 제공하는 컴퓨터를 임대해 대신 돌림</p>\n<h2 id=\"초기-셋팅\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0-%EC%85%8B%ED%8C%85\" aria-label=\"초기 셋팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기 셋팅</h2>\n<ul>\n<li>도메인 구매</li>\n<li>react앱을 build로 배포버전 생성함 </li>\n<li>형성된 build 폴더를 git에 push</li>\n<li>aws 접속 후 로그인</li>\n<li>리전 ‘서울’로 변경</li>\n<li>EC2 서비스 클릭</li>\n</ul>\n<h2 id=\"인스턴스-시작\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%8B%9C%EC%9E%91\" aria-label=\"인스턴스 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스 시작</h2>\n<ul>\n<li>Ubuntu Server 20.04 LTS (HVM), SSD Volume Type - ami-0f8b8babb98cc66d0 (64비트 x86) / ami-00e9c733a0bb11ca4 (64비트 Arm), x86 선택, “프리 티어 사용 가능”</li>\n<li>리눅스 OS(오픈소스-무료)계열 중에 우분투 사용 -> 보편적이기 때문에 자료가 많음</li>\n<li><code class=\"language-text\">t2.micro</code> 선택 후 <code class=\"language-text\">검토 및 시작</code> 버튼 클릭</li>\n<li>인스턴스 시작</li>\n<li>키페어 선택 or 생성 (생성 선택)</li>\n<li>키페어는 프로젝트를 배포하기 위해 컴퓨터 원격조작 및 설치등의 작업을 할때 원격조작을 하러 들어가기 위한 키이다 (안전한 위치에 저장해 둠)</li>\n<li>키페어 이름: web_dev</li>\n<li>키페어 다운로드 클릭 후 인스턴스 보기 버튼 클릭 </li>\n<li>실행중이라고 뜨면 인스턴스가 정상작동 중인 것 (EC2를 1년간만 무료로 제공하기 때문에 잠깐 사용할 용도면 나중에 인스턴스 중지 및 종료를 해둠)</li>\n<li>인스턴스 중지 및 종료해둠</li>\n<li>퍼블릭 IPv4 주소: 3.36.69.146 </li>\n</ul>\n<h2 id=\"보안-그룹-설정\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88-%EA%B7%B8%EB%A3%B9-%EC%84%A4%EC%A0%95\" aria-label=\"보안 그룹 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안 그룹 설정</h2>\n<ul>\n<li>규칙 추가를 눌러 HTTP, HTTPS를 추가해줌 (SSH, HTTP, HTTPS)</li>\n</ul>\n<h2 id=\"elastic-ip-탄력적-ip\" style=\"position:relative;\"><a href=\"#elastic-ip-%ED%83%84%EB%A0%A5%EC%A0%81-ip\" aria-label=\"elastic ip 탄력적 ip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elastic IP (탄력적 IP)</h2>\n<p>만약 인스턴스를 중단했다가 재실행할 상황이 생긴다면, 부여된 public IPv4가 변경되기 때문에\n도메인을 연결해 배포하려면 꼭 탄력적 IP를 설정해줘야함</p>\n<ul>\n<li>모든 서비스 > 컴퓨팅 > EC2 > 네트워크 및 보안 > 탄력적 IP 로 들어감</li>\n<li>탄력적 IP 주소 할당을 눌러 생성해줌</li>\n<li>생성한 IP를 선택하고 작업 > 탄력적 IP 주소 연결을 눌러줌</li>\n<li>아까 생성한 인스턴스를 선택하고 연결해주면 인스턴스의 Public IPv4가 탄력적 IP로 바뀌어 있음</li>\n</ul>\n<h2 id=\"aws-ec2-인스턴스-보안-설정\" style=\"position:relative;\"><a href=\"#aws-ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%B4%EC%95%88-%EC%84%A4%EC%A0%95\" aria-label=\"aws ec2 인스턴스 보안 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS EC2 인스턴스 보안 설정</h2>\n<p>인스턴스에서 어떤 포트를 개방할 지 설정해야 node app.js로 서버를 실행시켜 3.36.69.146:3001으로 접속 가능</p>\n<p>인스턴스 리스트 페이지에서 해당 인스턴스를 체크를 한 후, Security groups에 첫 번째 항목에 이름을 기억해 Security Groups 페이지로 이동</p>\n<p>Security groups에 첫 번째 항목 이름과 일치하는 항목을 체크해주고 <code class=\"language-text\">Edit inbound rules</code>를 클릭</p>\n<p>사용할 포트 넘버(Port range)를 입력 후, <code class=\"language-text\">Save rules</code>를 클릭</p>\n<h2 id=\"인스턴스-액세스-방법\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%95%A1%EC%84%B8%EC%8A%A4-%EB%B0%A9%EB%B2%95\" aria-label=\"인스턴스 액세스 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스 액세스 방법</h2>\n<h3 id=\"ssh-원격-접속-준비-웹-서버-설치-및-설정\" style=\"position:relative;\"><a href=\"#ssh-%EC%9B%90%EA%B2%A9-%EC%A0%91%EC%86%8D-%EC%A4%80%EB%B9%84-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95\" aria-label=\"ssh 원격 접속 준비 웹 서버 설치 및 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSH 원격 접속 준비 (웹 서버 설치 및 설정)</h3>\n<p>인스턴스 환경에 접속해 코드를 다운받고 배포해야 하기 위해 먼저 ssh로 접속함</p>\n<ul>\n<li>SSH 클라이언트 열기</li>\n<li>프라이빗 키 파일(AwsKeyPair.pem)을 찾음</li>\n<li>터미널 켜고 pem 키가 있는 폴더로 이동 (AWS에서 키파일을 ~/.ssh 경로에 넣는 것을 권장하고 있음)</li>\n<li>~/.ssh 디렉토리에 복사하는 이유는, 이후 ssh 실행 시 pem 키 파일을 자동으로 읽어 접속이 가능하기 때문</li>\n<li>\n<p>~/.ssh 경로에 넣으려면 </p>\n<blockquote>\n<p>먼저 이전에 생성된 key가 있는지 확인하기 위해 <code class=\"language-text\">cat ~/.ssh/id_rsa.pub</code>\n생성한 적이 없다면  No such file or directory 라고 뜰 것\nssh key 를 생성해주기 위해 <code class=\"language-text\">ssh-keygen</code> 입력 후 Generating public/private rsa key pair뜨면 따로 설정하지 않고 enter 쳐서 넘어감\n키 생성 기본 위치는 /Users/본인 컴퓨터명/.ssh 폴더에 파일이 생성됨 (/Users/yujihyeon/.ssh/id<em>rsa.)\n다시 `cat ~/.ssh/id</em>rsa.pub<code class=\"language-text\">실행해보면 \nAWS 인스턴스 생성 시 받은 pem 파일 복사 및 설정하기 위해 ~/.ssh 경로에 복사함\ncp pem 키의 경로/pem 키의 파일명 ~/.ssh/</code>cp Downloads/web_dev.pem ~/.ssh`\ncd ~/.ssh 로 이동 후 정상적으로 파일이 복사되었는지 확인</p>\n</blockquote>\n</li>\n<li>SSH가 작동하려면 키가 공개적으로 표시되지 않아야 함</li>\n<li>\n<p>키 파일을 사용하기 위해서는 접근모드를 400으로 바꿔줘야한다</p>\n<p><code class=\"language-text\">chmod 400 web_dev.pem</code></p>\n</li>\n<li>\n<p>터미널에서 퍼블릭 DNS(or IP)를 사용하여 내 (EC2)인스턴스에 연결하는 명령어 입력 (pem파일이 있어야 접근 가능) </p>\n<p><code class=\"language-text\">ssh -i \"web_dev.pem\" ubuntu@3.36.69.146</code> 로 접속</p>\n</li>\n<li>Are you sure you want to continue connecting (yes/no/[fingerprint]) -> yes 입력</li>\n<li>Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.11.0-1020-aws x86_64) 뜨면 인스턴스에 접속 성공</li>\n<li>맨 처음에는 3.36.69.146 주소로 들어가더라도 웹 서버가 없기 때문에 아무것도 작동하지 않음</li>\n</ul>\n<h2 id=\"web웹-서버-vs-was웹-어플리케이션\" style=\"position:relative;\"><a href=\"#web%EC%9B%B9-%EC%84%9C%EB%B2%84-vs-was%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\" aria-label=\"web웹 서버 vs was웹 어플리케이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WEB(웹 서버) vs WAS(웹 어플리케이션)</h2>\n<p>일단 서버 개발에 있어서 가장 기초적인 개념인 WEB와 WAS의 차이점을 알아보고자 한다</p>\n<h3 id=\"web\" style=\"position:relative;\"><a href=\"#web\" aria-label=\"web permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WEB</h3>\n<ul>\n<li>웹 브라우저 클라이언트(사용자)로부터 HTTP 요청(페이지 요청)을 받아 HTML 문서와 같은 웹 페이지를 반환하는 컴퓨터 프로그램 (정적 컨텐츠를 제공)</li>\n<li>정적 컨텐츠: 단순 HTML 문서, CSS, javascript, 이미지, 파일 등 즉시 응답가능한 컨텐츠</li>\n<li>웹 서버는 정적 컨텐츠만 제공하는 것이 아니라 동적 컨텐츠를 요청 받으면 WAS에게 해당 요청을 넘겨주고, WAS에서 처리한 결과를 클라이언트(사용자)에게 전달해주기도 함</li>\n<li>즉, 웹 서버는 단순한 html 페이지를 요청하고 불러올 때 사용하거나 리버스 프록시로서의 역할을 수행함</li>\n</ul>\n<h3 id=\"wasweb-application-servier\" style=\"position:relative;\"><a href=\"#wasweb-application-servier\" aria-label=\"wasweb application servier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WAS(Web Application Servier)</h3>\n<ul>\n<li>인터넷 상에서 HTTP 프로토콜을 통해 사용자 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어</li>\n<li>주로 동적 서버 컨텐츠를 수행하는 것으로 웹 서버와 구별이 되며, api를 사용해 데이터베이스에 접근하는 등 주로 데이터베이스 서버와 같이 수행 된다 (더 동적인 페이지 운영 시 사용)</li>\n<li>웹 서버와 웹 컨테이너가 합쳐진 형태로서, 웹 서버 단독으로는 처리할 수 없는 데이터베이스의 조회나 다양한 로직 처리가 필요한 동적 컨텐츠를 제공하기 때문에 사용자의 다양한 요구에 맞춰 웹 서비스를 제공 가능</li>\n<li>WAS는 JSP, Servlet 구동환경을 제공해주기 때문에 웹 서버가 보낸 JSP, PHP 등의 파일을 수행한 결과를 다시 웹 서버로 보내주는 웹 컨네이너 혹은 서블릿 컨테이너라고도 불림</li>\n<li>웹 서버 선택\n대표적인 웹서버: Apache와 NginX\n대표적인 WAS : Tomcat, Jeus, JBoss (node로도 간단한 웹 서버를 구현 가능)\nNode.js는 http 모듈을 내장하고 있어서 아파치와 같은 별도의 웹서버가 필요없음\n그렇다고 WAS만 써도 되는건 아니다\nWAS는 DB 조회 및 다양한 로직을 처리하는 데 집중해야 한다.\n따라서 단순한 정적 컨텐츠는 웹 서버에게 맡기며 기능을 분리시켜 서버 부하를 방지한다.\n만약 WAS가 정적 컨텐츠 요청까지 처리하면, 부하가 커지고 동적 컨텐츠 처리가 지연되면서 수행 속도가 느려지고 이로 인해 페이지 노출 시간이 늘어나는 문제가 발생하여 효율성이 크게 떨어진다.\n웹 서버를 WAS 앞에 두고 필요한 WAS들을 Web Server에 플러그인 형태로 설정하면 더욱 효율적인 분산 처리가 가능</li>\n</ul>\n<p>엔진엑스(Nginx)는 동시접속 처리에 특화된 웹 서버이다.</p>\n<p>트래픽이 많은 웹 사이트를 호스팅 하는데 주로 사용되는 가볍고 Apache보다 동작이 단순하며 강력하다.</p>\n<h2 id=\"web-service-architecture\" style=\"position:relative;\"><a href=\"#web-service-architecture\" aria-label=\"web service architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Service Architecture</h2>\n<p>웹 어플리케이션은 요청 처리 방식에 따라 다양한 구조를 가질 수 있다.</p>\n<p>클라이언트(사용자)  →  Web Server  →  DB\n클라이언트(사용자)  →  WAS → DB\n클라이언트(사용자)  →  Web Server  →  WAS  →  DB</p>\n<h2 id=\"apache--vs--nginx--vs--nodejs\" style=\"position:relative;\"><a href=\"#apache--vs--nginx--vs--nodejs\" aria-label=\"apache  vs  nginx  vs  nodejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apache  vs  Nginx  vs  Node.js</h2>\n<p>웹 사이트들중 34.0%가 NginX를 사용하지만 웹 서버들 모두 각 장단점을 갖고 있기 때문에 상황에 따른 적절한 선택이 필요하다\nnginx는 apache보다 동작이 단순하고 전달자 역할만 해 동시 접속에 특화 되어 있기 때문에 동시 접속자 수가 많을 것으로 예상이 되는 쇼핑몰에 적합하다고 여겨 Nginx로 선택했다</p>\n<h1 id=\"생성된-aws-ec2-인스턴스에-nodejs-서버-배포\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EB%90%9C-aws-ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-nodejs-%EC%84%9C%EB%B2%84-%EB%B0%B0%ED%8F%AC\" aria-label=\"생성된 aws ec2 인스턴스에 nodejs 서버 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성된 AWS EC2 인스턴스에 Node.js 서버 배포</h1>\n<p>EC2를 생성했던 이유를 되돌아보면 프로젝트를 배포하고 싶은 이유였던 것을 확인할 수 있다.</p>\n<p>코드를 서버에 띄우기</p>\n<ul>\n<li>관리자 계정(root)으로 접속\n<code class=\"language-text\">sudo su</code></li>\n<li>서버를 클론하기 전에 인스턴스에 기본적으로 깔려있는 git으로 Node.js와 npm을 설치\n(<code class=\"language-text\">git --version</code> 쳐서 설치 확인)</li>\n<li>\n<p>우선 패키지 최신버전으로 재설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade</code></pre></div>\n</li>\n<li>\n<p>AWS 인스턴스에서 Node.js 설치 - 이 서버를 사용해 Node.js 웹 애플리케이션을 호스팅할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># SSH를 사용하여 ec2-user로 Linux 인스턴스에 연결 &amp; nvm(노드 버전 관리자)을 설치</span>\n<span class=\"token function\">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh <span class=\"token operator\">|</span> <span class=\"token function\">bash</span>\n<span class=\"token comment\"># nvm 활성화</span>\n<span class=\"token builtin class-name\">.</span> ~/.nvm/nvm.sh\n<span class=\"token comment\">#  Node.js의 최신버전 설치 (Node.js 설치 시 npm(노드 패키지 관리자)도 설치되므로 필요에 따라 추가모듈 설치 가능)</span>\nnvm <span class=\"token function\">install</span> node\n<span class=\"token comment\"># Node.js가 올바르게 설치되고 실행되는지 테스트</span>\nnode -e <span class=\"token string\">\"console.log('Running Node.js ' + process.version)\"</span></code></pre></div>\n<p><a href=\"https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html\">공식문서 참고</a></p>\n<h2 id=\"오류-사항\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%82%AC%ED%95%AD\" aria-label=\"오류 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 사항</h2>\n<p>code EACCES npm ERR! syscall access npm ERR! path /home/ubuntu/React_Shop/client npm ERR! errno -13\n아래와 같은 명령어를 사용해 설치시 버전이 맞지 않아 에러가 발생함</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># sudo apt install nodejs</span>\n<span class=\"token comment\"># sudo apt install npm</span></code></pre></div>\n<h2 id=\"오류-해결\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0\" aria-label=\"오류 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 해결</h2>\n<p>nvm을 통해 프로젝트 진행시 사용했던 특정버전을 설치해줌</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">nvm <span class=\"token function\">install</span> <span class=\"token number\">14</span>\nnvm use <span class=\"token number\">14</span>\nnode version -<span class=\"token operator\">></span> v14.17.6</code></pre></div>\n<h2 id=\"프로젝트-clone\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-clone\" aria-label=\"프로젝트 clone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 Clone</h2>\n<ul>\n<li>이후 원하는 디렉토리에다 Node.js 서버(빌드파일 올렸던 git 파일)를 git clone 해줌</li>\n<li>앞서 배포용 git에 dist 파일을 올린 상태에서, AWS에서 EC2를 만들어서 git으로 해당 프로젝트를 clone 받음</li>\n<li><code class=\"language-text\">git clone 프로젝트url</code></li>\n</ul>\n<h2 id=\"프로젝트-디렉토리로-이동\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EB%A1%9C-%EC%9D%B4%EB%8F%99\" aria-label=\"프로젝트 디렉토리로 이동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 디렉토리로 이동</h2>\n<ul>\n<li><code class=\"language-text\">cd projectName</code></li>\n<li>client와 server로 폴더를 나눠놨기 때문에 각각의 폴더에서 node_modules를 설치해주고 (= 필요한 의존성들을 설치해줌)\nclient 폴더에서 react를 build 해줌</li>\n</ul>\n<h2 id=\"react-설치-후-실행\" style=\"position:relative;\"><a href=\"#react-%EC%84%A4%EC%B9%98-%ED%9B%84-%EC%8B%A4%ED%96%89\" aria-label=\"react 설치 후 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react 설치 후 실행</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> client\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token function\">npm</span> run build\n\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<h2 id=\"오류-발생--1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%B0%9C%EC%83%9D--1\" aria-label=\"오류 발생  1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 발생 -1</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">client에서 빌드 시 에러 발생</code></pre></div>\n<h2 id=\"오류-해결--1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0--1\" aria-label=\"오류 해결  1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 해결 -1</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo apt install xsel</code></pre></div>\n<h2 id=\"오류-발생--2\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%B0%9C%EC%83%9D--2\" aria-label=\"오류 발생  2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 발생 -2</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root경로의(두번째 npm install) npm install 시 오류발생    \n\nconfigure error  gyp ERR! stack Error: EACCES: permission denied, mkdir '/home/ubuntu/React_Shop/node_modules/bcrypt/build'</code></pre></div>\n<h2 id=\"오류-해결--2\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0--2\" aria-label=\"오류 해결  2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 해결 -2</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">github 리포지터리 들어가서 확인해본 결과 root경로에 node_modules 폴더가 git에 올라가있었는데 해당 프로젝트를 git clone 해왔기 때문에 발생함 \n\n즉시 clone한 프로젝트를 삭제하고 프로젝트 내 터미널에서 git rm --cached -r node_modules 후 그 프로젝트를 다시 새롭게 클론해줌</code></pre></div>\n<ul>\n<li>디렉토리 삭제 명령: <code class=\"language-text\">rm -r 디렉토리명</code></li>\n<li>파일 삭제 명령:  <code class=\"language-text\">rm abc.txt</code></li>\n</ul>\n<h2 id=\"서버-실행\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EC%8B%A4%ED%96%89\" aria-label=\"서버 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 실행</h2>\n<ul>\n<li>\n<p>서버를 실행하기 전, production mode를 적용해주고</p>\n<!-- `export NODE_ENV=production` -->\n<p><code class=\"language-text\">npm start</code></p>\n<h2 id=\"오류-발생--1-1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%B0%9C%EC%83%9D--1-1\" aria-label=\"오류 발생  1 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 발생 -1</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Error: error:0308010C:digital envelope routines::unsupported\nat new Hash (node:internal/crypto/hash:67:19)\nat Object.createHash (node:crypto:130:10)\nat module.exports (/Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/util/createHash.js:135:53)\nat NormalModule._initBuildHash (/Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:417:16)\nat handleParseError (/Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:471:10)\nat /Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:503:5\nat /Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:358:12\nat /Users/user/Programming Documents/WebServer/untitled/node_modules/loader-runner/lib/LoaderRunner.js:373:3\nat iterateNormalLoaders (/Users/user/Programming Documents/WebServer/untitled/node_modules/loader-runner/lib/LoaderRunner.js:214:10)\nat iterateNormalLoaders (/Users/user/Programming Documents/WebServer/untitled/node_modules/loader-runner/lib/LoaderRunner.js:221:10)\n/Users/user/Programming Documents/WebServer/untitled/node_modules/react-scripts/scripts/start.js:19\nthrow err;\n^</code></pre></div>\n<h2 id=\"오류-해결--1-1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0--1-1\" aria-label=\"오류 해결  1 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 해결 -1</h2>\n<p><a href=\"https://jemerald.tistory.com/98?category=932089\">참고</a></p>\n</li>\n</ul>\n<p>터미널에 커맨드를 통해 환경변수를 설정하여 해결</p>\n<p><code class=\"language-text\">export NODE_OPTIONS=--openssl-legacy-provider</code> </p>\n<p>위 error는 node.js의 version이 맞지않아 발생하는 case이며, 17.0.~이상인 current version일 경우에 나타난다. 16.~ LTS version으로 변경해주면 해당 error case를 잡을 수 있다.</p>\n<h2 id=\"오류-발생--2-1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%B0%9C%EC%83%9D--2-1\" aria-label=\"오류 발생  2 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 발생 -2</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dev.js 파일 없다고 에러남\nError: Cannot find module './dev'</code></pre></div>\n<h2 id=\"오류-해결--2-1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0--2-1\" aria-label=\"오류 해결  2 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 해결 -2</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.gitignore 파일 내 포함되어있었기 때문에 따로 dev.js 파일을 생성해줘야함</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> server\n<span class=\"token builtin class-name\">cd</span> config\n<span class=\"token function\">cat</span> <span class=\"token operator\">></span> dev.js\nmodule.exports <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mongoURI:<span class=\"token punctuation\">..</span>. 이하 생략\nctrl + c <span class=\"token punctuation\">(</span>종료하는 단축키<span class=\"token punctuation\">)</span></code></pre></div>\n<p>코드가 안들어가있다면 vi 편집기를 통해 다시 넣어줌 </p>\n<ol>\n<li>vi dev</li>\n<li>i 키를 누르면 왼쪽하단에 —INSERT— 라고 뜸</li>\n<li>텍스트를 입력</li>\n<li>텍스트 입력이 완료되었으면 esc를 눌러서 명령어 모드로 바꿈</li>\n<li>:wq를 입력해서 파일의 데이터를 저장후 vi편집기를 빠져나옴</li>\n</ol>\n<p>인스턴스의 퍼블릭 IPv4 (DNS)로 접속했을 때 제대로 뜬다면 성공\n-> <code class=\"language-text\">3.36.69.146:3000</code> URL로 이동 시 개발한 프로젝트가 뜸</p>\n<h2 id=\"pm2\" style=\"position:relative;\"><a href=\"#pm2\" aria-label=\"pm2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pm2</h2>\n<p>현재는 server에서만 npm start를 한 거라 server만 켜져있는 상태라 브라우저 상에<code class=\"language-text\">Cannot GET /</code> 만 뜸</p>\n<p>그래서 client에서 실행하려면 server는 pm2로 실행 해줘야함</p>\n<ul>\n<li>\n<p>pm2에서 간단하게 살펴보자면 pm2는 서버를 실행 후 터미널에서 인스턴스를 나올려면 어쩔 수 없이 서버를 꺼야하지만,</p>\n<p>pm2 설치 시 실행 후 status가 online이면 ubuntu 터미널을 닫아도 서버가 종료되지 않고 계속 실행됨</p>\n<p>만약 종료해주고 싶다면 <code class=\"language-text\">pm2 stop [id]</code>를 해줌 (참고로 처음 실행시 id는 0임)</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># pm2 설치</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g pm2\n<span class=\"token comment\"># 설치 후 app.js가 있는 폴더로 이동해 다음 명령 실행해줌</span>\npm2 start server/index.js</code></pre></div>\n<h1 id=\"실행\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89\" aria-label=\"실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> client\n<span class=\"token function\">npm</span> start</code></pre></div>\n<h2 id=\"웹-서버nginx-설치-및-환경-설정하기-참고\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%84%9C%EB%B2%84nginx-%EC%84%A4%EC%B9%98-%EB%B0%8F-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0-%EC%B0%B8%EA%B3%A0\" aria-label=\"웹 서버nginx 설치 및 환경 설정하기 참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 서버(Nginx) 설치 및 환경 설정하기 (참고)</h2>\n<p>서버 컴퓨터에 파일만 올려서는 실행이 안되니 Apache나 Nginx 같은 웹서버를 설치해서 구동시켜 줘야한다</p>\n<ul>\n<li>Nginx 설치 (apt로 설치 받음) - ubuntu 20.04에 Nginx 설치\n<code class=\"language-text\">sudo apt-get install nginx</code></li>\n<li>실행\n<code class=\"language-text\">sudo service start nginx</code>\nec2의 퍼블릭 IP 주소로 입력해서 들어갔을 때<code class=\"language-text\">welcom to nginx!</code>화면이 뜬다면 nginx 웹서버가 정상적으로 설치 되어 작동되고 있다는 뜻이다.</li>\n</ul>\n<h2 id=\"nginx-환경-설정\" style=\"position:relative;\"><a href=\"#nginx-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95\" aria-label=\"nginx 환경 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nginx 환경 설정</h2>\n<p>nginx의 설정은 <code class=\"language-text\">nginx.conf 파일</code>로 설정함 (nginx 파일 위치:/etc/nginx ) </p>\n<ul>\n<li>해당 파일을 vi로 열고 상단부에 modules-enabled라는 하위 디렉토리에 내가 원하는 conf파일을 만들어 그 파일의 설정 내용을 반영하도록 하는 문장을 입력\n<code class=\"language-text\">include /etc/nginx/modules-enabled/*.conf;</code></li>\n<li>\n<p>이후 modules-enabled의 디렉토리에 <code class=\"language-text\">파일이름.conf</code>파일 생성해, listen 3000이라는 줄을 작성하고(로드밸런서에서 웹 서버의 3000번 포트로 요청을 보내기 때문), 해당 포트로 접근 시 내 웹 서버의 location에 위치하는 파일을 열어 보여준다는 코드 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\nlisten 3000;  // 3000번 포트로 들어왔을 때\nlocation / {\nroot /home/ubuntu/uplanet_mbti;  // 해당 디렉토리에 있는\nindex index.html index.htm;        // index.html을 보여줘라!\n}\n}</code></pre></div>\n</li>\n</ul>\n<p><a href=\"https://blog.leehov.in/36\">leehov님 블로그</a>\n<a href=\"https://data-jj.tistory.com/31\">datajj님 블로그</a>\n<a href=\"https://codechasseur.tistory.com/25\">codechasseur님 블로그</a>\n<a href=\"https://velog.io/@hadam/React-Express-AWS-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-2\">hedam님 블로그</a>\n<a href=\"https://whiteknight3672.tistory.com/264\">whiteknight님 블로그</a>\n<a href=\"https://velog.io/@gwsyl22/git-branch-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%B2%B4%ED%81%AC%EC%95%84%EC%9B%83\">hyojinit님 블로그</a>\n<a href=\"https://zzang9ha.tistory.com/338\">zzzang9ha님 블로그</a>\n<a href=\"https://velog.io/@boori/React-Express-AWS-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\">boori님 블로그</a></p>","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React 배포","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React14/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React11/","nextSlug":"/Shop_React5/","prevSlug":"/Shop_React14/"}},"staticQueryHashes":["1073350324","2938748437"]}