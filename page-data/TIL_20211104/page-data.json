{"componentChunkName":"component---src-templates-blog-template-js","path":"/TIL_20211104/","result":{"data":{"cur":{"id":"f8024bc6-e485-50b9-b8f7-8f4bfe4360a2","html":"<p>Redux Middleware를 적용하기 전에 동기 &#x26; 비동기에 대해 짚고 넘어가고자 함</p>\n<h1 id=\"javascript-synchronous동기-asynchronous비동기-콜백함수\" style=\"position:relative;\"><a href=\"#javascript-synchronous%EB%8F%99%EA%B8%B0-asynchronous%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98\" aria-label=\"javascript synchronous동기 asynchronous비동기 콜백함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript Synchronous(동기), Asynchronous(비동기), 콜백함수</h1>\n<h2 id=\"synchronous-asynchronous-의미\" style=\"position:relative;\"><a href=\"#synchronous-asynchronous-%EC%9D%98%EB%AF%B8\" aria-label=\"synchronous asynchronous 의미 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Synchronous, Asynchronous 의미</h2>\n<ul>\n<li>동기: 하나의 요청이 오면 완료가 된 후 다음 요청을 실행하는 방식 (순차적으로 로직 수행됨)</li>\n<li>비동기: 어떤 요청이 오면 완료 되기 까지 기다리지 않고 다음 요청을 실행하는 방식\n→ 여러 작업을 동시에 효율적으로 처리하기 때문에 즉시 응답을 못받아 흐름을 정확히 파악해 그에 맞게 적절히 처리 되어야 예상밖의 결과가 나오는 것을 막을 수 있음 (순차적인 흐름을 보장하지 않음, 완료되면 실행, 물리적으로 잠시 보류) </li>\n<li>자바스크립트는 일반적인 코드 작성 시 synchronous(동기식)하게 코드 적은 순서대로 윗에서부터 한줄한줄 차례로 처리됨.</li>\n<li>ajax 요청, 이벤트 리스너, state 변경함수, setTimeout, 이런 함수들은 처리시간이 오래걸리기 때문에 사용 시 asynchronous (비동기적)으로 처리됨</li>\n</ul>\n<h2 id=\"콜백-함수\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98\" aria-label=\"콜백 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백 함수</h2>\n<p>비동기로 작성된 함수를 일부 구간에서 동기 처리(순차적 처리)하기 위한 하나의 방법론\n→ 독립적으로 수행되는 작업뿐만 아니라 응답을 받은 이후 처리 되어야하는 종속적인 작업에 대응 하기 위함</p>\n<h2 id=\"콜백-함수-형태\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-%ED%98%95%ED%83%9C\" aria-label=\"콜백 함수 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백 함수 형태</h2>\n<p>보통 함수를 선언한 뒤에 함수 타입 파라미터를 맨 마지막에 하나 더 선언 해 주는 방식으로 정의\n처리가 끝나면 파라미터로 전달 받은 함수를 실행하며 필요한 경우 결과 값을 인자로 넘겨줄 수도 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function mainFunc(param1, param2, callbackFunc) {\n// ... 처리 내용\n    callbackFunc(result);\n}</code></pre></div>\n<h2 id=\"적용-예시\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"적용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용 예시</h2>\n<p>Synchronous(동기) Vs Asynchronous(비동기) 의미</p>\n<ul>\n<li>\n<p>동기식 (순차흐름)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function syn(alphabet, seq_1, seq_2) {\nconsole.log(\"B\");\n    var total = seq_1+seq_2;\nvar total = price*quantity;\nreturn total;\n}\n// 1과 2의 총합을 리턴해 tot변수에 대입 시켜주고 tot를 cal 함수의 파라미터로 넘겨줌\nvar tot = syn(\"A\", 1, 2);\ncal(tot);</code></pre></div>\n</li>\n<li>\n<p>1,000,000,000번 루프를 돌고, 이 작업이 얼마나 걸렸는지 알려주는 기능을 하는 <code class=\"language-text\">work()</code> 함수 호출 시 for 문이 돌아갈 때는 다른 작업은 처리하지 않고 온전히 for 문만 실행</p>\n<ul>\n<li>\n<p>Date.now -> 현재 시간을 숫자 형태로 가져오는 자바스크립트 내장 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n</li>\n</ul>\n<p>const start = Date.now();\nfor (let i = 0; i &#x3C; 1000000000; i++) {}\nconst end = Date.now();\nconsole.log(end - start + ‘ms’);\n}</p>\n</li>\n</ul>\n<p>work();\nconsole.log(‘다음 작업’);</p>\n<p>// 출력 값 -> 517ms 다음작업</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 비동기 방식 \nsetTimeout 함수를 사용하여 함수 안의 코드가 1초뒤에 출력이 완료되게 구현\n결과값 : A → undefined → B (1초 후 출력됨) \nsetTimeout함수 호출 시 다음 구문을 1초 뒤가 아닌 호출한 직후 실행하기 때문에 tot 변수에 아무 값도 받지 못한 상태로 C가 B보다 먼저 출력됨</code></pre></div>\n<p>function asyn(alphabet, seq<em>1, seq</em>2) {\nsetTimeout(function() {\nconsole.log(“B”);\nvar total = seq<em>1+seq</em>2;\nreturn total;\n}, 1000);\n}</p>\n<p>function asyn(alphabet, seq<em>1, seq</em>2) {\nvar tot = asyn(“A”, 1, 2);\ncal(tot);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 비동기에서 콜백함수를 이용한 동기처리 (feat. 콜백함수가 필요한 이유_동기 &amp; 비동기)\nB 이후의 행위를 기술하기 위해 콜백 함수를 인자로 받고 setTimeout 함수 내에 포함\n콜백 함수에 C를 기술시 결과값 : A → (1초뒤 출력)B → C(순차 실행 만족)</code></pre></div>\n<p>function buy<em>tobe(alphabet, seq</em>1, seq<em>2, callback) {\nsetTimeout(function() {\nconsole.log(“B”);\nvar total = seq</em>1+seq_2;\ncallback(total);\n}, 1000);\n}</p>\n<p>function cal(tot) {\nconsole.log(tot + “C”);\n}\n// cal 함수를 콜백 파라미터에 대입\nbuy<em>tobe(“A”, 1, 2, cal);\n// pay 함수를 따로 선언하지 않고 바로 익명함수 처리도 가능함\nbuy</em>tobe(“A”, 1, 2, function(tot) {\nconsole.log(tot + “C”);\n});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 동기에서 비동기 처리\nfor문 돌아가는 동안 다른 작업도 하고싶으면 `setTimeout` 함수를 사용해 비동기 형태로 변환해 줘야함\n`setTimeout` 함수\n- 첫번째 파라미터에 넣은 함수를 두번째 파라미터에 넣은 시간(ms 단위)이 흐른 후 호출해줌\n- 정한 작업이 백그라운드에서 수행되기 때문에 기존의 코드 흐름을 막지 않고 동시에 다른 작업들을 진행 가능</code></pre></div>\n<p>function work() {\nsetTimeout(() => {\nconst start = Date.now();\nfor (let i = 0; i &#x3C; 1000000000; i++) {}\nconst end = Date.now();\nconsole.log(end - start + ‘ms’);\n}, 0);\n}</p>\n<p>console.log(‘작업 시작!’);\nwork();\nconsole.log(‘다음 작업’);\n//출력 값 -> 작업 시작! 다음 작업 508ms</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- work 함수가 끝난 다음에 어떤 작업을 처리하고 싶다면 콜백 함수를 파라미터로 전달해주면 됨\n콜백 함수 → 함수 타입의 값을 파라미터로 넘겨줘서, 파라미터로 받은 함수를 특정 작업이 끝나고 호출을 해주는 것</code></pre></div>\n<p>function work(callback) {\nsetTimeout(() => {\nconst start = Date.now();\nfor (let i = 0; i &#x3C; 1000000000; i++) {}\nconst end = Date.now();\nconsole.log(end - start + ‘ms’);\ncallback();\n}, 0);\n}</p>\n<p>console.log(‘작업 시작!’);\nwork(() => {\nconsole.log(‘작업이 끝났어요!‘)\n});\nconsole.log(‘다음 작업’);</p>\n<p>//출력 값 : 작업시작! 다음 작업 298ms 작업이 끝났어요!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">작업들을 비동기적으로 처리하게 되는 경우\n\n- Ajax Web API 요청: 서버쪽에서 데이터를 받아올 땐 요청 후 서버에서 응답 할 때까지 대기함\n- 파일 읽기: 주로 서버 쪽에서 파일을 읽어야 하는 상황\n- 암호화/복호화:  바로 처리가 되지 않고 시간이 어느정도 걸리는 경우가 있기 때문\n- 작업 예약: 단순히 어떤 작업을 몇초 후에 스케쥴링 해야 하는 상황에 setTimeout 을 사용\n- 비동기 작업을 다룰 때에는 callback 함수, Promise,  async/await 라는 문법을 사용해 처리 가능.\n\n# Promise\n[[typescript] Promise와 Async/Await 구문](https://hoony-gunputer.tistory.com/entry/typescript-Promise%EC%99%80-AsyncAwait-%EA%B5%AC%EB%AC%B8)\n\n## Promise란\n비동기 처리의 방법(콜백함수, Promise)중 하나\n비동기 함수를 동기식으로 처리하기 위해 고안한 객체\n-> 비동기 작업이 완료된 이후에 다음 작업을 연결시켜 진행할 수 있는 기능 + 작업 결과에 따라 성공 또는 실패를 리턴하며 결과 값을 전달받을 수 있음\n  기본적으로 promise는 함수에 콜백을 전달하는 대신에, 콜백을 첨부하는 방식의 객체임\n## Promise 기본 문법\n  `const myPromise = new Promise((resolve, reject) => { ... })`\n  Promise는 성공 시엔 resolve, 실패 시엔 reject 호출해줌\n  `resolve` 호출 시 \n    파라미터로 특정 값 넣어주면 이 값을 작업이 끝나고 나서 사용  가능하고\n    → 작업 끝난 후 또 다른 작업 해야할 땐 Promise 뒤에 `.then(...)` 을 붙여서 사용\n  `reject` 호출 시 \n    `.catch` 를 통해 실패했을 때 수행 할 작업을 설정 가능\n  \n## Promise의 3가지 상태 및 처리 흐름\nPromise 객체가 비동기 함수의 처리 상태를 보고 완료되었는지 판단하여 성공 여부에 따라 다음 처리를 다르게 수행할 수 있게 해줌\npending(대기) : 처리가 완료되지 않은 상태\nfulfilled(이행) : 성공적으로 처리가 완료된 상태\nrejected(거부) : 처리가 실패로 끝난 상태\n\n## then 체인 (직접 Promise를 return) \nthen 메서드 내 return 키워드 사용 시 결과 값이 기본 자료형이 아닌 Promise 객체로 반환됨\n각각의 함수가 Promise 객체를 리턴하는 비동기 작업이라고 가정한다면 then 메서드를 연속적으로 사용해 순차적인 작업 가능\nthen을 통해 반환한 값은 또 다른 then을 통해서 수신 가능하기 때문에 체인 형식이 가능하게 됨\n체이닝 기법을 활용함으로써 콜백 함수를 너무 많이 중첩 시 발생 가능한 콜백 지옥에 빠지지 않게 함</code></pre></div>\n<p>goA()\n.then(function(){\nreturn goB();\n})\n.then(function(){\nreturn goC();\n})\n.then(function(){\nreturn goD();\n});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 콜백지옥 예시\n비동기 작업을 처리 할 때 콜백 함수로 처리 시 비동기 작업이 많아질 때 코드 깊이가 계속 깊어지는 Callback Hell (콜백지옥)현상이 발생하는데 이를 Promise 사용함으로서 방지 가능\n  - 파라미터로 숫자 n 받아와 다섯번에 걸쳐 1초마다 1씩 더해서 출력하는 작업을 setTimeout 으로 구현</code></pre></div>\n<p>  function increaseAndPrint(n, callback) {\nsetTimeout(() => {\nconst increased = n + 1;\nconsole.log(increased);\nif (callback) {\ncallback(increased);\n}\n}, 1000);\n}</p>\n<p>  increaseAndPrint(0, n => {\nincreaseAndPrint(n, n => {\nincreaseAndPrint(n, n => {\nincreaseAndPrint(n, n => {\nincreaseAndPrint(n, n => {\nconsole.log(‘끝!’);\n});\n});\n});\n});\n});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Promise 사용 시 문제점\nPromise 를 사용하면, 비동기 작업의 개수가 많아져도 코드의 깊이가 깊어지지 않지만\n에러를 잡을 때 몇번째에서 발생했는지 알아내기도 어렵고 특정 조건에 따라 분기를 나누는 작업도 어렵고, \n특정 값을 공유해가면서 작업을 처리하기도 까다로움 →  async/await 을 사용시 해결 가능\n\n# Async/Await\nPromise를 다루는 구문 (Promise 객체를 좀 더 쉽게 다룰 수 있게 고안된 문법)\n-> promise.then 사용보다 훨씬 간결하고 가독성 뛰어남\n비동기 함수를 동기 함수처럼 다룰 수 있어 매우 깔끔하고 유용하게 사용할 수 있는 방법\n\n## Await\n피연산자의 값을 반환해 줌 (피연산자가 Promise 객체면 then 메서드를 호출해 얻은 값을 반환)\nawait 키워드를 사용하더라도 그 작업이 처리되는 동안 다른 모든 프로세스가 중단되는 것은 아니며 엔진이 다른 일을 할 수 있으므로 자원이 효율적으로 운영됨\n- await 기본 예제\n앞에 async / await 키워드만 붙여주면 비동기 작업의 순차 처리가 동기적으로 처리로 가능</code></pre></div>\n<p>// 1초 후 hello 출력되는 코드\nfunction greet() {\nreturn new Promise(function(resolve){\nsetTimeout(function() {\nresolve(‘hello’);\n}, 1000);\n});\n}</p>\n<p>(async function() {\nvar result = await greet();//resolved 될 때까지 대기console.log(result);\n})();</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Async\nawait구문은 항상 async 함수 안에서만 사용가능\nfunction 앞에 async 키워드만 붙여주면 됨 → 항상 Promise 객체를 반환해줌\nasync 함수에서는 Promise가 아닌 값을 리턴하더라도 내부적으로 Promise로 감싸서 resolved promise가 반환됨\n\nasync 함수의 성질\n\n- 일반함수 처럼 사용가능\n- promise 객체로도 사용 가능 -> Promise.all에도 적용해 사용 가능함\n- 값 반환 가능 (반환값은 Promise 형태로 변환되므로 then 메소드를 통해서 반환되는 값을 얻어야 함)\n- 제일 외부에서는 then을 통해서 값에 접근해야함</code></pre></div>\n<p>const hiasync = async()=>{\nawait Promise 객체 혹은 값\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>const hi = async ()=>{\nreturn [1, 2, 3];\n}</p>\n<p>const asyncReturn = async ()=>{\nconst result = await hi()\nconsole.log(‘value0:’, result)\nreturn result;\n}</p>\n<p>asyncReturn().then(value =>\nconsole.log(‘value1: ’, value))</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">결과</code></pre></div>\n<p>value0: [ 1, 2, 3 ]\nvalue1:  [ 1, 2, 3 ]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  ## async/await 문법 → Promise 를 더욱 쉽게 사용 할 수 있게 해줌\n  \n  함수를 선언 할 때 함수 앞부분에 `async` 키워드를 붙이고 Promise의 앞부분에 `await` 을 넣어주면 \n  해당 프로미스가 끝날때까지 기다렸다가 다음 작업을 수행 가능\n  \n  `sleep` 함수의 파라미터에 넣어준 시간만큼 기다리는 Promise 를 만들고, 이를 `process` 함수 안에서 await 붙인 형태로 사용\n   &amp; `process` 함수 앞에 `async` 사용시 해당 함수는 결과값으로 Promise 를 반환하게 됨</code></pre></div>\n<p>  async function process() {\nconsole.log(‘A’);\nawait sleep(1000); // 1초쉬고\nconsole.log(‘B!’);\n}\nprocess().then(() => {\nconsole.log(‘C’);\n});</p>\n<p>  <code class=\"language-text\">async</code> 함수에서 에러를 발생 시 <code class=\"language-text\">throw</code>, 에러를 잡아낼 땐 try/catch 문을 사용</p>\n<p>  async function makeError() {\nawait sleep(1000);\nconst error = new Error();\nthrow error;\n}</p>\n<p>  async function process() {\ntry {\nawait makeError();\n} catch (e) {\nconsole.error(e);\n// 출력 값: Error\n}\n}</p>\n<p>  process();</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> </code></pre></div>\n<p>  function sleep(ms) {\nreturn new Promise(resolve => setTimeout(resolve, ms));\n}</p>\n<p>  const A = async () => {\nawait sleep(1000);\nreturn ‘가’;\n};</p>\n<p>  const B = async () => {\nawait sleep(500);\nreturn ‘나’;\n};\nconst C = async () => {\nawait sleep(3000);\nreturn ‘다’;\n};</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">동기적 처리시  (`A` -> `B` -> `C` 함수들을 순서대로 하나가 끝나야 다음작업이 실행되게 함)</code></pre></div>\n<p>  async function process() {\nconst a = await A();\nconsole.log(a);\nconst b = await B();\nconsole.log(b);\nconst c = await C();\nconsole.log(c);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">비동기적 처리 시 (동시에 작업을 시작하고 싶다면 Promise.all 을 사용해야 함)</code></pre></div>\n<p>  async function process() {\nconst results = await Promise.all([A(), B(), C()]);\nconsole.log(results);  // 출력값 : [“가”,“나”,“다”]\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> 배열 비구조화 할당 문법을 사용시 각 결과값을 따로 따로 추출해서 조회 가능\n Promise.all를 사용 시 등록한 프로미스 중 하나라도 실패하면, 모든게 실패 한 것으로 간주</code></pre></div>\n<p>  async function process() {\nconst [a, b, c] = await Promise.all([\nA(),\nB(),\nC()\n]);\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//Promise.race는 Promise.all과 달리, 여러개의 프로미스를 등록해서 실행했을 때 가장 빨리 끝난 Promise 하나만의 결과값을 가져옴\n가장 먼저 끝난 Promise가 실패시 이를 실패로 간주하기 때문에 B에서 에러를 발생시킨다면 에러를 잡아낼 수 있지만, C나 A에서 발생한 에러는 무시됨</code></pre></div>\n<p>  async function process() {\nconst first = await Promise.race([\nA(),\nB(),\nC()\n]);\nconsole.log(first);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>  process();</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n\nReference\n\n[자바스크립트 async / await 예제](https://sangminem.tistory.com/479)</code></pre></div>","excerpt":"Redux Middleware를 적용하기 전에 동기 & 비동기에 대해 짚고 넘어가고자 함 Javascript Synchronous(동기), Asynchronous(비동기), 콜백함수 Synchronous, Asynchronous 의미 동기: 하나의 요청이 오면 완료가 된 후 다음 요청을 실행하는 방식 (순차적으로 로직 수행됨) 비동기: 어떤 요청이 오면 완료 되기 까지 기다리지 않고 다음 요청을 실행하는 방식\n→ 여러 작업을 동시에 효율적으로 처리하기 때문에 즉시 응답을 못받아 흐름을 정확히 파악해 그에 맞게 적절히 처리 되어야 예상밖의 결과가 나오는 것을 막을 수 있음 (순차적인 흐름을 보장하지 않음, 완료되면 실행, 물리적으로 잠시 보류)  자바스크립트는 일반적인 코드 작성 시 synchronous(동기식)하게 코드 적은 순서대로 윗에서부터 한줄한줄 차례로 처리됨. ajax 요청, 이벤트 리스너, state 변경함수, setTimeout, 이런 함수들은 처리시간이 오래걸리기 때…","frontmatter":{"date":"November 04, 2021","title":"Shop Project_JavaScript_동기 비동기 콜백함수","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211104/"}},"next":{"id":"99aaa181-49cc-5b27-988a-b9293d2535e7","html":"<p><a href=\"https:nextjs.org/docs/authentication\">Nextjs 공식문서</a></p>\n<h1 id=\"리덕스-사용-이유\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0\" aria-label=\"리덕스 사용 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 사용 이유</h1>\n<ol>\n<li>상태 관리 용이 (state 관리 용이)\n데이터 수정방법을 reducer 한 곳에 죄다 미리 정의해 reducer(or dispatch)만 보면되니까 복잡하지 않음\n모든 상태 업데이트를 액션으로 정의하고, 액션 정보에 기반하여 리듀서에서 상태를 업데이트하기 때문에 상태를 더욱 쉽게 예측 가능하게 하여 유지보수 측면에서 좋음 (버그 원인 쉽게 파악 가능)\n서비스 규모가 커질수록 복잡해지는 데이터를 한 눈에, 한 곳에 관리할 수 있다는 장점이 있지만 코드 길어짐</li>\n<li>다른 라이브러리들과 다르게 미들웨어 존재\n특정 액션이 디스패치 됐을 때 상태 업데이트 외의 다른 작업들을 따로 처리 가능\n비동기 작업 흐름에 대한 세부적인 컨트롤을 필요로 할 때 유용\n보통 API 요청을 할 때 리덕스와 미들웨어 사용이 당연시 되었지만\n이젠 단순 API 요청을 위하여 미들웨어를 사용 할 필요 없이 SWR과 react-query와 같은 라이브러리를 사용함 </li>\n<li>API 요청 결과를 사용해 서버사이드 렌더링 용이\n리덕스 없이도 구현가능하지만 레퍼런스도 부족하고 번거로운 편임 -> Next js 예외\n다른 대안 Recoil(페북개발자가 만드는 중), Jotai 등의 라이브러리는 아직 서버사이드 렌더링 처리하기위한 준비가 되어있지 않음</li>\n<li>더 쉬운 테스팅 가능\n리듀서에서 다양한 상태 업데이트에 대한 로직을 테스트하기도 쉽고, 리덕스와 연동된 컴포넌트를 테스트 또는 미들웨어의 작동방식을 Mocking 할 수 있음</li>\n<li>글로벌 상태 관리\nprops 전송 없이도 모든 컴포넌트들이 state를 꺼내서 사용할 수 있게 함 (Context API랑 같은 역할)</li>\n<li>컴포넌트가 아닌 곳에서 글로벌 상태를 사용하거나 업데이트를 해야 할 때<br>\nWebSocket을 사용한다거나, 리액트 네이티브 브릿지에서 연동을 할 때 <code class=\"language-text\">getState</code> 또는 <code class=\"language-text\">dispatch</code>를 바로 호출해서 사용시 유용</li>\n<li>이미 유지보수를 하고 있는 프로젝트에서 리덕스를 사용중인 경우가 많음\n과거에는 선택지가 MobX가 유일했어서 리덕스를 많이 사용해왔지만 프로젝트에 리덕스가 필수적이라고 느껴지지 않는다고 해서, 아예 걷어내는건 또 큰 공수가 드니 계속 유지하면서 사용하는 케이스가 많음. 다만, 그러한 경우엔 새로운 기능 또는 리팩토링 하는 기능에 있어선 다른 방식을 시도해보는게 좋음 (react effector, react recoil 같은 라이브러리 등)</li>\n<li>\n<p>dispatch할 때 데이터 실어보낼 수 있응\nredux 환경에서 데이터 수정시</p>\n<ol>\n<li>클릭 액션 발생 시 새로운 값을 추가 하려면 </li>\n<li>reducer에 데이터 수정방법 미리 하나 만들고 버튼 누를 때 dispatch </li>\n<li>dispatch()함수 이용해 HTML안에서 reducer 동작시킴 (버튼을 눌렀을 때 ‘수량증가’라는 state 데이터 수정방법을 실행)</li>\n<li>\n<p>dispatch 할 때 특정 데이터({ type : ‘수량증가’, payload : ‘안녕’ })를 redux store까지 함께 실어보내면\nreducer 안에서 요청을 처리할 땐 <code class=\"language-text\">액션.payload</code> 작성 시 ‘안녕’ 데이터를 사용 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">버튼 누를 때마다 수량 <span class=\"token number\">1</span> 증가\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'수량증가'</span><span class=\"token punctuation\">,</span> 데이터 <span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> + </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token operator\">-</span>버튼 누르면 수량감소를 요청\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'수량감소'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> - </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h1 id=\"next-js-프로젝트에-redux-적용\" style=\"position:relative;\"><a href=\"#next-js-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-redux-%EC%A0%81%EC%9A%A9\" aria-label=\"next js 프로젝트에 redux 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next js 프로젝트에 Redux 적용</h1>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"1-리덕스-라이브러리-설치\" style=\"position:relative;\"><a href=\"#1-%EB%A6%AC%EB%8D%95%EC%8A%A4-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98\" aria-label=\"1 리덕스 라이브러리 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 리덕스 라이브러리 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">`npm i redux react-redux next-redux-wrapper` -> next 라이프사이클에 리덕스를 결합\n`npm i @reduxjs/toolkit` -> typescript 지원\n`npm i redux-logger --save-dev` </code></pre></div>\n<h2 id=\"2-리덕스-적용-위해-리덕스-모듈-생성\" style=\"position:relative;\"><a href=\"#2-%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%A0%81%EC%9A%A9-%EC%9C%84%ED%95%B4-%EB%A6%AC%EB%8D%95%EC%8A%A4-%EB%AA%A8%EB%93%88-%EC%83%9D%EC%84%B1\" aria-label=\"2 리덕스 적용 위해 리덕스 모듈 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 리덕스 적용 위해 리덕스 모듈 생성</h2>\n<p>리덕스를 사용하기 위해 필요한 리덕스 모듈의 각 항목들은 각 다른 파일에 저장\n루트 디렉터리에 store폴더 생성후 action과 reducer 둘로 나눔</p>\n<h2 id=\"액션-타입-생성\" style=\"position:relative;\"><a href=\"#%EC%95%A1%EC%85%98-%ED%83%80%EC%9E%85-%EC%83%9D%EC%84%B1\" aria-label=\"액션 타입 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>액션 타입 생성</h2>\n<ul>\n<li>액션 타입 만들어 user_action(액션 생성함수)으로 내보내는 역할 </li>\n<li>액션은 무슨일이 일어났는지 설명해주는 객체</li>\n<li>예를 들어 user라는 state를 수정해 주는 역할을 하는 액션은 타입을 SET_USER와 같이 선언하고, </li>\n<li>\n<p>user_action(액션 생성함수)에서 setUser(user)라는 이름의 함수를 만들어 주면 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>actions<span class=\"token operator\">/</span>types<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token constant\">USER</span> <span class=\"token constant\">ACTION</span> <span class=\"token constant\">TYPES</span> 정의 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 주로 대문자로 선언\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SET_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"set_user\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"액션-생성-함수-action-creator-→-사용-필수-x\" style=\"position:relative;\"><a href=\"#%EC%95%A1%EC%85%98-%EC%83%9D%EC%84%B1-%ED%95%A8%EC%88%98-action-creator-%E2%86%92-%EC%82%AC%EC%9A%A9-%ED%95%84%EC%88%98-x\" aria-label=\"액션 생성 함수 action creator → 사용 필수 x permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>액션 생성 함수 (Action Creator) → 사용 필수 x</h2>\n<p>단순히 파라미터를 받아와서 액션 객체 형태로 만들어 줌 (액션 반환)\n함수 앞에 export 붙여 다른 파일에서 불러와서 사용해 나중에 컴포넌트에서 쉽게 액션을 발생시키기 위함\n(액션 생성함수 생성 -> 액션 타입 불러옴 -> 리듀서 -> 루트 리듀서)\n주로 camelCase(단어가 합쳐진 부분마다 맨 처음 글자를 대문자)로 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n<span class=\"token constant\">SET_USER</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>export function setUser(user) {\nreturn {\ntype: SET_USER,\npayload: user\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## 리듀서 (Reducer)\n변화를 일으키는 함수. 리듀서에서는 불변성을 꼭 지켜야함\n리듀서는 액션 생성함수들을 통해 만들어진 객체. 즉, 두가지 파라미터( 현재 상태, 전달 받은 액션 ) 파라미터를 참조해 새로운 상태를 만들어서 반환하는 함수를 생성\n\n```javascript\nfunction reducer(state, action) {\n  // 상태 업데이트 로직\n  return alteredState;\n}</code></pre></div>\n<h2 id=\"데이터-수정\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%88%98%EC%A0%95\" aria-label=\"데이터 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 수정</h2>\n<p>redux에 있는 state데이터들을 reducer/dispatch로 수정</p>\n<ol>\n<li>reducer에 state 데이터의 수정방법을 미리 정의</li>\n<li>원하는 곳에서 dispatch() 함수로 reducer를 불러 수정 요청</li>\n<li>state 수정 시 컴포넌트는 dispatch() 이용해 state 수정 해달라고 reducer에 부탁</li>\n</ol>\n<h2 id=\"여러개의-reducer-필요시\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-reducer-%ED%95%84%EC%9A%94%EC%8B%9C\" aria-label=\"여러개의 reducer 필요시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러개의 reducer 필요시</h2>\n<ol>\n<li>reducer에는 state 초기값 + state 수정하는 법을 넣음 (useState와 비슷)</li>\n<li>store에 등록 -> reducer만들었으면 store에 등록해야 사용가능</li>\n<li>combineReducers() 함수 import <code class=\"language-text\">import {createStore, combineReducers} from 'redux';</code></li>\n<li>분리된 리듀서들을 합쳐주기 위한 combineReducers() 안에 모든 리듀서를 object 형식으로 담고</li>\n<li>createStore()안에 넣음 <code class=\"language-text\">store = createStore( combineReducers({reducer, reducer2}) )</code></li>\n</ol>\n<h2 id=\"스토어-store\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EC%96%B4-store\" aria-label=\"스토어 store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토어 (Store)</h2>\n<p>리덕스에서는 한 애플리케이션당 하나의 스토어 생성 가능하고 내부에는 현재 앱 상태, 리듀서, 몇가지 내장 함수들이 존재함</p>\n<h2 id=\"디스패치-dispatch\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98-dispatch\" aria-label=\"디스패치 dispatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디스패치 (dispatch)</h2>\n<p>스토어의 내장함수 중 하나 _액션 발생시켜 파라미터로 전달.\ndispatch(action) → 스토어는 리듀서 함수를 실행시켜서 해당 액션을 처리하는 로직이 있다면 액션을 파라미터로 받아 참고해 새로운 상태 만들어 줌</p>\n<h2 id=\"구독-subscribe\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EB%8F%85-subscribe\" aria-label=\"구독 subscribe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구독 (subscribe)</h2>\n<p>스토어의 내장함수 중 하나\n함수 형태의 값을 파라미터로 받아 액션이 디스패치 되었을 때 마다 전달해준 함수가 호출됨\n보통 이  함수를 직접 사용하지 않고 react-redux 라이브러리에서 제공하는 <code class=\"language-text\">connect</code> 함수or <code class=\"language-text\">useSelector</code> Hook을 사용</p>\n<h2 id=\"과정\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%95\" aria-label=\"과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[ 과정 ]</h2>\n<p>유저가 View를 조작함으로써 state 갱신 내용인 Action이 발생되어 Dispatcher에 전달 →\nDispatcher가 Store에게 Action을 전달하면서 Action내용에 따른 state 갱신을 명령한다.\nStore가 state를 갱신하고 갱신된 state를 View에게 전달해 새로운 state가 브라우저(View)에 렌더링(표시)</p>\n<p>이렇게 리덕스는 액션 생성 함수를 만들기 위해 redux-actions을, 불변성을 지켜야하는 원칙 때문에 immer를,\nStore를 효율적으로 핸들링하여 불필요한 리렌더링을 막기 위해 reselect를, Type 정의를 지원하기 위해서 typesafe-actions를,\n비동기를 수월하게 하기위해 redux-thunk를 설치하여 사용하게 되는데 Redux-Toolkit는 이를 하나로 대체 가능하게 함.</p>\n<h1 id=\"redux---toolkit을-사용해-간단하게-상태-관리\" style=\"position:relative;\"><a href=\"#redux---toolkit%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"redux   toolkit을 사용해 간단하게 상태 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux - Toolkit을 사용해 간단하게 상태 관리</h1>\n<p><a href=\"https://redux.js.org/tutorials/fundamentals/part-8-modern-redux\">Redux공식문서</a>\n설치 : <code class=\"language-text\">npm install @reduxjs/toolkit</code></p>\n<ul>\n<li>리덕스툴킷을 리덕스 공식팀에서 리덕스에서 많이 사용된 기능을 비교적 쉽게 사용할 수 있도록 만든 상태관리 도구</li>\n<li>Ducks 패턴을 사용해 한 파일 안에서 reducer와 Action을 관리하기 때문에 기능별 파악이 용이함</li>\n<li>redux-action, reselect, immer, redux-thunk, type definition, Redux Toolkit 기능들을 모두 지원하기 때문에 여러 라이브러리 사용할 필요 없음</li>\n<li>일반적으로 React(CSR)에 Redux 사용하는 건 하나의 Redux store만 존재하므로 어렵지 않지만 Next.js는 처음 렌더링시 SSR을 하게 되기 때문에 유저가 store를 호출할 때마다 Redux store을 새로 생성하하게 되므로 여러개가 될 수 있음</li>\n<li>이 때 생성하는  Redux store와 이후 CSR시 생성하는 Redux store가 다르기 때문에 이 둘을 합쳐주는 로직인 next-redux-wrapper가 필요</li>\n<li>이 라이브러리가 없다면 Next.js의 getServerSideProps, getStaticProps 내에서 Redux store에 접근을 할 수 없음</li>\n</ul>\n<h2 id=\"redux-wrapper\" style=\"position:relative;\"><a href=\"#redux-wrapper\" aria-label=\"redux wrapper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux Wrapper</h2>\n<p>next는 유저가 페이지를 요청할 때마다 스토어를 만들어야 하기 때문에 Store 함수를 wrapper에 넘긴다.\n_app.tsx에 wrapper.withRedux(App)으로 App컴포넌트를 감싸면 각 페이지의 getInitialProps, getServerSideProps, getStaticProps등에서 리덕스 스토어에 접근이 가능해짐\n이때 next의 스토어와 클라이언트의 스토어가 다르기 때문에 둘을 HYDRATE이라는 액션으로 합친다.</p>\n<h2 id=\"hydrate\" style=\"position:relative;\"><a href=\"#hydrate\" aria-label=\"hydrate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HYDRATE</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SSR을 위해 등장한 것, getServerSideProps에서도 Redux store에 접근이 가능하도록 하기 위한 처리임\nreducer에서 action.type으로 사용할 HYDRATE를 next-redux-wrapper로부터 import</code></pre></div>\n<p>우선 <code class=\"language-text\">HYDRATE</code> action을 적용한다. <code class=\"language-text\">HYDRATE</code>는  <code class=\"language-text\">next-redux-wrapper</code>에서 제공하는 액션이다. next.js에서 생성한 redux store와 client에서 생성한 redux store는 다르다. 이 둘을 합칠 때 사용하는 것이 <code class=\"language-text\">HYDRATE</code> 기능이다. <code class=\"language-text\">HYDRATE</code>는 서버에서 생성한 상태를 client store에 합쳐준다. </p>\n<h2 id=\"createslice\" style=\"position:relative;\"><a href=\"#createslice\" aria-label=\"createslice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createSlice</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">리듀서 함수의 객체, 슬라이스 이름, 초기 상태 값을 받아들이고 해당 액션 생성자와 액션 유형으로 슬라이스 리듀서를 자동으로 생성함</code></pre></div>\n<h2 id=\"payloadaction\" style=\"position:relative;\"><a href=\"#payloadaction\" aria-label=\"payloadaction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PayloadAction</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typescript와 함께 사용 시 액션의 payload 필드의 타입을 지정할 수 있게 해주는 제네릭</code></pre></div>\n<p>Reference</p>\n<p><a href=\"https://velog.io/@danmin20/Next.js%EC%97%90%EC%84%9C-redux-toolkit-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\">danmin님 블로그</a></p>","frontmatter":{"date":"November 03, 2021","title":"Shop Project_Redux","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211103/index./"}},"prev":{"id":"22fb78a6-deda-5a44-b244-1f0593f15a75","html":"<h1 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h1>\n<p><code class=\"language-text\">touch tsconfig.json</code>\n<code class=\"language-text\">npm install --save-dev typescript @types/react @types/node</code>\n<code class=\"language-text\">npm run dev</code>\n로그인 -> post\n회원가입 -> Post\n검증 -> Get\n로그아웃 -> Delete</p>\n<h1 id=\"회원가입-폼-생성\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%ED%8F%BC-%EC%83%9D%EC%84%B1\" aria-label=\"회원가입 폼 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 폼 생성</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript</code></pre></div>\n<h1 id=\"로그인-폼-생성\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%8F%BC-%EC%83%9D%EC%84%B1\" aria-label=\"로그인 폼 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 폼 생성</h1>\n<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>Reference</p>","frontmatter":{"date":"November 05, 2021","title":"Shop Project_Typescript 적용","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211105/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/TIL_20211104/","nextSlug":"/TIL_20211103/index./","prevSlug":"/TIL_20211105/"}},"staticQueryHashes":["1073350324","2938748437"]}