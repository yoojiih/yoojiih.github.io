{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React6/","result":{"data":{"cur":{"id":"3a04554a-4517-5113-bcf8-d18315143d10","html":"<h1 id=\"data-request-response-flow--axios\" style=\"position:relative;\"><a href=\"#data-request-response-flow--axios\" aria-label=\"data request response flow  axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Request, Response Flow &#x26; Axios</h1>\n<p><code class=\"language-text\">Database</code> &#x3C;=> <code class=\"language-text\">server</code> -response-> <code class=\"language-text\">client</code>\n&#x3C;-request-</p>\n<blockquote>\n<p>로그인 과정으로 예를 들자면</p>\n</blockquote>\n<blockquote>\n<p>유저가 클라이언트에서 이름과 비밀번호를 넣고 로그인 버튼 누르면 그 요청(request)이 서버로 이동하고 서버에서는 db에 유저 아이디가 있는지 찾고 있다면 보내준 비밀번호가 맞는지 체크함</p>\n</blockquote>\n<blockquote>\n<p>비밀번호 맞으면 response를 클라이언트 측에 성공했다는 걸 전해주고 비밀번호가 틀리거나 유저 자체가 없으면 없다는 정보들을 클라이언트에 보내줌</p>\n</blockquote>\n<h1 id=\"axios\" style=\"position:relative;\"><a href=\"#axios\" aria-label=\"axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Axios</h1>\n<p><a href=\"https://yoojiih.github.io/TIL_20211029/\">axios 참고</a>\n데이터 요청시 axios 라이브러리를 사용해서 보냄</p>\n<h2 id=\"axios-설치\" style=\"position:relative;\"><a href=\"#axios-%EC%84%A4%EC%B9%98\" aria-label=\"axios 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>axios 설치</h2>\n<p><code class=\"language-text\">npm i axios</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>client<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>views<span class=\"token operator\">/</span>LandingPage<span class=\"token operator\">/</span>LandingPage<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">LandingPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// LandingPage에 들어오자마자 실행되는 부분</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//get request를 서버(server/index.js)로 보냄. end point는 /api/hello</span>\n        axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/hello'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 서버에서 돌아오는 response를 콘솔창에 출력</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>시작 페이지<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LandingPage</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>server<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// request를 받는 router 생성 </span>\n<span class=\"token comment\">// 클라이언트측에서 get으로 줬으니 get메소드 사용, end point는 /api/hello, (req, res) callback을 주고 </span>\n<span class=\"token comment\">// 원래 라우터 같은 경우 request받은 걸로 처리 후 front로 다시 response줌 (지금은 프론트에 response(메시지)만 줌)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!~~ '</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"cors이슈-proxy-설정\" style=\"position:relative;\"><a href=\"#cors%EC%9D%B4%EC%8A%88-proxy-%EC%84%A4%EC%A0%95\" aria-label=\"cors이슈 proxy 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS이슈, Proxy 설정</h1>\n<p>Cross-Origin Resource Sharing(CORS): origin이 다른데 resource를 Sharing할 때 적용되는 정책\nweb document와 서버가 교환 시 same origin이면 항상 허용되지만 다르면 정책에 의해 컨트롤 당함</p>\n<p>Server 포트번호 5000번 -> localhost:5000 (Response) - origin</p>\n<p>Client 포트번호 3000번 -> localhost:3000 (Request) - origin</p>\n<p>axios.get(‘/api/hello’) 이렇게 요청 보내면 3000번으로 가기 때문에 5000번인 서버는 받지 못하는 상황 벌어짐\n이렇게 두개의 다른 포트를 가지고 있는 서버는 Cors 보안 정책 때문에 아무 설정없이 서버에 request를 보낼 수 없음</p>\n<h2 id=\"해결방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\" aria-label=\"해결방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법</h2>\n<ul>\n<li>방법 1: 개발자 도구 사용(Chrome Cors Extension)</li>\n</ul>\n<p>개발자들만 사용하는 방법이기 때문에 제한적임</p>\n<p>프론트엔드 부분만 컨트롤 가능한 상황 -> json 방식을 이용해 모든 request를 get request로 보냄으로써 해결이 가능. but 제한적임\nbackend 와 frontend 모두 컨트롤 할 수있는 상황 ->  서버에다가 클라이언트에서 오는 건 받을 수 있게 해주고 클라이언트 측에서도 보낼 때 ~한 것들은 허용해달라고 request를 보낼 때 같이 전달해서 보내면 해결됨</p>\n<ul>\n<li>방법 2: Proxy 사용\n<a href=\"https://create-react-app.dev/docs/proxying-api-requests-in-development/\">Configuring the Proxy Manually</a>\nProxy를 임의로 설정하기 위해 client 부분에 모듈 다운로드</li>\n</ul>\n<p><code class=\"language-text\">npm install http-proxy-middleware --save</code></p>\n<p>그 다음 src/setupProxy.js 파일 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createProxyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http-proxy-middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createProxyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// server/index.js에서 정의한 port번호가 5000번이니까 target을 5000번으로 설정</span>\n      <span class=\"token comment\">// front end 3000번 -> back end 5000번으로 주겠다고 설정해 놓음</span>\n      target<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span>\n      changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"proxy-server\" style=\"position:relative;\"><a href=\"#proxy-server\" aria-label=\"proxy server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proxy Server</h1>\n<p>보안상의 이유 등으로 직접 통신할 수 없는 두 점 사이에서 대리로 통신(request, response)을 수행하는 기능을 프록시, 그 중계 기능을 하는 컴퓨터 시스템이나 응용프로그램을 프록시 서버라 함</p>\n<h2 id=\"프록시-서버의-주요-특징\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%A3%BC%EC%9A%94-%ED%8A%B9%EC%A7%95\" aria-label=\"프록시 서버의 주요 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 서버의 주요 특징</h2>\n<ol>\n<li>프록시 서버는 클라이언트가 자신을 통해서 다른 네트워크 서비스에 간접적으로 접속할 수 있게 해줌 (pc와 외부 인터넷 사이의 징검다리 역할) </li>\n</ol>\n<p>  시스템에 방화벽을 가지고 있는 경우 외부와의 통신을 위해 만들어 놓은 서버 -> 외부 인터넷의 내부 침입을 막는 방화벽 기능</p>\n<ol start=\"2\">\n<li>프록시 서버는 프록시 서버에 요청된 웹 페이지 내용들을 캐시를 이용해 저장 (캐시 데이터, 공유 데이터 제공 기능)</li>\n</ol>\n<p>  Proxy 서버는 사용자의 요청을 Cahche해서 동일 요청이 들어오면 Cache 자원을 반환하기 때문에 리소스로의 접근을 빠르게 할 수 있음</p>\n<p>  예를들어 특정 사이트에 접속시 static한 이미지등을 proxy서버에 저장 시켜놔서 보고 싶을 때 빠르게 proxy서버에 담겨있는 해당 이미지를 볼 수 있음. </p>\n<p>  이렇게 하면 전송시간도 절약하고 불필요하게 외부와의 연결을 하지 않아도 되며 외부와의 트래픽을 줄이게 됨으로써 네트워크 병목현상을 방지 가능</p>\n<blockquote>\n<p>캐시는 컴퓨터의 기억장치에 관련된 기술로, 속도가 느린 기억장치와 속도가 빠른 기억장치가 존재할 경우, 빠른 기억장치에 느린 기억장치의 내용 중 최근에 사용한 일부를 넣어두는 것을 말한다. 이 경우 같은 내용을 여러 번 참조할 때, 두 번째부터는 빠른 속도로 읽을 수 있다.</p>\n</blockquote>\n<ul>\n<li>\n<p>IP 조작\n임의로 보낸 유저 ip 조작할 수 있어 실제 ip를 모르게해 더 나은 보안을 제공함</p>\n<p>추가적으로 ip뿐만 아니라 데이터도 중간에서 조작 가능</p>\n</li>\n<li>A Client(Proxy Server 설치)가 B Proxy에 접근하여 C인터넷(google.com)에 접속하는 방식</li>\n<li>\n<p>네트워크 서비스나 콘텐츠로의 접근 정책을 적용 가능</p>\n<p>ACL(access control list ACL): 사이트 접근에 대한 접근 정책을 정의</p>\n<p>회사에서 직원들이나 집안에서 아이들 특정 사이트 접근제어</p>\n</li>\n<li>\n<p>사용률 기록 &#x26; 검사</p>\n<p>log/Audit: 회사 내 직원의 인터넷 사용을 레포팅할 수 있다. 반대로 인트라넷의 사용을 레포팅할 수 도 있다.</p>\n</li>\n<li>보안 및 통제를 뚫고 나가기 위해 사용할 수 있으며 역으로 IP 추적을 당하지 않을 목적으로 사용. 역기능이긴 하지만 우회를 할 수 있도록 함</li>\n<li>\n<p>밖으로 나가는 콘텐츠 검사</p>\n<p>중계 서버인 프록시 서버를 거치기 때문에 콘텐츠를 검사할 수 있다. </p>\n<p>보안 상의 이유로 80 포트 외에 포트를 막아놓는 지역 제한을 우회해 다른 서비스 이용 가능</p>\n</li>\n<li>익명의 사용자가 서버에 접근하는 것을 막아 보안 유지</li>\n</ul>\n<h1 id=\"concurrently를-이용해-front-back-서버-한번에-켜기\" style=\"position:relative;\"><a href=\"#concurrently%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-front-back-%EC%84%9C%EB%B2%84-%ED%95%9C%EB%B2%88%EC%97%90-%EC%BC%9C%EA%B8%B0\" aria-label=\"concurrently를 이용해 front back 서버 한번에 켜기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concurrently를 이용해 front, back 서버 한번에 켜기</h1>\n<p>여러개의 commands를 동시에 작동 시킬 수 있게해주는 tool\n라이브러리 설치\n<code class=\"language-text\">npm i concurrently --save</code>\n사용법\npackage.json파일에 스크립트 내 켜고 싶은 것들 차례로 나열함\nconcurrently “command1 arg” “commmand2 arg”\nclient 폴더 내 start로 실행 하기 위해 prefix 사용\n<code class=\"language-text\">\"dev\": \"concurrently \\\"npm run backend\\\" \\\"npm run start --prefix client\\\"\"</code></p>\n<p>Reference\n<a href=\"https://velog.io/@jangwonyoon/Proxy-Server%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%9E%80\">jang님 블로그</a></p>","excerpt":"Data Request, Response Flow & Axios  <=>  -response-> \n                        <-request- 로그인 과정으로 예를 들자면 유저가 클라이언트에서 이름과 비밀번호를 넣고 로그인 버튼 누르면 그 요청(request)이 서버로 이동하고 서버에서는 db에 유저 아이디가 있는지 찾고 있다면 보내준 비밀번호가 맞는지 체크함 비밀번호 맞으면 response를 클라이언트 측에 성공했다는 걸 전해주고 비밀번호가 틀리거나 유저 자체가 없으면 없다는 정보들을 클라이언트에 보내줌 Axios axios 참고\n데이터 요청시 axios 라이브러리를 사용해서 보냄 axios 설치  CORS이슈, Proxy 설정 Cross-Origin Resource Sharing(CORS): origin이 다른데 resource를 Sharing할 때 적용되는 정책\nweb document와 서버가 교환 시 same origin이면 항상 허용되지만 다르면 정책에 …","frontmatter":{"date":"December 06, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React6/"}},"next":{"id":"be6a6ee8-7812-5786-b74c-23873709c50d","html":"<h1 id=\"react-js\" style=\"position:relative;\"><a href=\"#react-js\" aria-label=\"react js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React js</h1>\n<ul>\n<li>페이스북에서 제공하는 자바스크립트 라이브러리 오픈소스</li>\n<li>자바스크립트로 AJAX, HTML 조작 → 코드 多 / React, Angular, Vue 라이브러리 사용 → 간결한 코드</li>\n<li>Component 기반 구조\nComponent는 독립적인 단위의 소프트웨어 모듈을 말하며 컴포넌트로 이루어져 있어 재사용 성이 뛰어남 (컴포넌트 조립해서 사용)\nReact는 UI(View)를 여러 컴포넌트(component)를 쪼개서 만들기 때문에 전체 코드를 파악하기가 쉬우며 한페이지 내에서도 기능 단위로 캡슐화시켜 코드를 관리하기 때문에 재사용성이 높음\n컴포넌트만 import해 사용하면 되니까 코드 반복 입력할 필요없이 간편하며, 애플리케이션이 복잡해지더라도 코드의 유지보수, 관리가 용이함</li>\n<li>Virtural DOM\n예전에 RealDOM을 쓸 땐 하나만 업데이트 해도 전체를 다 reload했는데 이제는 virtural DOM 형태인 React를 사용해 Virtual DOM을 이용해서 처음에 스냅샷을 찍어 놓고 관찰해 바뀐 부분만을 찾아내서 RealDOM에서 이 부분만을 바꿔주기 때문에 훨씬 더 빠르게 한 부분만을 바꿀 수 있게 해줌</li>\n<li>UX가 뛰어나 좋은 사용자경험 제공</li>\n<li>HTML 관리 편함</li>\n<li>SPA(싱글 페이지 어플리케이션)나 iOS/Android 모바일 앱 제작 가능</li>\n<li>다른 페이지로 넘어가도 새로고침없이 스무스하게 동작하는게 모바일 앱이랑 비슷해 앱이라 부름</li>\n<li>React는 데이터 흐름이 한 방향으로만 흐르는 단방향 데이터 흐름을 가짐\n양방향 데이터 바인딩은 규모가 커질수록 데이터의 흐름을 추적하기가 힘들고 복잡해지는 경향이 있어, 단방향으로 복잡한 앱에서도 데이터 흐름에서 일어나는 변화를 보다 예측 가능할 수 있도록 함</li>\n<li>Props and State\nProps: 부모 컴포넌트에서 자식 컴포넌트로 전달해 주는 변경 불가능한 데이터 (props 전달해준 최상위 부모 컴포넌트만 props 변경 가능)\nState: 컴포넌트 내부에서 선언하며 내부에서 값을 변경 가능. 동적인 데이터를 다룰 때 사용 (사용자와의 상호작용을 통한 변경 시)</li>\n</ul>\n<h2 id=\"bable-webpack\" style=\"position:relative;\"><a href=\"#bable-webpack\" aria-label=\"bable webpack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bable, webpack</h2>\n<ul>\n<li>babel\n최신 버전의 ECMAScript(unsupported or cutting-edge)를 ES5로 변환해주는 역할을 하는 transpiler\n(ES5는 최신 자바스크립트 문법을 지원하지 않는 범용적인(구형) 브라우저에서 지원을 하기 때문)</li>\n<li>\n<p>webpack\ndependency 분석기이자 module bundler</p>\n<p>이전에 js,css,html 파일 몇개로만 웹사이트를 만들었을 때와 달리 규모가 점점 커지면서 많은 라이브러리, 프레임워크등을 쓰다보니 등장하게 된 것. 많은 모듈들을 하나의 웹팩을 이용해 bundle 해줌 (묶어줌)\n예를들어 module A가 B를 dependency로 요청을하고, module B가 C를 dependency로 요청을 한다면 webpack은 C-B-A 와 같이 dependency map을 생성한다.\n실제로는 매우 복잡하지만, 기본적인 컨셉은 webpack이 모듈들을 복잡한 dependency 관계들과 함께 번들들로 통합해줌\nwebpack은 src폴더 내에만 관리해주고 public은 관리를 안해주기 때문에 이미지 파일 같은 것들을 앱에다 넣고 싶으면 src 안에다가 넣어야만 bundle 작용 가능</p>\n</li>\n<li>webpack과 babel의 관계\n웹팩이 종속성을 처리할 때, 웹팩은 자바스크립트 위에서 작동하기 때문에 모든 것을 자바스크립트로 변환해야 한다. 그 결과, 다른 로더를 사용하여 다른 유형의 리소스/코드를 javascript로 변환한다. ES6 또는 ES7에 대한 변환이 필요할 때에는 babel-loader를 사용해서 webpack과 babel을 연결시켜 사용한다.</li>\n</ul>\n<h2 id=\"cra\" style=\"position:relative;\"><a href=\"#cra\" aria-label=\"cra permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRA</h2>\n<p>원래 리액트 앱을 처음 실행 시 webpack이나 babel 같은 것을 설정하기 위해서 엄청나게 많은 시간이 걸렸는데 이젠 CRA(create react app) Command로 바로 시작 가능\n<code class=\"language-text\">npx create-react-app .</code>\n<code class=\"language-text\">npx create-react-app 프로젝트명 --template cra-template-pwa</code>\n이렇게 뜨면 설치 완료된 것</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">We suggest that you begin by typing:\n  <span class=\"token builtin class-name\">cd</span> reactshop\n  <span class=\"token function\">npm</span> start\nHappy hacking<span class=\"token operator\">!</span></code></pre></div>\n<h1 id=\"npm-vs-npx\" style=\"position:relative;\"><a href=\"#npm-vs-npx\" aria-label=\"npm vs npx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm VS npx</h1>\n<p>요즘 대부분의 라이브러리에서 npx의 설치 방식을 공식문서에 소개하는 만큼 굉장히 자주 사용하는 도구이기에 해당 명령어가 어떤 의미를 가지고 있는지를 파악한 후 사용하는 것이 중요</p>\n<h2 id=\"npx란\" style=\"position:relative;\"><a href=\"#npx%EB%9E%80\" aria-label=\"npx란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npx란?</h2>\n<p>npx = Package Runner (실행)</p>\n<ul>\n<li>npx는 npm과 비교대상이 아닌 npm에서 제공하는 npm 레지스트리에 올라가있는 패키지를 쉽게 설치하고 관리할 수 있도록 도와주는 CLI 도구</li>\n<li>npm을 통해 설치하는 모든 종류의 Node.js 기반의 파일들을 굉장히 간단하게 설치하고 실행할 수 있게 도와줌</li>\n<li>npx는 해당 패키지를 실행만 되게 해주기 때문에 가벼움</li>\n</ul>\n<p>npm = Package Manager (관리) </p>\n<ul>\n<li>자바스크립트 패키지 관리 모듈 (Node Package Module)</li>\n<li>라이브러리 레지스트리(저장소)역할과 파일 build 시켜주는 역할을 함, npm에 관한 것은 package.json에 다 정의 되어있음</li>\n</ul>\n<p><code class=\"language-text\">npm install -g npx</code></p>\n<h2 id=\"등장한-이유\" style=\"position:relative;\"><a href=\"#%EB%93%B1%EC%9E%A5%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"등장한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>등장한 이유</h2>\n<p>과거 npm으로 패키지를 설치할 땐 전역으로 패키지를 설치해 의존성 라이브러리들을 전체적으로 관리하는 방법과 특정 프로젝트에만 의존성 라이브러리를 설치하는 방법이 존재했음</p>\n<p>이렇게 되면 패키지 업데이트 될 때 전역 따로 로컬 따로 업데이트 해야하기에 번거롭고 모듈 업데이트가 확인 불가하며 모듈 업데이트 변경으로 인한 다른 모듈 에러발생 등의 문제가 발생하는데 이를 해결하는 도구가 npx인 것</p>\n<p>npx는 기존에 npm 설치 방법과는 다르게 일일이 설치, 실행, 제거를 할 필요 없이 일회성으로 원하는 패키지를 npm 레지스트리에 접근해서 실행시키고 설치하는 실행도구라\n패키지 설치 및 업데이트를 하지 않더라도 npm 레지스트리에 올라가 있는 최신 버전을 실행시키고 설치만 시키면 끝 </p>\n<p>예를들어 원래는 create-react-app할 때 npm install -g create-react-app 이런식으로 global디렉토리에 다운받았었는데</p>\n<p>이제는 npx가 npm registry에서 create-react-app을 찾아서(look up) 굳이 다운로드 받지 않다도 실행 시켜줌</p>\n<h2 id=\"npx-이점\" style=\"position:relative;\"><a href=\"#npx-%EC%9D%B4%EC%A0%90\" aria-label=\"npx 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npx 이점</h2>\n<ol>\n<li>global로 컴퓨터에 다운받지 않아도 되니까 disk space를 낭비하지 않을 수 있음</li>\n<li>npm registry에 있는 create-react-app을 찾아서(look up)실행 시켜주는 거니까 항상 최신버전 사용 가능</li>\n</ol>\n<h2 id=\"사용\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9\" aria-label=\"사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용</h2>\n<ul>\n<li>npm run-script를 사용하지 않고 로컬에 설치된 패키지를 사용할 경우 npx A만 입력하면 로컬 devDependencies에 설치된 A 패키지를 바로 실행가능\n{\n“devDependencies”: {\n“A”: “^1.4.0”\n}\n}</li>\n<li>로컬에 존재하지 않는 패키지를 일회성 명령으로 원하는 패키지를 npm 레지스트리에 접근해 실행, 설치\nnpx는 우선적으로 로컬에 패키지가 설치되어있는지 파악한 후 패키지가 존재하지 않는다면, npm 레지스트리에서 해당 이름의 패키지가 자동으로 설치되고 호출됨\n그래서 패키지를 업데이트 하지 않아도 npm 레지스트리에 올라가 있는 최신 버전을 수행함</li>\n<li>gist-based scripts를 실행할 경우\n<code class=\"language-text\">npx gist 주소</code>\nGithub의 gist에 올라가 있는 스크립트를 npx를 사용해서 쉽게 실행 간으</li>\n<li>특정 노드 버전의 스크립트를 실행할 경우\nnode 패키지는 nvm, nave 또는 n과 같은 노드 버전 관리 도구를 사용하지 않고도 서로 다른 노드 버전을 사용하여 노드 명령을 매우 쉽게 쓸 수 있는 툴</li>\n</ul>\n<h2 id=\"pwa-progressive-web-apps\" style=\"position:relative;\"><a href=\"#pwa-progressive-web-apps\" aria-label=\"pwa progressive web apps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PWA (Progressive Web Apps)</h2>\n<p><code class=\"language-text\">npx create-react-app reactshop --template cra-template-pwa</code></p>\n<h3 id=\"pwa란\" style=\"position:relative;\"><a href=\"#pwa%EB%9E%80\" aria-label=\"pwa란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PWA란</h3>\n<p>네이티브 앱을 개발하고 유지보수하는 것은 상당히 길고 복잡한 과정이며, 상당한 비용이 소요되는 경우도 많기 때문에</p>\n<p>굳이 앱을 개발하지 않고 웹만으로 웹에서 사용하는 기술과 네이티브 앱의 장점을 결합한 것 => 실제 네이티브 앱과 견줄 수 있을 정도로 좋음</p>\n<p>PWA를 통해서 사용자는 모바일 앱과 같은 사용자 경험(UX)을 누릴 수 있으며 실제 네이티브 앱이 제공하는 모바일 푸시 (알림), 오프라인이나 저속의 네트웍 속도에서의 사용을 지원함 </p>\n<p>게다가 HTML, JAVASCRIPT, CSS같은 웹 기술만으로도 구현이 가능함 </p>\n<p>인터넷 웹사이트의 파일들(html, javascript, css등)을 컴퓨터에 저장(캐싱)해 놨다가 다시 요청이 올 때 저장(캐싱)된 파일들을 먼저 보여주고 </p>\n<p>필요할 떄 웹서버에 있는 데이터를 받아서 보여주는 기술과 홈화면에 바로가기 아이콘을 설치 할 수 있게 하는 기술, 서버의 소식을 클라이언트에 전하는 Push기술.</p>\n<p>스마트폰으로 이 사이트에 접속 시 홈 화면에 설치 가능하며 이후 저장된 사이트를 열어보면 모양도 네이티브 앱처럼 보이고 기능도 모두 같고 브라우저 창도 없음\nPWA로 웹 애플리케이션을 만들 때의 가장 큰 장점은 운영체제에 관계없이 실행 가능하다는 것 (안드로이드 폰 , 아이폰)</p>\n<p>PWA인 대표적인 웹사이트들\n트위터닷컴(twitter.com), 스타벅스(Starbucks.com), 핀터레스트(Pinterest.com), 워싱턴포스트(Washingtonpost.com), 우버(Uber.com) 등</p>\n<h2 id=\"네이티브-앱-vs-pwa\" style=\"position:relative;\"><a href=\"#%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EC%95%B1-vs-pwa\" aria-label=\"네이티브 앱 vs pwa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>네이티브 앱 VS PWA</h2>\n<p>일반적으로 애플의 앱스토어나 구글의 플레이스토어에서 다운로드할 수 있는 네이티브 앱은 해당 플랫폼에 특화된 프로그래밍 언어(iOS: Swift, 안드로이드앱: Java)로 만드는 경우가 많아 </p>\n<p>다양한 환경에 필요한 관련된 기술을 알아야만 앱스토어에 출시가 가능하지만 PWA 방식을 이용하면 두 개의 환경에서 모두 실행되는 앱으르 개발이 가능함</p>\n<p>PWA는 일단 홈 화면에 저장되면 브라우저에서 실행되며, 네이티브 앱처럼 동작함\n그리고 보안상의 이유로 브라우저가 접근하지 못하는 시스템 하드웨어와 소프트웨어에도 접근 가능하기에 PWA의 성능이 뛰어나다면, 사용자들은 자신들이 웹 기반의 앱을 사용하고 있는 것인지, 아니면 네이티브 앱을 사용하고 있는 것인지를 구분하지 못함</p>\n<p>하지만 여러 브라우저들이 PWA를 위한 기술들을 빠르게 채택하고 있기는 하지만, iOS의 경우 사파리(Safari) 브라우저가 지원하지 않는 경우가 많아 다른 플랫폼에서와 동일한 환경을 구성하는 것이 번거로움\n게다가 네이티브 앱이 훨씬 더 깊숙이까지 운영체제 속으로 접근 가능하기에 고성능 게임과 같은 서비스를 개발 하는데에는 한계가 존재해 아직은 많은 부분에서 네이티브 앱이 우위를 보이고 있음</p>\n<p>그렇기 때문에 반드시 PWA로 해야하는 명확한 이유가 존재해야함\nPWA로 모바일 서비스를 하는 것도 좋지만 사용하고자 하는 사람이 없다면 개발할 이유가 없기 때문이다.\n누구를 위한것인지 고객이 사용하긴 하는지 훨씬 더 쉬운방법이 존재하는지 사용자경험에 도움이 되는 것인지 어디에 있는 사람들인지 데이터 통신이 원활한 지역에 살면서 하드웨어에 가기도 좋은 걸 사용하는지 자문해봐야한다</p>\n<h2 id=\"pwa-장점\" style=\"position:relative;\"><a href=\"#pwa-%EC%9E%A5%EC%A0%90\" aria-label=\"pwa 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PWA 장점</h2>\n<p>일단 많은 사람들이 앱을 개발하고자 하는 이유는 앱을 통해서 참여율을 더욱 끌어올릴 수 있기 때문</p>\n<p>앱을 설치하는 사용자들은 이미 관심이 있는 것이기 때문에 푸시 알림을 이용하면, 사용자들의 관심을 더욱 쉽게 이끌어낼 수 있어 브랜드에 도움이 되는 뛰어난 경험을 제공 가능함</p>\n<ul>\n<li>다양한 앱스토어에 출시하기 위해서 별도의 프로세스를 거치지 않아도 된다.</li>\n<li>일반적인 웹 기술을 활용해서 PWA를 만들 수 있다.</li>\n<li>일반적으로 개발 비용이 더 저렴하다.</li>\n<li>기존의 웹사이트를 앱으로 만들 수 있기 때문에, 추가로 유지관리해야 하는 코드베이스(codebase, 소스코드 일체)가 적다.</li>\n<li>PWA는 기본적으로 반응형(responsive)이기 때문에, 다양한 화면 크기에도 잘 동작한다.</li>\n<li>PWA는 부드럽고 빠르며 가볍다.</li>\n<li>구글이나 애플에게 거액의 돈을 줄 필요가 없다.</li>\n<li>일반적인 웹사이트와는 달리, 오프라인에서도 작동한다.</li>\n<li>PWA는 검색엔진을 통해서 찾을 수 있다. (앱스토어보다는 검색엔진을 사용하는 사람들이 훨씬 더 많다. </li>\n<li>그리고 원한다면 앱스토어를 통해서도 PWA를 배포할 수 있다.)</li>\n<li>푸시 알림을 통해서 사용자들의 관심을 끌 수 있다.</li>\n<li>PWA를 설치하게 함으로써 보다 높은 참여를 이끌어낼 수 있다.</li>\n</ul>\n<p>PWA에서 검색엔진 최적화(SEO)와 관련해서 고려해야 하는 요소들\nPWA는 기본적으로 웹(web)이 중심입니다. 웹에서 태어났고, 검색엔진으로 쉽게 찾을 수 있도록 개발되었습니다.\n물론, 오래된 웹사이트로도 얼마든지 PWA를 만들 수 있고, 이렇게 하면 시간도 많이 걸리지 않습니다.\n그러나 PWA는 자바스크립트를 활용해서 더욱 복잡한 기능을 구현하는 경우가 많습니다.\n그리고 요즘에는 검색엔진들도 자바스크립트의 렌더링(rendering, 코드를 화면에 표시하기 위해 변환하는 것)을 더욱 잘할 수 있기는 하지만, 여전히 우려해야 하는 부분들은 남아 있습니다.</p>\n<p>우선 PWA를 위한 환경을 설정할 때는, 검색엔진이 자바스크립트에 액세스 할 수 있도록 해야 합니다. 검색엔진의 봇(bot)이 파일에 접근하는 것을 막아 놓으면 안 되며, 링크도 유효한 것인지를 확인해야 합니다. 렌더링 프로세스를 개선하려면, 여러분의 자바스크립트 프레임워크가 서버 측 렌더링(웹페이지의 내용을 서버에서 렌더링 해서 전송해주는 방식)을 사용하도록 설정하는 것이 좋습니다.</p>\n<p>기존의 웹사이트를 PWA로 바꾼다고 해서 그것이 곧바로 SEO의 개선을 의미하는 것은 아닙니다. 기존의 사이트를 PWA로 전환하는 게 타당하다면 그렇게 해야 합니다. 하지만 단지 SEO를 개선하기 위한 목적으로 바꾸는 것은 좋지 않습니다. 훌륭한 PWA를 갖게 되면 사람들에게 환상적인 사용자 경험을 제공할 수 있으며, 여러분의 경쟁력을 한층 더 높일 수 있습니다. 그런 측면에서, 여러분이 만든 PWA의 모바일 SEO 전략은 어떠한지를 살펴보는 것이 좋습니다.</p>\n<p>기존의 웹사이트를 PWA로 바꾸기 전 해야할 작업 세 가지의 주요 구성요\nPWA를 설정하는 데는 많은 작업이 필요하지 않습니다. 기존의 웹사이트를 그럴듯한 PWA로 바꾸기 전에 해야 할 작업은 크게 3가지가 있습니다.\nPWA를 실행하기 위해 필요한 3가지</p>\n<ul>\n<li>보안 연결(HTTPS): PWA는 신뢰할 수 있는 연결 상태에서만 동작하기 때문에, 보안 연결을 통해서 서비스를 제공해야 합니다. 이건 단지 보안상의 이유 때문만은 아니고, 사용자들의 신뢰를 얻기 위해서도 아주 중요한 부분입니다.</li>\n<li>서비스 작업자(service worker): 서비스 작업자는 백그라운드에서 실행되는 스크립트입니다. 서비스 작업자는 네트워크와 관련된 요청의 처리를 도와주기 때문에, 여러분은 그 점에 대해서는 걱정하지 않고 더욱 복잡한 작업을 수행할 수 있습니다.</li>\n<li>매니페스트 파일(manifest file, 설정 파일): 이것은 제이슨(JSON, 용량이 적은 데이터를 교환하기 위한 형식) 파일이며, PWA가 표시되고 기능하는 방식에 대한 정보들이 포함되어 있는 것입니다. 여기에서는 PWA의 이름, 설명, 아이콘, 색상 등을 지정할 수 있습니다.</li>\n</ul>\n<p>PWA로 사용자들의 참여를 이끌어내기\nPWA는 여러분의 모바일 서비스에서 아주 뛰어난 역할을 담당할 수 있습니다. 제대로 만들면 아주 빠르고, 오프라인에서도 동작하며, 네이티브 앱과 같은 기능을 발휘할 수 있습니다. 전반적으로, PWA는 사람들에게 아주 멋진 사용자 경험을 제공할 수 있습니다.</p>\n<h2 id=\"pwa특징\" style=\"position:relative;\"><a href=\"#pwa%ED%8A%B9%EC%A7%95\" aria-label=\"pwa특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PWA특징</h2>\n<p>App처럼 홈스크린에 아이콘을 설치하여 APP처럼 쉽게 바로가기를 실현 가능함</p>\n<h2 id=\"push-메시지-기능\" style=\"position:relative;\"><a href=\"#push-%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B8%B0%EB%8A%A5\" aria-label=\"push 메시지 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Push 메시지 기능</h2>\n<p>App의 중요 특징 중 하나인 Push가 가능하다는 것입니다. 원래 웹은 클라이언트에서 서버로 요청이 있어야만 결과물을 보내주는 형태로 구현이 되는데 Push는 반대로 클라이언트의 요청이 없더라도 서버의 필요에 의해서 클라이언트에게 데이터를 보낼 수 있는 기능입니다. 보통 쪽지나 Notice형태로 제공됩니다.</p>\n<h3 id=\"offline-접속-기능\" style=\"position:relative;\"><a href=\"#offline-%EC%A0%91%EC%86%8D-%EA%B8%B0%EB%8A%A5\" aria-label=\"offline 접속 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Offline 접속 기능</h3>\n<p>PWA가 캐싱이 되기 때문에 Offline이거나 속도가 느린 상태에서도 미리 다운로드 되어 있는 정보를 계속 볼 수 있습니다.</p>\n<h3 id=\"보안\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88\" aria-label=\"보안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안</h3>\n<p>PWA는 HTTPS에서만 사용이 가능하기 때문에 일반 인터넷 데이터에 비해 보안이 강화된 상태라고 할 수 있습니다.</p>\n<h3 id=\"pwa-제작-기술\" style=\"position:relative;\"><a href=\"#pwa-%EC%A0%9C%EC%9E%91-%EA%B8%B0%EC%88%A0\" aria-label=\"pwa 제작 기술 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PWA 제작 기술</h3>\n<p>PWA를 구현하기 위해서는 크게 manifest.json과 Service Workers라는 2가지의 기술이 필요합니다.</p>\n<h3 id=\"manifestjson\" style=\"position:relative;\"><a href=\"#manifestjson\" aria-label=\"manifestjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>manifest.json</h3>\n<p>설치 시 아이콘은 무얼 사용하고 아이콘을 눌렀을때 접속할 페이지는 무엇인지, 배경색은 무슨색으로 할 것인지에 관한 설정파일</p>\n<h3 id=\"service-worker\" style=\"position:relative;\"><a href=\"#service-worker\" aria-label=\"service worker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>service-worker</h3>\n<p>PWA의 핵심으로 캐싱은 어떻게 할 것인지 요청시 캐시를 먼저 보여줄지 웹서버를 통해서 먼저 보여줄지, push 등등에 대한 프로그래밍하는 기술 (PWA의 거의 80%에 해당하는 기술)</p>\n<h2 id=\"react-구조\" style=\"position:relative;\"><a href=\"#react-%EA%B5%AC%EC%A1%B0\" aria-label=\"react 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 구조</h2>\n<ul>\n<li>index.js 파일:\nReactDOM.render(<App />, document.getElementById(‘root’));\npublic/index.html의  <div id=\"root\"></div> 부분에다가 보여주고 싶은 컴포넌트를 넣어주는데 App컴포넌트라고 정의를 해줌\n즉, app.js 페이지 렌더링 됨</li>\n</ul>\n<p>&#x3C; Src 폴더 내 > </p>\n<ul>\n<li>_actions, _reducer : Redux를 위한 폴더들</li>\n<li>components/views : Page들을 넣음 - Landing Page: 처음로딩되는 페이지에 관한 파일</li>\n<li>components/views/Sections : 해당 페이지에 관련된 css파일이나 component들을 넣음</li>\n<li>App.js: Routing 관련 처리 (페이지 별 분류)</li>\n<li>Config.js : 환경변수 정의</li>\n<li>hoc : Higher Order Component. 다른 컴포넌트를 갖는 function\n예를 들어 admin이라는 컴포넌트에 진입시 auth라는 hoc이 유저의 자격을 체크해서 컴포넌트에 진입 여부를 결정해 다음 액션을 취할 수있게 해줌\nauth 안에 여러 컴포넌트들을 넣어놓고 사용 가능 </li>\n<li>utils : 여러군데에서 쓰일 수 있는 것들을 이곳에 넣어 어디서든 쓸 수있게해줌</li>\n</ul>\n<h2 id=\"react-router-dom--페이지간-이동-\" style=\"position:relative;\"><a href=\"#react-router-dom--%ED%8E%98%EC%9D%B4%EC%A7%80%EA%B0%84-%EC%9D%B4%EB%8F%99-\" aria-label=\"react router dom  페이지간 이동  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Router Dom ( 페이지간 이동 )</h2>\n<p><a href=\"https://v5.reactrouter.com/web/example/basic\">참고</a>\n<code class=\"language-text\">npm i react-router-dom</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  BrowserRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span>\n  Switch<span class=\"token punctuation\">,</span>\n  Route<span class=\"token punctuation\">,</span>\n  Link\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> functiion <span class=\"token function\">BasicExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n   <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/signin\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/signup\"</span><span class=\"token operator\">></span>register<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>\n        <span class=\"token comment\">//라우터 안에 Home 컴포넌트 삽입</span>\n          <span class=\"token operator\">&lt;</span>LandingPage <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n        <span class=\"token comment\">// 한줄로 표현 가능</span>\n       <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/signin\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>LandingPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/signup\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>SignupPage <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nfuntion <span class=\"token function\">LandingPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 위의 컴포넌트를 따로 파일로 빼서 import 해올 수 있음</span>\n<span class=\"token keyword\">import</span> SigninPage <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/views/SigninPage/SigninPage'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>client<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>views<span class=\"token operator\">/</span>SigninPages<span class=\"token operator\">/</span>SigninPage<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\nfuntion <span class=\"token function\">SigninPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> SigninPage\n\nSignupPage<span class=\"token operator\">...</span> </code></pre></div>\n<h1 id=\"react-vs-react-hooks\" style=\"position:relative;\"><a href=\"#react-vs-react-hooks\" aria-label=\"react vs react hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React VS React Hooks</h1>\n<h2 id=\"react-component\" style=\"position:relative;\"><a href=\"#react-component\" aria-label=\"react component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Component</h2>\n<ul>\n<li>\n<p>Class Component\nProvide more features 더 많은 기능들 사용 가능\nLonger Code 코드 길어짐\nMore Complex Code 복잡한 코드\nSlower Performance 성능측면에서 느려짐</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// react 생성 순서(Life cycle) </span>\n<span class=\"token comment\">// 제일 먼저 constructor 실행</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// state을 먼저 부여해줌 name은 아무것도 없는 걸로 해줌</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// render후에 실행되는 부분</span>\n<span class=\"token comment\">// componentDidMount을 통해 데이터를 가져오거나 하고싶은 것들을 해주면 됨</span>\n<span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user/name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// constructor다음 render </span>\n<span class=\"token comment\">// DOM에다가 알맞게 넣어줘서 화면에 랜더링 해주는 것 </span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> My name is <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Functional Component\nProvide less features 한정적인 기능\nShorter Code 코드 짧음\nSimpler Code 코드 간단\nFaster Performance 성능이 더 좋음</li>\n</ul>\n<h2 id=\"functional-component에선-쓰지-못하는-class-component-기능\" style=\"position:relative;\"><a href=\"#functional-component%EC%97%90%EC%84%A0-%EC%93%B0%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-class-component-%EA%B8%B0%EB%8A%A5\" aria-label=\"functional component에선 쓰지 못하는 class component 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional Component에선 쓰지 못하는 Class Component 기능</h2>\n<p><a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">참고</a>\nClass Component를 이용할 때 리액트에서 처음에 페이지 켤 때 생성, 업데이트. 삭제 시\nconstructor-> render-> react updates DOM and refs -> componentDidMount 이런식의 과정을 거치는데 functional component에서는 이것들을 쓸 수가 없기에 빠르다는 장점을 제외하고는 기능이 제한적이다보니 대부분 클래스 컴포넌트를 사용해왔지만\nReact에서 Hooks을 발표한 이후부턴 life cycle, state 부여하는 기능등을 통해 functional component만으로도 Class Component기능들을 쓸 수있게됨\ncomponentDidMount = useEffect, this.state 를 useState로 대체해서 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Hooks</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// useEffect Hooks</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      Axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user/name'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> My name is <span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reference</p>\n<p><a href=\"https://webruden.tistory.com/275\">베이스 캠프</a>\n<a href=\"https://velog.io/@jini_eun/React-React.js%EB%9E%80-%EA%B0%84%EB%8B%A8-%EC%A0%95%EB%A6%AC\">Jini님 블로그</a>\n<a href=\"http://blog.wishket.com/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%A0%88%EC%8B%9C%EB%B8%8C-%EC%9B%B9-%EC%95%B1pwa%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B4%EB%A9%B0-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80/\">wishket님 블로그</a></p>","frontmatter":{"date":"December 05, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React5/"}},"prev":{"id":"27781789-6db4-5953-b9a6-beb50fd40f68","html":"<h1 id=\"redux\" style=\"position:relative;\"><a href=\"#redux\" aria-label=\"redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h1>\n<p>상태(state) 관리 라이브러리</p>\n<p><a href=\"https://yoojiih.github.io/TIL_20211103/\">redux 참고</a></p>\n<h1 id=\"props-vs-state-react에서는-props와-state가-존재함\" style=\"position:relative;\"><a href=\"#props-vs-state-react%EC%97%90%EC%84%9C%EB%8A%94-props%EC%99%80-state%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%A8\" aria-label=\"props vs state react에서는 props와 state가 존재함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props VS State (React에서는 Props와 State가 존재함)</h1>\n<h2 id=\"propsproperties\" style=\"position:relative;\"><a href=\"#propsproperties\" aria-label=\"propsproperties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props(properties)</h2>\n<p>부모 컴포넌트에서 자식컴포넌트로 데이터 내려줬을 때 데이터 변경 불가 (immutable)</p>\n<p>변경 시 부모컴포넌트에서 변경 후 다시 내려줘야함</p>\n<p><code class=\"language-text\">&lt;자식 컴포넌트명 messages={messages} currentMember={member} /></code></p>\n<h2 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State</h2>\n<p>부모 자식 간이 아닌 컴포넌트 내 데이터 교환 시 사용 </p>\n<p>컴포넌트 내에서도 충분히 state를 변하게 할 수 있으며 (mutable) 데이터 변화시 자동으로 리렌더링됨</p>\n<p><code class=\"language-text\">state = { message: '', attachFile: undefined, openMenu: false,};</code></p>\n<h2 id=\"redux-1\" style=\"position:relative;\"><a href=\"#redux-1\" aria-label=\"redux 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h2>\n<p>컴포넌트끼리 전달이 아니라 저장소를 두고 바로 꺼내서 사용해 훨씬 편하게 상태관리 할 수 있게됨</p>\n<ul>\n<li>Redux 데이터 flow (strict unidirectional(단방향) data flow)\n리덕스는 컴포넌트에서 시작 -> Dispatch(action) -> ACTION -> REDUCER -> STORE -> subscribe -> React Component로 다시 돌아옴</li>\n</ul>\n<h3 id=\"action\" style=\"position:relative;\"><a href=\"#action\" aria-label=\"action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action</h3>\n<p>무엇이 일어났는지 설명하는 객체 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// articleId 42을 LIKE_ARTICLE 좋아요 했다는 뜻</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'LIKE_ARTICLE'</span><span class=\"token punctuation\">,</span> articleId<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// 이름이 Mary고 id가 3인 유저의 정보를 가져오는 걸 성공했다는 뜻</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_USER_SUCCESS'</span><span class=\"token punctuation\">,</span> response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// Redux라는 text를 TODO리스트에 ADD 했다는 상태는 알려주는 것 </span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Redux'</span> <span class=\"token punctuation\">}</span> </code></pre></div>\n<h3 id=\"reducer\" style=\"position:relative;\"><a href=\"#reducer\" aria-label=\"reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reducer</h3>\n<p>이전 state와 action object를 받은 후에 next state를 리턴함\n<code class=\"language-text\">(previousState, action) => nextState</code></p>\n<h3 id=\"store\" style=\"position:relative;\"><a href=\"#store\" aria-label=\"store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store</h3>\n<p>전체적인 애플리케이션의 state을 감싸주는 역할\nstore내에는 많은 메소드들이 존재하며 그 메소드들을 이용해 모든 state를 관리할 수있음</p>\n<h1 id=\"setting-up-redux\" style=\"position:relative;\"><a href=\"#setting-up-redux\" aria-label=\"setting up redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up Redux</h1>\n<h2 id=\"리덕스-설치\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%84%A4%EC%B9%98\" aria-label=\"리덕스 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 설치</h2>\n<p>다운 받아야 할 Dependency들</p>\n<ol>\n<li>redux</li>\n<li>react-redux</li>\n<li>redux-promise</li>\n<li>redux-thunk\n<code class=\"language-text\">npm i redux react-redux redux-promise redux-thunk --save</code></li>\n</ol>\n<h2 id=\"리덕스-기본구조-생성\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EA%B8%B0%EB%B3%B8%EA%B5%AC%EC%A1%B0-%EC%83%9D%EC%84%B1\" aria-label=\"리덕스 기본구조 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 기본구조 생성</h2>\n<p>리덕스 store안에 모든 state를 관리하게 되는데 state를 변경 하려면 dispatch를 이용해서 action으로 변경 가능함</p>\n<p>근데 redux store에선 action이 오직 객체 형식이여야만 받을 수 있는데 객체형식으로 된 action이 아니라 promise 나 Function 형식으로 된것 도 받을 수 있기 때문에 redux-promise, redux-thunk를 미들웨어로 받아서 해결함. 즉, thunk와 promise 없이 redux사용시 에러발생</p>\n<p>redux-promise, redux-thunk: 리덕스를 잘 사용할 수 있게 도와주는 미들웨어 역할</p>\n<p>redux-thunk는 dispath한테 어떻게 function을 받는지 방법을 알려주고, redux-promise는 dispatch한테 어떻게 promise를 대처를 해야하는지 알려줌</p>\n<h2 id=\"리덕스-적용\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%A0%81%EC%9A%A9\" aria-label=\"리덕스 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 적용</h2>\n<p>(client/src/index.js)에서 어플리케이션이 시작되는거라 <App /> 에다가 redux를 연결시켜 줘야함</p>\n<ol>\n<li>이미 다운 받아놓은 dependency(react-redux) 에서 redux에서 제공하는 provider를 import</li>\n<li><App/>을 <Provider>로 감싸줘서 redux와 application을 연결시켜줌 </li>\n<li>provider 안에는 store를 넣어주는데 이 store안에다가 reducer 등 이것저것 넣어주는데 그 전에 미들웨어를 이용해야지 object 객체형태의 action 만 받는 store가 promise와 function도 받을 수 잇음</li>\n<li>applyMiddleware안에 미들웨어 2개를 넣어주고 redux에서 create store라는 걸 가져와 줘야함\n(원래는 store를 redux에서 생성시create store만 하지만 객체밖에 못받기 때문에 미들웨어들과 함께 생성해줌)</li>\n<li>store 만든 createStoreWithMiddleware을 Provider store={ 이 안에다가 넣어주고 그 안에 reducer와 REDUX<em>DEVTOOLS</em>EXTENSION__까지 넣어주면 어플리케이션에 리덕스가 연결이 됨</li>\n</ol>\n<p>(src/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> applyMiddleware<span class=\"token punctuation\">,</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> promiseMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-promise'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReduxThunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// client/src/_reducers/index.js를 import해옴 (index.js 안쳐도 자동으로 됨)</span>\n<span class=\"token keyword\">import</span> Reducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./_reducers'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> createStoreWithMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>promiseMiddleware<span class=\"token punctuation\">,</span> ReduxThunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>createStore<span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider\n        store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">createStoreWithMiddleware</span><span class=\"token punctuation\">(</span>Reducer<span class=\"token punctuation\">,</span>\n            window<span class=\"token punctuation\">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class=\"token operator\">&amp;&amp;</span>\n            window<span class=\"token punctuation\">.</span><span class=\"token function\">__REDUX_DEVTOOLS_EXTENSION__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/_reducers/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// store내 여러가지 state에 관한 리듀서들이 나눠져 있는걸 redux에서 가져온 combineReducers를 이용해 rootReducer로 하나로 합쳐줌</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> user <span class=\"token keyword\">from</span> <span class=\"token string\">'./user_reducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//로그인, 회원가입같은 인증에 관한 기능을 위한 user reducer </span>\n    user\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> rootReducer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/<em>reducers/user</em>reducer.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">AUTH_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../_actions/types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">case</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> loginSuccess<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> register<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> userData<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(client/src/_actions/types.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">LOGIN_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"login_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">REGISTER_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"register_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">AUTH_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"auth_user\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/<em>actions/usesr</em>action.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">AUTH_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loginUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/login'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/register'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/auth'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"December 07, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React7/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React6/","nextSlug":"/Shop_React5/","prevSlug":"/Shop_React7/"}},"staticQueryHashes":["1073350324","2938748437"]}