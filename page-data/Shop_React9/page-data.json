{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React9/","result":{"data":{"cur":{"id":"1feb9020-d0d2-5913-89d1-b498e3d8d188","html":"<h1 id=\"register-page\" style=\"position:relative;\"><a href=\"#register-page\" aria-label=\"register page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Register Page</h1>\n<p>(client/src/components/views/RegisterPage/RegisterPage.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// registerUser function을 불러오기 위함</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> registerUser <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../_actions/user_action'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">RegisterPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Email<span class=\"token punctuation\">,</span> setEmail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>ConfirmPassword<span class=\"token punctuation\">,</span> setConfirmPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onEmailHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onNameHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onPasswordHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onConfirmPasswordHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setConfirmPassword</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmitHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 비밀번호와 비밀번호 확인같아야지 회원가입을 누를 수 있게 조건체크 해줌</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Password <span class=\"token operator\">!==</span> ConfirmPassword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// 만약 같지 않으면 밑의 코드로는 진행이 안되게 함</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'비밀번호와 비밀번호 확인은 같아야 합니다.'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// body를 넣을 때 email 과 password만 넣는게 아니라 이름까지 넣어줌</span>\n        <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            email<span class=\"token operator\">:</span> Email<span class=\"token punctuation\">,</span>\n            password<span class=\"token operator\">:</span> Password<span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> Name\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// dispatch를 이용해서 registerUser라는 이름의 액션을 날리고 밑의 user_action.js에 가서 registerUser를 똑같이 만들어줌 </span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// loginSuccess가 아닌 그냥 success로 </span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// 로그인 페이지로 보내줌</span>\n                    props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to sign up\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> justifyContent<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span> alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span>\n            <span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>form style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> flexDirection<span class=\"token operator\">:</span> <span class=\"token string\">'column'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n                onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmitHandler<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Email<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Email<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onEmailHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Name<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onNameHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Password<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Password<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onPasswordHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Confirm Password<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ConfirmPassword<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onConfirmPasswordHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n                <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>\n                    회원 가입\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>RegisterPage<span class=\"token punctuation\">)</span></code></pre></div>\n<p>(client/src/<em>actions/usesr</em>action.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// type.js에서 export const REGISTER_USER = \"register_user\"; 정의 해줌</span>\n    <span class=\"token constant\">REGISTER_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loginUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n <span class=\"token comment\">// function이름은 RegisterPage.js내 registerUser와 같아야함</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// end point는 (server/index.js)내 app.post('/api/users/register', (req, res) => { 와 똑같이 해줘야 server/index 쪽의 api로 진입 가능함 = 이렇게 보내면 서버에서 다 처리를 해서 값을 줌</span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/register'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// type을 REGISTER_USER로 바꿔줌</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// reducer로 가서 case문 작성해줌 </span>\n    <span class=\"token comment\">// 아무것도 없는 원본 state를 가져오고 이름은 register, 서버에서 가져온 response를 action.payload에다가 넣어주면 됨</span>\n    <span class=\"token comment\">// case REGISTER_USER:</span>\n        <span class=\"token comment\">// return { ...state, register: action.payload } </span>\n        <span class=\"token comment\">// break;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<h1 id=\"logout\" style=\"position:relative;\"><a href=\"#logout\" aria-label=\"logout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logout</h1>\n<p>(client/src/components/views/LandingPage/LandingPage.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">function</span> <span class=\"token function\">LandingPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// server/index.js의 logout라우터 get request를 아무런 값(ex.body) 없이 주면 됨</span>\n        axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/users/logout</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// console.log(response.data) 출력 시: Object sucess: true __proto__: Objcet </span>\n                <span class=\"token comment\">// server/index.js에서 return한 success: true가 온 것을 확인 가능</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'로그아웃 하는데 실패 했습니다.'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">...</span>\n            <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>시작 페이지<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n            <span class=\"token comment\">//버튼 누르면 로그아웃이 되도록 onclick이벤트를 준 다음 클릭 시 onClickHandler라는 function을 실행하도록</span>\n            <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClickHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                로그아웃\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>LandingPage<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Reference</p>","excerpt":"Register Page (client/src/components/views/RegisterPage/RegisterPage.js) (client/src/actions/usesraction.js) Logout (client/src/components/views/LandingPage/LandingPage.js) Reference","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React9/"}},"next":{"id":"27781789-6db4-5953-b9a6-beb50fd40f68","html":"<h1 id=\"redux\" style=\"position:relative;\"><a href=\"#redux\" aria-label=\"redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h1>\n<p>상태(state) 관리 라이브러리</p>\n<p><a href=\"https://yoojiih.github.io/TIL_20211103/\">redux 참고</a></p>\n<h1 id=\"props-vs-state-react에서는-props와-state가-존재함\" style=\"position:relative;\"><a href=\"#props-vs-state-react%EC%97%90%EC%84%9C%EB%8A%94-props%EC%99%80-state%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%A8\" aria-label=\"props vs state react에서는 props와 state가 존재함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props VS State (React에서는 Props와 State가 존재함)</h1>\n<h2 id=\"propsproperties\" style=\"position:relative;\"><a href=\"#propsproperties\" aria-label=\"propsproperties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props(properties)</h2>\n<p>부모 컴포넌트에서 자식컴포넌트로 데이터 내려줬을 때 데이터 변경 불가 (immutable)</p>\n<p>변경 시 부모컴포넌트에서 변경 후 다시 내려줘야함</p>\n<p><code class=\"language-text\">&lt;자식 컴포넌트명 messages={messages} currentMember={member} /></code></p>\n<h2 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State</h2>\n<p>부모 자식 간이 아닌 컴포넌트 내 데이터 교환 시 사용 </p>\n<p>컴포넌트 내에서도 충분히 state를 변하게 할 수 있으며 (mutable) 데이터 변화시 자동으로 리렌더링됨</p>\n<p><code class=\"language-text\">state = { message: '', attachFile: undefined, openMenu: false,};</code></p>\n<h2 id=\"redux-1\" style=\"position:relative;\"><a href=\"#redux-1\" aria-label=\"redux 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h2>\n<p>컴포넌트끼리 전달이 아니라 저장소를 두고 바로 꺼내서 사용해 훨씬 편하게 상태관리 할 수 있게됨</p>\n<ul>\n<li>Redux 데이터 flow (strict unidirectional(단방향) data flow)\n리덕스는 컴포넌트에서 시작 -> Dispatch(action) -> ACTION -> REDUCER -> STORE -> subscribe -> React Component로 다시 돌아옴</li>\n</ul>\n<h3 id=\"action\" style=\"position:relative;\"><a href=\"#action\" aria-label=\"action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action</h3>\n<p>무엇이 일어났는지 설명하는 객체 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// articleId 42을 LIKE_ARTICLE 좋아요 했다는 뜻</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'LIKE_ARTICLE'</span><span class=\"token punctuation\">,</span> articleId<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// 이름이 Mary고 id가 3인 유저의 정보를 가져오는 걸 성공했다는 뜻</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_USER_SUCCESS'</span><span class=\"token punctuation\">,</span> response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// Redux라는 text를 TODO리스트에 ADD 했다는 상태는 알려주는 것 </span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Redux'</span> <span class=\"token punctuation\">}</span> </code></pre></div>\n<h3 id=\"reducer\" style=\"position:relative;\"><a href=\"#reducer\" aria-label=\"reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reducer</h3>\n<p>이전 state와 action object를 받은 후에 next state를 리턴함\n<code class=\"language-text\">(previousState, action) => nextState</code></p>\n<h3 id=\"store\" style=\"position:relative;\"><a href=\"#store\" aria-label=\"store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store</h3>\n<p>전체적인 애플리케이션의 state을 감싸주는 역할\nstore내에는 많은 메소드들이 존재하며 그 메소드들을 이용해 모든 state를 관리할 수있음</p>\n<h1 id=\"setting-up-redux\" style=\"position:relative;\"><a href=\"#setting-up-redux\" aria-label=\"setting up redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up Redux</h1>\n<h2 id=\"리덕스-설치\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%84%A4%EC%B9%98\" aria-label=\"리덕스 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 설치</h2>\n<p>다운 받아야 할 Dependency들</p>\n<ol>\n<li>redux</li>\n<li>react-redux</li>\n<li>redux-promise</li>\n<li>redux-thunk\n<code class=\"language-text\">npm i redux react-redux redux-promise redux-thunk --save</code></li>\n</ol>\n<h2 id=\"리덕스-기본구조-생성\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EA%B8%B0%EB%B3%B8%EA%B5%AC%EC%A1%B0-%EC%83%9D%EC%84%B1\" aria-label=\"리덕스 기본구조 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 기본구조 생성</h2>\n<p>리덕스 store안에 모든 state를 관리하게 되는데 state를 변경 하려면 dispatch를 이용해서 action으로 변경 가능함</p>\n<p>근데 redux store에선 action이 오직 객체 형식이여야만 받을 수 있는데 객체형식으로 된 action이 아니라 promise 나 Function 형식으로 된것 도 받을 수 있기 때문에 redux-promise, redux-thunk를 미들웨어로 받아서 해결함. 즉, thunk와 promise 없이 redux사용시 에러발생</p>\n<p>redux-promise, redux-thunk: 리덕스를 잘 사용할 수 있게 도와주는 미들웨어 역할</p>\n<p>redux-thunk는 dispath한테 어떻게 function을 받는지 방법을 알려주고, redux-promise는 dispatch한테 어떻게 promise를 대처를 해야하는지 알려줌</p>\n<h2 id=\"리덕스-적용\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%A0%81%EC%9A%A9\" aria-label=\"리덕스 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 적용</h2>\n<p>(client/src/index.js)에서 어플리케이션이 시작되는거라 <App /> 에다가 redux를 연결시켜 줘야함</p>\n<ol>\n<li>이미 다운 받아놓은 dependency(react-redux) 에서 redux에서 제공하는 provider를 import</li>\n<li><App/>을 <Provider>로 감싸줘서 redux와 application을 연결시켜줌 </li>\n<li>provider 안에는 store를 넣어주는데 이 store안에다가 reducer 등 이것저것 넣어주는데 그 전에 미들웨어를 이용해야지 object 객체형태의 action 만 받는 store가 promise와 function도 받을 수 잇음</li>\n<li>applyMiddleware안에 미들웨어 2개를 넣어주고 redux에서 create store라는 걸 가져와 줘야함\n(원래는 store를 redux에서 생성시create store만 하지만 객체밖에 못받기 때문에 미들웨어들과 함께 생성해줌)</li>\n<li>store 만든 createStoreWithMiddleware을 Provider store={ 이 안에다가 넣어주고 그 안에 reducer와 REDUX<em>DEVTOOLS</em>EXTENSION__까지 넣어주면 어플리케이션에 리덕스가 연결이 됨</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> applyMiddleware<span class=\"token punctuation\">,</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> promiseMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-promise'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReduxThunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// client/src/_reducers/index.js를 import해옴 (index.js 안쳐도 자동으로 됨)</span>\n<span class=\"token keyword\">import</span> Reducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./_reducers'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> createStoreWithMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>promiseMiddleware<span class=\"token punctuation\">,</span> ReduxThunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>createStore<span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider\n        store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">createStoreWithMiddleware</span><span class=\"token punctuation\">(</span>Reducer<span class=\"token punctuation\">,</span>\n            window<span class=\"token punctuation\">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class=\"token operator\">&amp;&amp;</span>\n            window<span class=\"token punctuation\">.</span><span class=\"token function\">__REDUX_DEVTOOLS_EXTENSION__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/_reducers/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// store내 여러가지 state에 관한 리듀서들이 나눠져 있는걸 redux에서 가져온 combineReducers를 이용해 rootReducer로 하나로 합쳐줌</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> user <span class=\"token keyword\">from</span> <span class=\"token string\">'./user_reducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//로그인, 회원가입같은 인증에 관한 기능을 위한 user reducer </span>\n    user\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> rootReducer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/<em>reducers/user</em>reducer.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">AUTH_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../_actions/types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">case</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> loginSuccess<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> register<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> userData<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(client/src/_actions/types.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">LOGIN_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"login_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">REGISTER_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"register_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">AUTH_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"auth_user\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/<em>actions/usesr</em>action.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">AUTH_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loginUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/login'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/register'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/auth'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reference</p>","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React7/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React9/","nextSlug":"/Shop_React7/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}