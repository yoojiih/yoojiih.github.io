{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React8/","result":{"data":{"cur":{"id":"42209f61-65e5-5c48-b348-40670b1df4b8","html":"<h1 id=\"login\" style=\"position:relative;\"><a href=\"#login\" aria-label=\"login permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Login</h1>\n<h1 id=\"구현사항\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84%EC%82%AC%ED%95%AD\" aria-label=\"구현사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현사항</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> 입력 폼에 email과 password를 입력가능하도록 state와 onChange이벤트 사용\n> \n> 입력시 매번 유효성 체크 &amp; 애니메이션 기능(Formilk,Yup)\n> React Hook Form</code></pre></div>\n<p>(client/src/components/views/LoginPage/LoginPage.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// useState를 react라이브러리에서 가져옴</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> loginUser <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../_actions/user_action'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">LoginPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 컴포넌트 내에서 데이터를 바꾸기 위해 state 사용 (타이핑 시 state를 바꿔줘야 value값이 바뀌는 로직)</span>\n    <span class=\"token comment\">// initialState = \"\" 빈칸</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Email<span class=\"token punctuation\">,</span> setEmail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 이벤트 핸들러 생성 후 파라미터로 event 넣어주고 타이핑 시 onChange라는 이벤트를 발생시켜서 setEmail을 이용해서 state를 바꾸면 value가 바뀌는 구조</span>\n    <span class=\"token comment\">// 그럼 입력한 것이 브라우저에 타이핑되어 보여질 수 있음</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onEmailHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 타이핑하는대로 입력칸 내 출력됨</span>\n        <span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onPasswordHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmitHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 버튼 누를 때마다 페이지 refresh 되기 때문에 밑에 코드를 실행 해주기 위해 refresh 방지용 코드 작성</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// state값을 서버에 보내야 해서 axios를 사용해 post라는 http 메소드를 통해 api/user/login에 Email, Password 값들을 넣어줘서 보내주기 위해 body로 묶어줌</span>\n        <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            email<span class=\"token operator\">:</span> Email<span class=\"token punctuation\">,</span>\n            password<span class=\"token operator\">:</span> Password\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// server/index.js의 login router쪽에 보내기 위한 코드</span>\n        <span class=\"token comment\">// login router내 /api/user/login와 똑같은 주소를 여기다가 작성</span>\n        <span class=\"token comment\">// Axios.post('/api/user/login', body) 이런식으로 end point와 body를 넣음</span>\n        <span class=\"token comment\">// .then(response => {...})</span>\n        <span class=\"token comment\">// 작성해 보낸 후 email과 password를 이용해서 로그인을 함</span>\n        <span class=\"token comment\">// server/index.js에서 User.findOne({ email: req.body.email }, (err, user) => {</span>\n        <span class=\"token comment\">// 여기서 email을 받은 걸 찾아(req.body.email)있다면 이메일과 비밀번호가 맞는지 여부 확인해 </span>\n        <span class=\"token comment\">// 맞으면 토큰을 생성해서 토큰을 쿠키에 저장한다음 클라이언트에다가 로그인 성공했으면 성공 메시지를 전해줌 </span>\n        <span class=\"token comment\">// 그래서 그 성공메시지를  .then(response로 받아서 여기서 처리할 거를 처리하면 됨</span>\n    \n        <span class=\"token comment\">// 근데 리덕스를 사용해야 하기 때문에 </span>\n        <span class=\"token comment\">// dispatch를 이용해서 이름이 loginUser인 action을 취한 후 리듀서로감 ( axios가 아닌 여기다가 이제 body 사용)</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">loginUser</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 다 완료가 된 후(리덕스에 저장)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 완료가 잘 됐으면 랜딩페이지(처음페이지, root페이지)로 이동 시켜줌</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>loginSuccess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        \n                    <span class=\"token comment\">// 리액트에서 페이지 이동 시킬땐 props.history.push를 이용함 (props은 function LoginPage(props)에 넣어줌)</span>\n                    <span class=\"token comment\">// 근데 history 쓸려면 history는 react-router-dom을 이용해서 쓰고있는 것이라서 </span>\n                    <span class=\"token comment\">// import { withRouter } from 'react-router-dom';  &amp; export default withRouter(LandingPage)를 써줘야 사용가능함</span>\n                    props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error˝'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> justifyContent<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span> alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span>\n            <span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>form style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> flexDirection<span class=\"token operator\">:</span> <span class=\"token string\">'column'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// form에다가 submit 이벤트를 등록해야 login버튼 눌렀을 때 </span>\n                onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmitHandler<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Email<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token comment\">// 위에서 정의한 state를 value로 넣어줌</span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Email<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onEmailHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Password<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Password<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onPasswordHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>\n                    Login\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>LoginPage<span class=\"token punctuation\">)</span></code></pre></div>\n<p>(server/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">//요청된 이메일이 데이터베이스에 있는지 찾는다.</span>\n  User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>email <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        loginSuccess<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">\"제공된 이메일에 해당하는 유저가 없습니다.\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//요청된 이메일이 데이터 베이스에 있다면 비밀번호가 맞는 비밀번호 인지 확인.</span>\n    user<span class=\"token punctuation\">.</span><span class=\"token function\">comparePassword</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> isMatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMatch<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loginSuccess<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"비밀번호가 틀렸습니다.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">//비밀번호 까지 맞다면 토큰을 생성</span>\n      user<span class=\"token punctuation\">.</span><span class=\"token function\">generateToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 쿠키에 토큰을 저장</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x_auth\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loginSuccess<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p>(client/src/<em>actions/usesr</em>action.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 위에서 body에 email과 password 넣어준 거(dispatch(loginUser(body))를 dataToSubmit라는 parameter를 통해 받타 </span>\n<span class=\"token comment\">// 위에서 하려고했던 request인 axios.post('/api/users/login', body)를 가져와서 여기서 함</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loginUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// request라는 변수에다가 지정해준 후 서버에다가 request를 날린 후 </span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/login'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// response 받은거에다가 .data => 이런식으로 서버에서 받은 데이터를 request 변수에다가 저장을 함</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 그 후 request변수를 리턴을 시켜서 state과 현재 action을 조합해서 그 다음 state를 만드는 역할을 하는 reducer로 보내줌</span>\n    <span class=\"token comment\">// action은 type과 response을 넣어줘야하니까 type이름은 LOGIN_USER, payload엔 request 변수를 넣어준 다음 reducer로 보냄</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>리듀서로 보내는 방법\n(client/src/<em>reducers/user</em>reducer.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 리듀서에서도 타입을 action_user_action에서 바로 가져오는게 아니라 return { type: LOGIN_USER, payload: request}</span>\n<span class=\"token comment\">// types.js에서 가져오기 위해 import해주고 previous state과 action을 가지고 next state를 리턴해줌</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">AUTH_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../_actions/types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// _action/user_action.js내 각각 다른 type들(ex.LOGIN_USER)에 맞는 조치를 취해주기위해 switch 문법을 이용해 처리</span>\n<span class=\"token comment\">// 현재 state는 비어있는 상태</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token operator\">:</span>\n\n            <span class=\"token comment\">// 리턴 해줄 땐 비어있는 state를 spread operator를 통해 똑같이 가져와서</span>\n            <span class=\"token comment\">// _actions/user_aciton.js의 payload: request 변수를 리듀서의 loginSuccess: action.payload 에다가 넣어준 것</span>\n            <span class=\"token comment\">// request 변수 : backend server(node server)에서 가져온 모든 데이터임 response.data</span>\n            <span class=\"token comment\">// response.data: backend에선 로그 인 성공 시 .json({ loginSuccess: true, userId: user._id })가 들어감</span>\n            <span class=\"token comment\">// 즉, 결과로 user - loginSucess - loginSucess:ture userId: \"dfwkdfjlwkjld;fk\"</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> loginSuccess<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> register<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> userData<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 타입들만 관리하는 파일을 생성 -타입을 따로 지정해줌\n(client/src/_actions/types.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">LOGIN_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"login_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">REGISTER_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"register_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">AUTH_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"auth_user\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"에러사항\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC%EC%82%AC%ED%95%AD\" aria-label=\"에러사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러사항</h2>\n<ol>\n<li>회원가입 시 데이터베이스에 유저정보가 알맞게 잘 들어갔지만 로그인시 에러발생\n-> 회원가입 구현시 테스트할 때 email만 들어가고 다른 정보들은 들어가지 않아 코드 수정후 다시 전과 똑같은 이메일로 다시 회원가입을 시도 했기 때문에 데이터베이스에는 같은 이메일이 2개나 존재했던 것\n심지어 하나는 이메일만 들어가 있던 거라 에러 발생함.\n그래서 데이터베이스에서 중복된 이메일을 직접 삭제해줬더니 에러가 해결됨\n이로써 회원가입 시 이메일 중복체크의 필요성을 느끼게 되었다.</li>\n</ol>\n<p>Reference</p>","excerpt":"Login 구현사항 (client/src/components/views/LoginPage/LoginPage.js) (server/index.js) (client/src/actions/usesraction.js) 리듀서로 보내는 방법\n(client/src/reducers/userreducer.js) 모든 타입들만 관리하는 파일을 생성 -타입을 따로 지정해줌\n(client/src/_actions/types.js) 에러사항 회원가입 시 데이터베이스에 유저정보가 알맞게 잘 들어갔지만 로그인시 에러발생\n-> 회원가입 구현시 테스트할 때 email만 들어가고 다른 정보들은 들어가지 않아 코드 수정후 다시 전과 똑같은 이메일로 다시 회원가입을 시도 했기 때문에 데이터베이스에는 같은 이메일이 2개나 존재했던 것\n심지어 하나는 이메일만 들어가 있던 거라 에러 발생함. \n그래서 데이터베이스에서 중복된 이메일을 직접 삭제해줬더니 에러가 해결됨\n이로써 회원가입 시 이메일 중복체크의 필요성을 느끼게 되었…","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React8/"}},"next":{"id":"3a04554a-4517-5113-bcf8-d18315143d10","html":"<h1 id=\"data-request-response-flow--axios\" style=\"position:relative;\"><a href=\"#data-request-response-flow--axios\" aria-label=\"data request response flow  axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Request, Response Flow &#x26; Axios</h1>\n<p><code class=\"language-text\">Database</code> &#x3C;=> <code class=\"language-text\">server</code> -response-> <code class=\"language-text\">client</code>\n&#x3C;-request-</p>\n<blockquote>\n<p>로그인 과정으로 예를 들자면</p>\n</blockquote>\n<blockquote>\n<p>유저가 클라이언트에서 이름과 비밀번호를 넣고 로그인 버튼 누르면 그 요청(request)이 서버로 이동하고 서버에서는 db에 유저 아이디가 있는지 찾고 있다면 보내준 비밀번호가 맞는지 체크함</p>\n</blockquote>\n<blockquote>\n<p>비밀번호 맞으면 response를 클라이언트 측에 성공했다는 걸 전해주고 비밀번호가 틀리거나 유저 자체가 없으면 없다는 정보들을 클라이언트에 보내줌</p>\n</blockquote>\n<h1 id=\"axios\" style=\"position:relative;\"><a href=\"#axios\" aria-label=\"axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Axios</h1>\n<p><a href=\"https://yoojiih.github.io/TIL_20211029/\">axios 참고</a>\n데이터 요청시 axios 라이브러리를 사용해서 보냄</p>\n<h2 id=\"axios-설치\" style=\"position:relative;\"><a href=\"#axios-%EC%84%A4%EC%B9%98\" aria-label=\"axios 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>axios 설치</h2>\n<p><code class=\"language-text\">npm i axios</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>client<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>views<span class=\"token operator\">/</span>LandingPage<span class=\"token operator\">/</span>LandingPage<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">LandingPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// LandingPage에 들어오자마자 실행되는 부분</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//get request를 서버(server/index.js)로 보냄. end point는 /api/hello</span>\n        axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/hello'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 서버에서 돌아오는 response를 콘솔창에 출력</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>시작 페이지<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LandingPage</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>server<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// request를 받는 router 생성 </span>\n<span class=\"token comment\">// 클라이언트측에서 get으로 줬으니 get메소드 사용, end point는 /api/hello, (req, res) callback을 주고 </span>\n<span class=\"token comment\">// 원래 라우터 같은 경우 request받은 걸로 처리 후 front로 다시 response줌 (지금은 프론트에 response(메시지)만 줌)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!~~ '</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"cors이슈-proxy-설정\" style=\"position:relative;\"><a href=\"#cors%EC%9D%B4%EC%8A%88-proxy-%EC%84%A4%EC%A0%95\" aria-label=\"cors이슈 proxy 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS이슈, Proxy 설정</h1>\n<p>Cross-Origin Resource Sharing(CORS): origin이 다른데 resource를 Sharing할 때 적용되는 정책\nweb document와 서버가 교환 시 same origin이면 항상 허용되지만 다르면 정책에 의해 컨트롤 당함</p>\n<p>Server 포트번호 5000번 -> localhost:5000 (Response) - origin</p>\n<p>Client 포트번호 3000번 -> localhost:3000 (Request) - origin</p>\n<p>axios.get(‘/api/hello’) 이렇게 요청 보내면 3000번으로 가기 때문에 5000번인 서버는 받지 못하는 상황 벌어짐\n이렇게 두개의 다른 포트를 가지고 있는 서버는 Cors 보안 정책 때문에 아무 설정없이 서버에 request를 보낼 수 없음</p>\n<h2 id=\"해결방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\" aria-label=\"해결방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법</h2>\n<ul>\n<li>방법 1: 개발자 도구 사용(Chrome Cors Extension)</li>\n</ul>\n<p>개발자들만 사용하는 방법이기 때문에 제한적임</p>\n<p>프론트엔드 부분만 컨트롤 가능한 상황 -> json 방식을 이용해 모든 request를 get request로 보냄으로써 해결이 가능. but 제한적임\nbackend 와 frontend 모두 컨트롤 할 수있는 상황 ->  서버에다가 클라이언트에서 오는 건 받을 수 있게 해주고 클라이언트 측에서도 보낼 때 ~한 것들은 허용해달라고 request를 보낼 때 같이 전달해서 보내면 해결됨</p>\n<ul>\n<li>방법 2: Proxy 사용\n<a href=\"https://create-react-app.dev/docs/proxying-api-requests-in-development/\">Configuring the Proxy Manually</a>\nProxy를 임의로 설정하기 위해 client 부분에 모듈 다운로드</li>\n</ul>\n<p><code class=\"language-text\">npm install http-proxy-middleware --save</code></p>\n<p>그 다음 src/setupProxy.js 파일 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createProxyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http-proxy-middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createProxyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// server/index.js에서 정의한 port번호가 5000번이니까 target을 5000번으로 설정</span>\n      <span class=\"token comment\">// front end 3000번 -> back end 5000번으로 주겠다고 설정해 놓음</span>\n      target<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span>\n      changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"proxy-server\" style=\"position:relative;\"><a href=\"#proxy-server\" aria-label=\"proxy server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proxy Server</h1>\n<p>보안상의 이유 등으로 직접 통신할 수 없는 두 점 사이에서 대리로 통신(request, response)을 수행하는 기능을 프록시, 그 중계 기능을 하는 컴퓨터 시스템이나 응용프로그램을 프록시 서버라 함</p>\n<h2 id=\"프록시-서버의-주요-특징\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%A3%BC%EC%9A%94-%ED%8A%B9%EC%A7%95\" aria-label=\"프록시 서버의 주요 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 서버의 주요 특징</h2>\n<ol>\n<li>프록시 서버는 클라이언트가 자신을 통해서 다른 네트워크 서비스에 간접적으로 접속할 수 있게 해줌 (pc와 외부 인터넷 사이의 징검다리 역할) </li>\n</ol>\n<p>  시스템에 방화벽을 가지고 있는 경우 외부와의 통신을 위해 만들어 놓은 서버 -> 외부 인터넷의 내부 침입을 막는 방화벽 기능</p>\n<ol start=\"2\">\n<li>프록시 서버는 프록시 서버에 요청된 웹 페이지 내용들을 캐시를 이용해 저장 (캐시 데이터, 공유 데이터 제공 기능)</li>\n</ol>\n<p>  Proxy 서버는 사용자의 요청을 Cahche해서 동일 요청이 들어오면 Cache 자원을 반환하기 때문에 리소스로의 접근을 빠르게 할 수 있음</p>\n<p>  예를들어 특정 사이트에 접속시 static한 이미지등을 proxy서버에 저장 시켜놔서 보고 싶을 때 빠르게 proxy서버에 담겨있는 해당 이미지를 볼 수 있음. </p>\n<p>  이렇게 하면 전송시간도 절약하고 불필요하게 외부와의 연결을 하지 않아도 되며 외부와의 트래픽을 줄이게 됨으로써 네트워크 병목현상을 방지 가능</p>\n<blockquote>\n<p>캐시는 컴퓨터의 기억장치에 관련된 기술로, 속도가 느린 기억장치와 속도가 빠른 기억장치가 존재할 경우, 빠른 기억장치에 느린 기억장치의 내용 중 최근에 사용한 일부를 넣어두는 것을 말한다. 이 경우 같은 내용을 여러 번 참조할 때, 두 번째부터는 빠른 속도로 읽을 수 있다.</p>\n</blockquote>\n<ul>\n<li>\n<p>IP 조작\n임의로 보낸 유저 ip 조작할 수 있어 실제 ip를 모르게해 더 나은 보안을 제공함</p>\n<p>추가적으로 ip뿐만 아니라 데이터도 중간에서 조작 가능</p>\n</li>\n<li>A Client(Proxy Server 설치)가 B Proxy에 접근하여 C인터넷(google.com)에 접속하는 방식</li>\n<li>\n<p>네트워크 서비스나 콘텐츠로의 접근 정책을 적용 가능</p>\n<p>ACL(access control list ACL): 사이트 접근에 대한 접근 정책을 정의</p>\n<p>회사에서 직원들이나 집안에서 아이들 특정 사이트 접근제어</p>\n</li>\n<li>\n<p>사용률 기록 &#x26; 검사</p>\n<p>log/Audit: 회사 내 직원의 인터넷 사용을 레포팅할 수 있다. 반대로 인트라넷의 사용을 레포팅할 수 도 있다.</p>\n</li>\n<li>보안 및 통제를 뚫고 나가기 위해 사용할 수 있으며 역으로 IP 추적을 당하지 않을 목적으로 사용. 역기능이긴 하지만 우회를 할 수 있도록 함</li>\n<li>\n<p>밖으로 나가는 콘텐츠 검사</p>\n<p>중계 서버인 프록시 서버를 거치기 때문에 콘텐츠를 검사할 수 있다. </p>\n<p>보안 상의 이유로 80 포트 외에 포트를 막아놓는 지역 제한을 우회해 다른 서비스 이용 가능</p>\n</li>\n<li>익명의 사용자가 서버에 접근하는 것을 막아 보안 유지</li>\n</ul>\n<h1 id=\"concurrently를-이용해-front-back-서버-한번에-켜기\" style=\"position:relative;\"><a href=\"#concurrently%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-front-back-%EC%84%9C%EB%B2%84-%ED%95%9C%EB%B2%88%EC%97%90-%EC%BC%9C%EA%B8%B0\" aria-label=\"concurrently를 이용해 front back 서버 한번에 켜기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concurrently를 이용해 front, back 서버 한번에 켜기</h1>\n<p>여러개의 commands를 동시에 작동 시킬 수 있게해주는 tool\n라이브러리 설치\n<code class=\"language-text\">npm i concurrently --save</code>\n사용법\npackage.json파일에 스크립트 내 켜고 싶은 것들 차례로 나열함\nconcurrently “command1 arg” “commmand2 arg”\nclient 폴더 내 start로 실행 하기 위해 prefix 사용\n<code class=\"language-text\">\"dev\": \"concurrently \\\"npm run backend\\\" \\\"npm run start --prefix client\\\"\"</code></p>\n<p>Reference\n<a href=\"https://velog.io/@jangwonyoon/Proxy-Server%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%9E%80\">jang님 블로그</a></p>","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React6/"}},"prev":{"id":"27781789-6db4-5953-b9a6-beb50fd40f68","html":"<h1 id=\"redux\" style=\"position:relative;\"><a href=\"#redux\" aria-label=\"redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h1>\n<p>상태(state) 관리 라이브러리</p>\n<p><a href=\"https://yoojiih.github.io/TIL_20211103/\">redux 참고</a></p>\n<h1 id=\"props-vs-state-react에서는-props와-state가-존재함\" style=\"position:relative;\"><a href=\"#props-vs-state-react%EC%97%90%EC%84%9C%EB%8A%94-props%EC%99%80-state%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%A8\" aria-label=\"props vs state react에서는 props와 state가 존재함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props VS State (React에서는 Props와 State가 존재함)</h1>\n<h2 id=\"propsproperties\" style=\"position:relative;\"><a href=\"#propsproperties\" aria-label=\"propsproperties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props(properties)</h2>\n<p>부모 컴포넌트에서 자식컴포넌트로 데이터 내려줬을 때 데이터 변경 불가 (immutable)</p>\n<p>변경 시 부모컴포넌트에서 변경 후 다시 내려줘야함</p>\n<p><code class=\"language-text\">&lt;자식 컴포넌트명 messages={messages} currentMember={member} /></code></p>\n<h2 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State</h2>\n<p>부모 자식 간이 아닌 컴포넌트 내 데이터 교환 시 사용 </p>\n<p>컴포넌트 내에서도 충분히 state를 변하게 할 수 있으며 (mutable) 데이터 변화시 자동으로 리렌더링됨</p>\n<p><code class=\"language-text\">state = { message: '', attachFile: undefined, openMenu: false,};</code></p>\n<h2 id=\"redux-1\" style=\"position:relative;\"><a href=\"#redux-1\" aria-label=\"redux 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h2>\n<p>컴포넌트끼리 전달이 아니라 저장소를 두고 바로 꺼내서 사용해 훨씬 편하게 상태관리 할 수 있게됨</p>\n<ul>\n<li>Redux 데이터 flow (strict unidirectional(단방향) data flow)\n리덕스는 컴포넌트에서 시작 -> Dispatch(action) -> ACTION -> REDUCER -> STORE -> subscribe -> React Component로 다시 돌아옴</li>\n</ul>\n<h3 id=\"action\" style=\"position:relative;\"><a href=\"#action\" aria-label=\"action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action</h3>\n<p>무엇이 일어났는지 설명하는 객체 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// articleId 42을 LIKE_ARTICLE 좋아요 했다는 뜻</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'LIKE_ARTICLE'</span><span class=\"token punctuation\">,</span> articleId<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// 이름이 Mary고 id가 3인 유저의 정보를 가져오는 걸 성공했다는 뜻</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_USER_SUCCESS'</span><span class=\"token punctuation\">,</span> response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// Redux라는 text를 TODO리스트에 ADD 했다는 상태는 알려주는 것 </span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Redux'</span> <span class=\"token punctuation\">}</span> </code></pre></div>\n<h3 id=\"reducer\" style=\"position:relative;\"><a href=\"#reducer\" aria-label=\"reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reducer</h3>\n<p>이전 state와 action object를 받은 후에 next state를 리턴함\n<code class=\"language-text\">(previousState, action) => nextState</code></p>\n<h3 id=\"store\" style=\"position:relative;\"><a href=\"#store\" aria-label=\"store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store</h3>\n<p>전체적인 애플리케이션의 state을 감싸주는 역할\nstore내에는 많은 메소드들이 존재하며 그 메소드들을 이용해 모든 state를 관리할 수있음</p>\n<h1 id=\"setting-up-redux\" style=\"position:relative;\"><a href=\"#setting-up-redux\" aria-label=\"setting up redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up Redux</h1>\n<h2 id=\"리덕스-설치\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%84%A4%EC%B9%98\" aria-label=\"리덕스 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 설치</h2>\n<p>다운 받아야 할 Dependency들</p>\n<ol>\n<li>redux</li>\n<li>react-redux</li>\n<li>redux-promise</li>\n<li>redux-thunk\n<code class=\"language-text\">npm i redux react-redux redux-promise redux-thunk --save</code></li>\n</ol>\n<h2 id=\"리덕스-기본구조-생성\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EA%B8%B0%EB%B3%B8%EA%B5%AC%EC%A1%B0-%EC%83%9D%EC%84%B1\" aria-label=\"리덕스 기본구조 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 기본구조 생성</h2>\n<p>리덕스 store안에 모든 state를 관리하게 되는데 state를 변경 하려면 dispatch를 이용해서 action으로 변경 가능함</p>\n<p>근데 redux store에선 action이 오직 객체 형식이여야만 받을 수 있는데 객체형식으로 된 action이 아니라 promise 나 Function 형식으로 된것 도 받을 수 있기 때문에 redux-promise, redux-thunk를 미들웨어로 받아서 해결함. 즉, thunk와 promise 없이 redux사용시 에러발생</p>\n<p>redux-promise, redux-thunk: 리덕스를 잘 사용할 수 있게 도와주는 미들웨어 역할</p>\n<p>redux-thunk는 dispath한테 어떻게 function을 받는지 방법을 알려주고, redux-promise는 dispatch한테 어떻게 promise를 대처를 해야하는지 알려줌</p>\n<h2 id=\"리덕스-적용\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%A0%81%EC%9A%A9\" aria-label=\"리덕스 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 적용</h2>\n<p>(client/src/index.js)에서 어플리케이션이 시작되는거라 <App /> 에다가 redux를 연결시켜 줘야함</p>\n<ol>\n<li>이미 다운 받아놓은 dependency(react-redux) 에서 redux에서 제공하는 provider를 import</li>\n<li><App/>을 <Provider>로 감싸줘서 redux와 application을 연결시켜줌 </li>\n<li>provider 안에는 store를 넣어주는데 이 store안에다가 reducer 등 이것저것 넣어주는데 그 전에 미들웨어를 이용해야지 object 객체형태의 action 만 받는 store가 promise와 function도 받을 수 잇음</li>\n<li>applyMiddleware안에 미들웨어 2개를 넣어주고 redux에서 create store라는 걸 가져와 줘야함\n(원래는 store를 redux에서 생성시create store만 하지만 객체밖에 못받기 때문에 미들웨어들과 함께 생성해줌)</li>\n<li>store 만든 createStoreWithMiddleware을 Provider store={ 이 안에다가 넣어주고 그 안에 reducer와 REDUX<em>DEVTOOLS</em>EXTENSION__까지 넣어주면 어플리케이션에 리덕스가 연결이 됨</li>\n</ol>\n<p>(src/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> applyMiddleware<span class=\"token punctuation\">,</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> promiseMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-promise'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReduxThunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// client/src/_reducers/index.js를 import해옴 (index.js 안쳐도 자동으로 됨)</span>\n<span class=\"token keyword\">import</span> Reducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./_reducers'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> createStoreWithMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>promiseMiddleware<span class=\"token punctuation\">,</span> ReduxThunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>createStore<span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider\n        store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">createStoreWithMiddleware</span><span class=\"token punctuation\">(</span>Reducer<span class=\"token punctuation\">,</span>\n            window<span class=\"token punctuation\">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class=\"token operator\">&amp;&amp;</span>\n            window<span class=\"token punctuation\">.</span><span class=\"token function\">__REDUX_DEVTOOLS_EXTENSION__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/_reducers/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// store내 여러가지 state에 관한 리듀서들이 나눠져 있는걸 redux에서 가져온 combineReducers를 이용해 rootReducer로 하나로 합쳐줌</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> user <span class=\"token keyword\">from</span> <span class=\"token string\">'./user_reducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//로그인, 회원가입같은 인증에 관한 기능을 위한 user reducer </span>\n    user\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> rootReducer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/<em>reducers/user</em>reducer.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">AUTH_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../_actions/types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">case</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> loginSuccess<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> register<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> userData<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(client/src/_actions/types.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">LOGIN_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"login_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">REGISTER_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"register_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">AUTH_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"auth_user\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/<em>actions/usesr</em>action.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">AUTH_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loginUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/login'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/register'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/auth'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reference</p>","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React7/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React8/","nextSlug":"/Shop_React6/","prevSlug":"/Shop_React7/"}},"staticQueryHashes":["1073350324","2938748437"]}