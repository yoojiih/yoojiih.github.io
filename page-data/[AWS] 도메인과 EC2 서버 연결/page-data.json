{"componentChunkName":"component---src-templates-blog-template-js","path":"/[AWS] 도메인과 EC2 서버 연결/","result":{"data":{"cur":{"id":"3d5f01d5-de30-5185-9679-32cf122387bb","html":"<blockquote>\n<p>서비스는 개발이 다가 아니라 빌드 후 배포까지 하는게 진정한 완성이다\n서비스를 배포하기 위해서는 도메인이 필수\nIP로는 나타낼 수 없는 자신의 서비스에 대한 아이덴티티를 도메인을 통해 나타내는 것은 물론 사용자들도 편하게 서비스에 접근할 수 있음</p>\n</blockquote>\n<h1 id=\"도메인-취득\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%B7%A8%EB%93%9D\" aria-label=\"도메인 취득 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인 취득</h1>\n<ul>\n<li>무료로 도메인을 취득 할 수도 있었지만 실제 서비스를 운영한다고 가정하고 만들어본 프로젝트라\n유료 도메인을 사용함 (게다가 무료 도메인은 불안정하다는 단점이 존재함)</li>\n<li>유료 도메인은 가비아, 카페24, 고대디 등 유명한 도메인 구매 사이트에서 구매 가능하며\nAWS에서도 도메인 취득 가능하지만 국내 도메인 판매 업체에서 구매하는 것이 더 수월함(<a href=\"https://aws.amazon.com/ko/getting-started/tutorials/get-a-domain/\">공식문서 참고</a>) </li>\n<li>국내 도메인 판매 업체이며 경험상 만족도가 가장 높았던 유료 도메인인 <code class=\"language-text\">가비아</code>를 선택</li>\n<li>tip. 할인중인 도메인(ex. 도메인명.shop)을 이용 시 1년간 500원만 내면 됨 (이후엔 500원으로 이용 불가)</li>\n<li>네임서버를 입력하는 부분은 우선 해당 도메인업체의 네임서버를 이용한다고 표시해놓고\n이후에 AWS에서 네임서버를 받아 다시 수정해주면 됨</li>\n</ul>\n<hr>\n<h1 id=\"route53을-이용하여-도메인과-ec2-인스턴스-연결\" style=\"position:relative;\"><a href=\"#route53%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8F%84%EB%A9%94%EC%9D%B8%EA%B3%BC-ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%97%B0%EA%B2%B0\" aria-label=\"route53을 이용하여 도메인과 ec2 인스턴스 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Route53을 이용하여 도메인과 EC2 인스턴스 연결</h1>\n<ul>\n<li>Route53 : 도메인 등록(구입), DNS 라우팅(IP를 Domain과 연결), 상태 및 트래픽 확인을 제공하는 AWS 서비스</li>\n</ul>\n<h2 id=\"도메인-연결\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%97%B0%EA%B2%B0\" aria-label=\"도메인 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인 연결</h2>\n<ol>\n<li><code class=\"language-text\">Route 53</code> 서비스를 검색 후 선택</li>\n<li>왼쪽 사이드바의 <code class=\"language-text\">호스팅 영역</code>을 선택한 후 <code class=\"language-text\">호스팅 영역 생성</code>을 클릭</li>\n<li>구입한 도메인 이름을 입력 후 <code class=\"language-text\">생성</code> 클릭 시 레코드 세트 만들어짐</li>\n<li>생성된 레코드 세트 중 <code class=\"language-text\">NS 유형</code>을 선택하고 해당 값들을 복사 (ns-.org,net,co.uk,com 전부 다)</li>\n<li>도메인을 구입한 업체에 다시 들어가 해당 도메인관리에서 네임서버(NS)를 앞서 복사한 값으로 변경하여 줌</li>\n<li>위의 과정을 마치면 도메인과 Route53의 연결이 완료됨</li>\n<li>잘 연결되었는지 확인하려면 cmd에 <code class=\"language-text\">nslookup domainname.com</code> 명령어 입력해봄</li>\n</ol>\n<hr>\n<h2 id=\"ec2의-탄력적ip-생성\" style=\"position:relative;\"><a href=\"#ec2%EC%9D%98-%ED%83%84%EB%A0%A5%EC%A0%81ip-%EC%83%9D%EC%84%B1\" aria-label=\"ec2의 탄력적ip 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2의 탄력적IP 생성</h2>\n<blockquote>\n<p>탄력적 IP란\nAWS에서 제공하는 강력한 클라우드 컴퓨팅 EC2는 인스턴스를 키고 끌때마다 IP가 달라지게 됩니다\n따라서 클라이언트와 연동을 하거나 도메인을 연결하는 등 고정적인 IP가 필요한 서비스에서\n인스턴스를 재가동할때마다 IP가 바뀌는 문제가 발생할 수 있습니다\n이러한 문제를 해결해줄 수 있는 서비스가 바로 AWS의 elastic IP, 탄력적 IP입니다</p>\n</blockquote>\n<ol>\n<li><code class=\"language-text\">EC2</code> 서비스 접속</li>\n<li>왼쪽 사이브바 <code class=\"language-text\">네트워크 및 보안</code>에서 <code class=\"language-text\">탄력적 IP</code> -> <code class=\"language-text\">탄력적 IP 주소 할당</code>을 클릭</li>\n<li><code class=\"language-text\">Amazon의 IPv4 주소 풀</code>을 선택한 후 <code class=\"language-text\">할당</code>을 눌러주면 탄력적 IP 생성 완료</li>\n<li>이제 연결을 위해 사용할 <code class=\"language-text\">탄력적 IP</code>를 눌러주고 <code class=\"language-text\">탄력적 IP 주소 연결</code>을 클릭</li>\n<li><code class=\"language-text\">인스턴스</code>를 선택하고 탄력적IP를 할당해 줄 해당 인스턴스를 선택한 후에 <code class=\"language-text\">연결</code>을 클릭하면 연결한 인스턴스에 들어가서 할당된 탄력적 IP를 확인 가능</li>\n</ol>\n<h3 id=\"주의할-점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"주의할 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의할 점</h3>\n<p>탄력적IP를 프리티어 인스턴스에 연결을 해놓으면 비용이 청구되지 않지만 다음과 같은 상황들에서는 비용이 청구될 수 있으므로 주의가 필요함</p>\n<blockquote>\n<ol>\n<li>탄력적IP를 받고 어떤 인스턴스에도 연결하지 않는 경우</li>\n<li>프리티어가 아닌 유료 인스턴스에 연결하는 경우</li>\n<li>프리티어 인스턴스에 연결해놓고 해당 인스턴스를 중지시키거나 삭제하여 탄력적 IP가 붕 뜨는 경우 (프리티어 사용자는 특히 주의)</li>\n</ol>\n</blockquote>\n<hr>\n<h2 id=\"ec2-인스턴스와-해당-도메인을-연결\" style=\"position:relative;\"><a href=\"#ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%99%80-%ED%95%B4%EB%8B%B9-%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%84-%EC%97%B0%EA%B2%B0\" aria-label=\"ec2 인스턴스와 해당 도메인을 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2 인스턴스와 해당 도메인을 연결</h2>\n<ol>\n<li><code class=\"language-text\">Route 53</code>에서 <code class=\"language-text\">레코드 세트 생성</code> 클릭 후 <code class=\"language-text\">A 유형</code>을 생성해줌 (별칭: <code class=\"language-text\">아니오</code> 선택)</li>\n<li>A유형(A-IPv4주소)의 레코드를 통해 EC2의 IP와 도메인을 연결하기 위해 값에는 <code class=\"language-text\">EC2의 탄력적 IP</code>를 입력함</li>\n<li>만약 도메인앞에 www. 를 붙여서 접속되기를 원한다면 다음과 같이 레코드세트를 하나 더 생성</li>\n<li><code class=\"language-text\">레코드 세트 생성</code> 클릭 후 이름에 <code class=\"language-text\">www</code> 입력, 값에 www를 제외한 해당 도메인 입력(example.com)</li>\n</ol>\n<p>Reference\n<a href=\"https://artiiicy.tistory.com/18\">artiiicy님 블로그</a></p>","excerpt":"서비스는 개발이 다가 아니라 빌드 후 배포까지 하는게 진정한 완성이다\n서비스를 배포하기 위해서는 도메인이 필수\nIP로는 나타낼 수 없는 자신의 서비스에 대한 아이덴티티를 도메인을 통해 나타내는 것은 물론 사용자들도 편하게 서비스에 접근할 수 있음 도메인 취득 무료로 도메인을 취득 할 수도 있었지만 실제 서비스를 운영한다고 가정하고 만들어본 프로젝트라\n유료 도메인을 사용함 (게다가 무료 도메인은 불안정하다는 단점이 존재함) 유료 도메인은 가비아, 카페24, 고대디 등 유명한 도메인 구매 사이트에서 구매 가능하며 \nAWS에서도 도메인 취득 가능하지만 국내 도메인 판매 업체에서 구매하는 것이 더 수월함(공식문서 참고)  국내 도메인 판매 업체이며 경험상 만족도가 가장 높았던 유료 도메인인 를 선택 tip. 할인중인 도메인(ex. 도메인명.shop)을 이용 시 1년간 500원만 내면 됨 (이후엔 500원으로 이용 불가) 네임서버를 입력하는 부분은 우선 해당 도메인업체의 네임서버를 이용한다…","frontmatter":{"date":"December 16, 2021","title":"AWS의 EC2인스턴스와 도메인 연결","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/[AWS] 도메인과 EC2 서버 연결/"}},"next":{"id":"352d02f7-0c0f-55c0-9cdd-c4286b0775d1","html":"<blockquote>\n<p>서비스는 개발이 다가 아니라 빌드 후 배포까지 하는게 진정한 완성이다</p>\n</blockquote>\n<p>프론트엔드 개발을 시작하기에 참 편한 시대이지만, localhost에서만 작동하는 서비스는 서비스로서 전혀 의미가 없다.\n프론트엔드 서비스가 사용자에게 서비스로서 다가가기 위해서는 서비스에 걸맞는 도메인 이름, 도메인으로 접근했을 때의 빠른 첫 화면 표시, 오류 없는 구동, HTTPS를 통한 안전한 통신 보장 등 갖추어야 할 조건이 상당히 많다.</p>\n<p>물론 많은 부분을 최소한의 설정으로 쉽게 해결해주는 vercel, netlify, github pages와 같은 SaaS 서비스를 이용할 수도 있지만\n이런 서비스들은 개발자나 사용자들의 요구사항에 맞게 조작하기엔 한계가 있기 마련이다\n그렇기에 프론트엔드뿐만 아니라 웹서비스의 개발을 위한 거의 모든 도구들을 최상의 자유도로 제공하는 IaaS 서비스중 하나인 AWS\n를 이용해 개발자가 스스로의 용도에 맞게 조립하기도 한다 </p>\n<p>필자는 SaaS 서비스를 이용해 블로그 글을 배포하고 있기 때문에 이번 쇼핑몰 프로젝트에선 IaaS를 사용해보고 싶기도 하고\nAWS를 이용한 배포를 배우는 것은 시간은 오래 걸릴지언정 프론트엔드뿐만 아닌 전반적인 컴퓨터과학적인 지식의 학습의 기회가 될 것이고,\n실제 서비스의 인프라에 대해 더욱 깊게 이해할 수 있는 기회가 될 것 같아 IaaS 서비스를 이용하고자 한다</p>\n<hr>\n<h2 id=\"프로젝트-환경\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%99%98%EA%B2%BD\" aria-label=\"프로젝트 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 환경</h2>\n<p>client: React</p>\n<p>server: Node.js, Express를 사용</p>\n<ul>\n<li>웹서버: NGINX 사용</li>\n<li>React로 만든 code를 build하여 정적 파일(html,css 등)을 웹 서버를 통해 제공하며\n, DB 연결과 비지니스 로직을 담당하고있는 Node.js 서버를 Reverse Proxy로 요청을 처리하고 있음</li>\n<li>디렉토리 구조\nprojectName/\nclient/\n/build\nserver/\nindex.js</li>\n</ul>\n<hr>\n<h2 id=\"git-배포-전략-브랜치-전략-지속적-통합배포cicd를-위한-git-workflow-전략\" style=\"position:relative;\"><a href=\"#git-%EB%B0%B0%ED%8F%AC-%EC%A0%84%EB%9E%B5-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9%EB%B0%B0%ED%8F%ACcicd%EB%A5%BC-%EC%9C%84%ED%95%9C-git-workflow-%EC%A0%84%EB%9E%B5\" aria-label=\"git 배포 전략 브랜치 전략 지속적 통합배포cicd를 위한 git workflow 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git (배포 전략, 브랜치 전략, 지속적 통합/배포(CI/CD)를 위한 git workflow 전략)</h2>\n<p>릴리즈를 위한 branch를 생성하고 checkout하기 위해</p>\n<ul>\n<li>\n<p>브랜치 생성 (git branch 브랜치명)</p>\n<ul>\n<li>ex) git branch RB_1.0 master</li>\n<li>첫번째 매개변수는 생성하려는 브랜치명이고 두번째는 분기해 나올 브랜치명이라 master 브랜치에서 RB_1.0이라는 브랜치를 생성함 (RB는 릴리스 브랜치의 약어)</li>\n</ul>\n</li>\n<li>브랜치 이동 (git checkout 브랜치명)</li>\n<li>-b 옵션을 넣으면 브랜치 작성과 체크아웃을 한꺼번에 실행 가능\n<code class=\"language-text\">git checkout -b release-1.0.0</code></li>\n<li>\n<p>나중에 재배포시 밑의 명령어들을 차례로 입력해 github에 업로드 해 줌 (나중에 AWS환경에서 코드를 쉽게 가져올 수 있게함)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit -am <span class=\"token string\">\"커밋 내용\"</span>\n<span class=\"token function\">git</span> checkout master\n<span class=\"token function\">git</span> merge release-1.0.0\n<span class=\"token function\">git</span> push origin master</code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"serverindexjs\" style=\"position:relative;\"><a href=\"#serverindexjs\" aria-label=\"serverindexjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>server/index.js</h2>\n<ul>\n<li>PORT 설정</li>\n<li>static 설정</li>\n<li>\n<p>index.html 연결해줌</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">5000</span>\n<span class=\"token comment\">// key.js 파일 내부에서 product 모드이면</span>\n<span class=\"token comment\">// process.env에서 키를 참조하고,</span>\n<span class=\"token comment\">// dev 모드이면 dev.js 파일에서 참조하도록 설정함</span></code></pre></div>\n</li>\n</ul>\n<p>// 개발환경 분리(로컬 vs 배포모드)\nconst config = require(“./config/key”);\n// /client/build 폴더를 static 파일로 사용할 수 있도록 함</p>\n<p>// Serve static assets if in production\nif (process.env.NODE_ENV === “production”) {</p>\n<p>  // Set static folder\napp.use(express.static(“client/build”));</p>\n<p>  // index.html for all page routes 요청\napp.get(”*”, (req, res) => {\nres.sendFile(path.resolve(__dirname, “../client”, “build”, “index.html”));\n});\n}\napp.listen(PORT, () => console.log(<code class=\"language-text\">port ${PORT}</code>));</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-----------------------------------------\n\n## AWS에 배포\n\n# EC2: Elastic Compute Cloud \n# AWS: Amazon Web Services\n\n## AWS EC2란\n- AWS에서 제공하는 클라우드 컴퓨팅 서비스 (가상 컴퓨팅 환경)\n- 이 서비스를 통해 아마존이 각 세계에 구축한 데이터 센터의 서버용 컴퓨터들의 자원을 원격으로 사용 가능\n- AWS가 제공하는 URL(Public DNS)를 통해 이 컴퓨터에 접근 가능\n\n## EC2의 장점\n\n용량을 늘리거나 줄일 수 있다. (탄력성)\n사용한 만큼 지불하므로 저렴하다.\n사용자가 인스턴스를 완전히 제어할 수 있다.\n보안 및 네트워크 구성, 스토리지 관리 효과적이다.\n\n--------------------------\n\n## 배포 준비\n프로젝트를 통째로 EC2 인스턴스에 NginX를 설치해 업로드 하는 것이 아니라 번들러를 이용해 하나의 파일로 묶어서 업로드 해야 한다.\n번들러 사용 시 최초 요청 완료 시간이 더 빠름\n##  번들러 설치 및 설정\n### 번들러 역할\n- 웹 서비스 배포 시, 수 많은 모듈로 분리 된 JS 파일들을 종속성에 따라 하나의 파일로 묶어줌\n- 내장 된 트랜스파일러로 자바스크립트 최신 문법을 ES5버전으로 `트랜스파일링` 해줌\n- 가독성을 위해 작성 되었던 여백 등을 지워주면서 파일의 크기를 줄여주는 기능 제공\n\n## 번들러 종류\n수 많은 종류의 번들러들이 있지만 그 중 이 세가지가 가장 많이 쓰인다\n- Webpack : 다양한 서드파티 필요 시 사용\n- Parcel : 작은 규모의 프로젝트, 간단한 설정에 적합\n- Rollup\n근데 CRA로 프로젝트를 생성 시 webpack이 자동으로 설정되어있어 이 경우 굳이 신경 안써도 됨\n\n------------------------------\n\n## React와 Express 서버의 작동방식\nReact 앱과 Express서버는 접속 포트가 다르기에 각자 개별적으로 동작해 localhost:3000과 localhost:5000에서 접근 가능함\n\n(물론 React는 Express가 아닌 자체 서버를 사용하고 있기 때문에 이 상태로도 React 앱 개발 가능함)\n\n근데 이렇게 된다면 React와 Express간의 통신이 굉장히 번거롭기 때문에 Express 서버에서 바로 리액트 앱을 유저에게 보여주는 형태로 만들어 줌\n\n## React Build 파일을 Express 서버 위에서 돌리기.\n\n- `cd client &amp;&amp; npm build`를 통해 /client/build에 React build 파일을 생성\n\n- `client % npx serve -s build`\n\n- nodemon app을 통해 express 서버를 실행시킨 후 웹브라우저에 접속해 보면 localhost:5000 을 통해 리액트 빌드 파일이 보여짐\n\n## Concurrently &amp; http-proxy-middleware\n이렇게 매번 npm build를 수행해 개발을 진행하게 되면 최종 결과물이 Express 서버를 통해 나타나는 장점이 있지만 \n\nReact 개발을 하고 변동사항이 있을 때 마다 npm build를 통해 빌드한 후에나 React 변경사항을 확인가능하다.\n\n그렇기 때문에 이 번거로움을 해결하기 위해 concurrently를 통해 Webpack서버와 Express 서버를 동시에 실행시키고, http-proxy-middleware를 통해 두 서버에 프록시를 구성함\n\n이렇게 되면 결과적으로 개발 단계에서 두 서버가 따로 작동하도록 개발함에도 배포단계와 최대한 비슷한 느낌을 가져올 수 있음\n\n- Concurrently &amp; http-proxy-middleware 설치\n`npm i concurrently` \n`cd client &amp;&amp; npm i http-proxy-middleware` \n\n- Concurrently: 한 개의 터미널에서 두 개의 서버 작동이 가능하도록 해줌\n- package.json의 scripts 수정\n```json\n  \"scripts\": {\n    \"start\": \"node server/index.js\",\n    \"backend\": \"nodemon server/index.js\",\n    \"frontend\": \"npm run front --prefix client\",\n    \"dev\": \"concurrently \\\"npm run backend\\\" \\\"npm run start --prefix client\\\"\",\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },</code></pre></div>\n<p>이후 터미널에 <code class=\"language-text\">npm run dev</code>를 실행</p>\n<ul>\n<li>http-proxy-middleware: localhost:3000와 5000 사이에 프록시를 구성하여 두 서버가 하나의 서버인 것처럼 작동하게 만들어줌</li>\n<li>proxy: 특정 요청이 들어오면 용도에 맞게 서버를 연결해주는 역할을 하는 것</li>\n</ul>\n<p>/client/src/setupProxy.js </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createProxyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http-proxy-middleware\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">createProxyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      target<span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:5000\"</span><span class=\"token punctuation\">,</span>\n      changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 되면 http-proxy-middleware가 setupProxy.js를 인식하기 때문에 localhost:3000/api 이하의 경로로 시작되는 요청이 <a href=\"http://localhost:5000/api\">http://localhost:5000/api</a> 에서 처리됨</p>\n<p>이후 터미널에 <code class=\"language-text\">npm run dev</code>를 실행해 proxy created… 관련 내용 뜨면 성공</p>\n<hr>\n<h1 id=\"amazon-ec2-생성-가상-머신-시작\" style=\"position:relative;\"><a href=\"#amazon-ec2-%EC%83%9D%EC%84%B1-%EA%B0%80%EC%83%81-%EB%A8%B8%EC%8B%A0-%EC%8B%9C%EC%9E%91\" aria-label=\"amazon ec2 생성 가상 머신 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Amazon EC2 생성 (가상 머신 시작)</h1>\n<p>인스턴스(가상 컴퓨터)를 생성하여 AWS가 제공하는 컴퓨터를 임대해 대신 돌림</p>\n<h2 id=\"초기-셋팅\" style=\"position:relative;\"><a href=\"#%EC%B4%88%EA%B8%B0-%EC%85%8B%ED%8C%85\" aria-label=\"초기 셋팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기 셋팅</h2>\n<ul>\n<li>도메인 구매 (가바아)</li>\n<li>react앱을 build로 배포버전 생성함 </li>\n<li>형성된 build 폴더를 git에 push</li>\n<li>aws 접속 후 로그인</li>\n<li>리전 ‘서울’로 변경</li>\n<li>EC2 서비스 클릭</li>\n</ul>\n<h2 id=\"인스턴스-시작\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%8B%9C%EC%9E%91\" aria-label=\"인스턴스 시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스 시작</h2>\n<ul>\n<li>Ubuntu Server 20.04 LTS (HVM), SSD Volume Type - ami-0f8b8babb98cc66d0 (64비트 x86) / ami-00e9c733a0bb11ca4 (64비트 Arm), x86 선택, “프리 티어 사용 가능”</li>\n<li>리눅스 OS(오픈소스-무료)계열 중에 우분투 사용 -> 보편적이기 때문에 자료가 많음</li>\n<li><code class=\"language-text\">t2.micro</code> 선택 후 <code class=\"language-text\">검토 및 시작</code> 버튼 클릭</li>\n<li>인스턴스 시작</li>\n<li>키페어 선택 or 생성 (생성 선택)</li>\n<li>키페어는 프로젝트를 배포하기 위해 컴퓨터 원격조작 및 설치등의 작업을 할때 원격조작을 하러 들어가기 위한 키이다 (안전한 위치에 저장해 둠)</li>\n<li>키페어 이름: web_dev</li>\n<li>키페어 다운로드 클릭 후 인스턴스 보기 버튼 클릭 </li>\n<li>실행중이라고 뜨면 인스턴스가 정상작동 중인 것 (EC2를 1년간만 무료로 제공하기 때문에 잠깐 사용할 용도면 나중에 인스턴스 중지 및 종료를 해둠)</li>\n<li>인스턴스 중지 및 종료해둠</li>\n<li>퍼블릭 IPv4 주소: 3.36.69.146 </li>\n</ul>\n<h2 id=\"보안-그룹-설정\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88-%EA%B7%B8%EB%A3%B9-%EC%84%A4%EC%A0%95\" aria-label=\"보안 그룹 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안 그룹 설정</h2>\n<ul>\n<li>규칙 추가를 눌러 HTTP, HTTPS를 추가해줌 (SSH, HTTP, HTTPS)</li>\n</ul>\n<h2 id=\"elastic-ip-탄력적-ip\" style=\"position:relative;\"><a href=\"#elastic-ip-%ED%83%84%EB%A0%A5%EC%A0%81-ip\" aria-label=\"elastic ip 탄력적 ip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elastic IP (탄력적 IP)</h2>\n<p>만약 인스턴스를 중단했다가 재실행할 상황이 생긴다면, 부여된 public IPv4가 변경되기 때문에\n도메인을 연결해 배포하려면 꼭 탄력적 IP를 설정해줘야함</p>\n<ul>\n<li>모든 서비스 > 컴퓨팅 > EC2 > 네트워크 및 보안 > 탄력적 IP 로 들어감</li>\n<li>탄력적 IP 주소 할당을 눌러 생성해줌</li>\n<li>생성한 IP를 선택하고 작업 > 탄력적 IP 주소 연결을 눌러줌</li>\n<li>아까 생성한 인스턴스를 선택하고 연결해주면 인스턴스의 Public IPv4가 탄력적 IP로 바뀌어 있음</li>\n</ul>\n<h2 id=\"aws-ec2-인스턴스-보안-설정\" style=\"position:relative;\"><a href=\"#aws-ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%B4%EC%95%88-%EC%84%A4%EC%A0%95\" aria-label=\"aws ec2 인스턴스 보안 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS EC2 인스턴스 보안 설정</h2>\n<p>인스턴스에서 어떤 포트를 개방할 지 설정해야 node app.js로 서버를 실행시켜 3.36.69.146:3000으로 접속 가능</p>\n<p>인스턴스 리스트 페이지에서 해당 인스턴스를 체크를 한 후, Security groups에 첫 번째 항목에 이름을 기억해 Security Groups 페이지로 이동</p>\n<p>Security groups에 첫 번째 항목 이름과 일치하는 항목을 체크해주고 <code class=\"language-text\">Edit inbound rules</code>를 클릭</p>\n<p>사용할 포트 넘버(Port range)를 입력 후, <code class=\"language-text\">Save rules</code>를 클릭</p>\n<h2 id=\"인스턴스-액세스-방법\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%95%A1%EC%84%B8%EC%8A%A4-%EB%B0%A9%EB%B2%95\" aria-label=\"인스턴스 액세스 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스 액세스 방법</h2>\n<h3 id=\"ssh-원격-접속-준비-웹-서버-설치-및-설정\" style=\"position:relative;\"><a href=\"#ssh-%EC%9B%90%EA%B2%A9-%EC%A0%91%EC%86%8D-%EC%A4%80%EB%B9%84-%EC%9B%B9-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%84%A4%EC%A0%95\" aria-label=\"ssh 원격 접속 준비 웹 서버 설치 및 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSH 원격 접속 준비 (웹 서버 설치 및 설정)</h3>\n<p>인스턴스 환경에 접속해 코드를 다운받고 배포해야 하기 위해 먼저 ssh로 접속함</p>\n<ul>\n<li>SSH 클라이언트 열기</li>\n<li>프라이빗 키 파일(AwsKeyPair.pem)을 찾음</li>\n<li>터미널 켜고 pem 키가 있는 폴더로 이동 (AWS에서 키파일을 ~/.ssh 경로에 넣는 것을 권장하고 있음)</li>\n<li>~/.ssh 디렉토리에 복사하는 이유는, 이후 ssh 실행 시 pem 키 파일을 자동으로 읽어 접속이 가능하기 때문</li>\n<li>\n<p>~/.ssh 경로에 넣으려면 </p>\n<blockquote>\n<p>먼저 이전에 생성된 key가 있는지 확인하기 위해 <code class=\"language-text\">cat ~/.ssh/id_rsa.pub</code>\n생성한 적이 없다면  No such file or directory 라고 뜰 것\nssh key 를 생성해주기 위해 <code class=\"language-text\">ssh-keygen</code> 입력 후 Generating public/private rsa key pair뜨면 따로 설정하지 않고 enter 쳐서 넘어감\n키 생성 기본 위치는 /Users/본인 컴퓨터명/.ssh 폴더에 파일이 생성됨 (/Users/yujihyeon/.ssh/id<em>rsa.)\n다시 `cat ~/.ssh/id</em>rsa.pub<code class=\"language-text\">실행해보면 \nAWS 인스턴스 생성 시 받은 pem 파일 복사 및 설정하기 위해 ~/.ssh 경로에 복사함\ncp pem 키의 경로/pem 키의 파일명 ~/.ssh/</code>cp Downloads/web_dev.pem ~/.ssh`\ncd ~/.ssh 로 이동 후 정상적으로 파일이 복사되었는지 확인</p>\n</blockquote>\n</li>\n<li>SSH가 작동하려면 키가 공개적으로 표시되지 않아야 함</li>\n<li>\n<p>키 파일을 사용하기 위해서는 접근모드를 400으로 바꿔줘야한다</p>\n<p><code class=\"language-text\">chmod 400 web_dev.pem</code></p>\n</li>\n<li>\n<p>터미널에서 퍼블릭 DNS(or IP)를 사용하여 내 (EC2)인스턴스에 연결하는 명령어 입력 (pem파일이 있어야 접근 가능) </p>\n<p><code class=\"language-text\">ssh -i \"web_dev.pem\" ubuntu@3.36.69.146</code> 로 접속</p>\n</li>\n<li>Are you sure you want to continue connecting (yes/no/[fingerprint]) -> yes 입력</li>\n<li>Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.11.0-1020-aws x86_64) 뜨면 인스턴스에 접속 성공</li>\n<li>맨 처음에는 3.36.69.146 주소로 들어가더라도 웹 서버가 없기 때문에 아무것도 작동하지 않음</li>\n</ul>\n<h2 id=\"web웹-서버-vs-was웹-어플리케이션\" style=\"position:relative;\"><a href=\"#web%EC%9B%B9-%EC%84%9C%EB%B2%84-vs-was%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\" aria-label=\"web웹 서버 vs was웹 어플리케이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WEB(웹 서버) vs WAS(웹 어플리케이션)</h2>\n<p>일단 서버 개발에 있어서 가장 기초적인 개념인 WEB와 WAS의 차이점을 알아보고자 한다</p>\n<h3 id=\"web\" style=\"position:relative;\"><a href=\"#web\" aria-label=\"web permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WEB</h3>\n<ul>\n<li>웹 브라우저 클라이언트(사용자)로부터 HTTP 요청(페이지 요청)을 받아 HTML 문서와 같은 웹 페이지를 반환하는 컴퓨터 프로그램 (정적 컨텐츠를 제공)</li>\n<li>정적 컨텐츠: 단순 HTML 문서, CSS, javascript, 이미지, 파일 등 즉시 응답가능한 컨텐츠</li>\n<li>웹 서버는 정적 컨텐츠만 제공하는 것이 아니라 동적 컨텐츠를 요청 받으면 WAS에게 해당 요청을 넘겨주고, WAS에서 처리한 결과를 클라이언트(사용자)에게 전달해주기도 함</li>\n<li>즉, 웹 서버는 단순한 html 페이지를 요청하고 불러올 때 사용하거나 리버스 프록시로서의 역할을 수행함</li>\n</ul>\n<h3 id=\"wasweb-application-servier\" style=\"position:relative;\"><a href=\"#wasweb-application-servier\" aria-label=\"wasweb application servier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WAS(Web Application Servier)</h3>\n<ul>\n<li>인터넷 상에서 HTTP 프로토콜을 통해 사용자 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어</li>\n<li>주로 동적 서버 컨텐츠를 수행하는 것으로 웹 서버와 구별이 되며, api를 사용해 데이터베이스에 접근하는 등 주로 데이터베이스 서버와 같이 수행 된다 (더 동적인 페이지 운영 시 사용)</li>\n<li>웹 서버와 웹 컨테이너가 합쳐진 형태로서, 웹 서버 단독으로는 처리할 수 없는 데이터베이스의 조회나 다양한 로직 처리가 필요한 동적 컨텐츠를 제공하기 때문에 사용자의 다양한 요구에 맞춰 웹 서비스를 제공 가능</li>\n<li>WAS는 JSP, Servlet 구동환경을 제공해주기 때문에 웹 서버가 보낸 JSP, PHP 등의 파일을 수행한 결과를 다시 웹 서버로 보내주는 웹 컨네이너 혹은 서블릿 컨테이너라고도 불림</li>\n<li>웹 서버 선택\n대표적인 웹서버: Apache와 NginX\n대표적인 WAS : Tomcat, Jeus, JBoss (node로도 간단한 웹 서버를 구현 가능)\nNode.js는 http 모듈을 내장하고 있어서 아파치와 같은 별도의 웹서버가 필요없음\n그렇다고 WAS만 써도 되는건 아니다\nWAS는 DB 조회 및 다양한 로직을 처리하는 데 집중해야 한다.\n따라서 단순한 정적 컨텐츠는 웹 서버에게 맡기며 기능을 분리시켜 서버 부하를 방지한다.\n만약 WAS가 정적 컨텐츠 요청까지 처리하면, 부하가 커지고 동적 컨텐츠 처리가 지연되면서 수행 속도가 느려지고 이로 인해 페이지 노출 시간이 늘어나는 문제가 발생하여 효율성이 크게 떨어진다.\n웹 서버를 WAS 앞에 두고 필요한 WAS들을 Web Server에 플러그인 형태로 설정하면 더욱 효율적인 분산 처리가 가능</li>\n</ul>\n<p>엔진엑스(Nginx)는 동시접속 처리에 특화된 웹 서버이다.</p>\n<p>트래픽이 많은 웹 사이트를 호스팅 하는데 주로 사용되는 가볍고 Apache보다 동작이 단순하며 강력하다.</p>\n<h2 id=\"web-service-architecture\" style=\"position:relative;\"><a href=\"#web-service-architecture\" aria-label=\"web service architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web Service Architecture</h2>\n<p>웹 어플리케이션은 요청 처리 방식에 따라 다양한 구조를 가질 수 있다.</p>\n<p>클라이언트(사용자)  →  Web Server  →  DB\n클라이언트(사용자)  →  WAS → DB\n클라이언트(사용자)  →  Web Server  →  WAS  →  DB</p>\n<h2 id=\"apache--vs--nginx--vs--nodejs\" style=\"position:relative;\"><a href=\"#apache--vs--nginx--vs--nodejs\" aria-label=\"apache  vs  nginx  vs  nodejs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apache  vs  Nginx  vs  Node.js</h2>\n<p>웹 사이트들중 34.0%가 NginX를 사용하지만 웹 서버들 모두 각 장단점을 갖고 있기 때문에 상황에 따른 적절한 선택이 필요하다\nnginx는 apache보다 동작이 단순하고 전달자 역할만 해 동시 접속에 특화 되어 있기 때문에 동시 접속자 수가 많을 것으로 예상이 되는 쇼핑몰에 적합하다고 여겨 Nginx로 선택했다</p>\n<h1 id=\"생성된-aws-ec2-인스턴스에-nodejs-서버-배포\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1%EB%90%9C-aws-ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-nodejs-%EC%84%9C%EB%B2%84-%EB%B0%B0%ED%8F%AC\" aria-label=\"생성된 aws ec2 인스턴스에 nodejs 서버 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성된 AWS EC2 인스턴스에 Node.js 서버 배포</h1>\n<p>EC2를 생성했던 이유를 되돌아보면 프로젝트를 배포하고 싶은 이유였던 것을 확인할 수 있다.</p>\n<p>코드를 서버에 띄우기</p>\n<ul>\n<li>관리자 계정(root)으로 접속\n<code class=\"language-text\">sudo su</code></li>\n<li>서버를 클론하기 전에 인스턴스에 기본적으로 깔려있는 git으로 Node.js와 npm을 설치\n(<code class=\"language-text\">git --version</code> 쳐서 설치 확인)</li>\n<li>\n<p>우선 패키지 최신버전으로 재설치</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade</code></pre></div>\n</li>\n<li>\n<p>AWS 인스턴스에서 Node.js 설치 - 이 서버를 사용해 Node.js 웹 애플리케이션을 호스팅할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># SSH를 사용하여 ec2-user로 Linux 인스턴스에 연결 &amp; nvm(노드 버전 관리자)을 설치</span>\n<span class=\"token function\">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh <span class=\"token operator\">|</span> <span class=\"token function\">bash</span>\n<span class=\"token comment\"># nvm 활성화</span>\n<span class=\"token builtin class-name\">.</span> ~/.nvm/nvm.sh\n<span class=\"token comment\">#  Node.js의 최신버전 설치 (Node.js 설치 시 npm(노드 패키지 관리자)도 설치되므로 필요에 따라 추가모듈 설치 가능)</span>\nnvm <span class=\"token function\">install</span> node\n<span class=\"token comment\"># Node.js가 올바르게 설치되고 실행되는지 테스트</span>\nnode -e <span class=\"token string\">\"console.log('Running Node.js ' + process.version)\"</span></code></pre></div>\n<p><a href=\"https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html\">공식문서 참고</a></p>\n<h2 id=\"오류-사항\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EC%82%AC%ED%95%AD\" aria-label=\"오류 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 사항</h2>\n<p>code EACCES npm ERR! syscall access npm ERR! path /home/ubuntu/React_Shop/client npm ERR! errno -13</p>\n</li>\n</ul>\n<p>Stockoverflow에서 나와 비슷한 문제를 겪고 있는 이의 질문을 찾아냈다. 그리고 아래와 같은 명령어를 사용해 설치시 버전이 맞지 않아 에러가 발생했다는 것을 알게되었다</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># sudo apt install nodejs</span>\n<span class=\"token comment\"># sudo apt install npm</span></code></pre></div>\n<h2 id=\"오류-해결\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0\" aria-label=\"오류 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 해결</h2>\n<p>nvm을 통해 프로젝트 진행시 사용했던 특정버전을 설치해줌</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">nvm <span class=\"token function\">install</span> <span class=\"token number\">14</span>\nnvm use <span class=\"token number\">14</span>\nnode version -<span class=\"token operator\">></span> v14.17.6</code></pre></div>\n<hr>\n<h2 id=\"프로젝트-clone\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-clone\" aria-label=\"프로젝트 clone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 Clone</h2>\n<ul>\n<li>이후 원하는 디렉토리에다 Node.js 서버(빌드파일 올렸던 git 파일)를 git clone 해줌</li>\n<li>앞서 배포용 git에 dist 파일을 올린 상태에서, AWS에서 EC2를 만들어서 git으로 해당 프로젝트를 clone 받음</li>\n<li><code class=\"language-text\">git clone 프로젝트url</code></li>\n</ul>\n<hr>\n<h2 id=\"프로젝트-디렉토리로-이동\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EB%A1%9C-%EC%9D%B4%EB%8F%99\" aria-label=\"프로젝트 디렉토리로 이동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 디렉토리로 이동</h2>\n<ul>\n<li><code class=\"language-text\">cd projectName</code></li>\n<li>client와 server로 폴더를 나눠놨기 때문에 각각의 폴더에서 node_modules를 설치해주고 (= 필요한 의존성들을 설치해줌)\nclient 폴더에서 react를 build 해줌</li>\n</ul>\n<h2 id=\"react-설치-후-실행\" style=\"position:relative;\"><a href=\"#react-%EC%84%A4%EC%B9%98-%ED%9B%84-%EC%8B%A4%ED%96%89\" aria-label=\"react 설치 후 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react 설치 후 실행</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> client\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token function\">npm</span> run build\n\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<h2 id=\"오류-발생--1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%B0%9C%EC%83%9D--1\" aria-label=\"오류 발생  1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 발생 -1</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">client에서 빌드 시 에러 발생</code></pre></div>\n<h2 id=\"오류-해결--1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0--1\" aria-label=\"오류 해결  1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 해결 -1</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo apt install xsel</code></pre></div>\n<h2 id=\"오류-발생--2\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%B0%9C%EC%83%9D--2\" aria-label=\"오류 발생  2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 발생 -2</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root경로의(두번째 npm install) npm install 시 오류발생    \n\nconfigure error  gyp ERR! stack Error: EACCES: permission denied, mkdir '/home/ubuntu/React_Shop/node_modules/bcrypt/build'</code></pre></div>\n<h2 id=\"오류-해결--2\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0--2\" aria-label=\"오류 해결  2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 해결 -2</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">github 리포지터리 들어가서 확인해본 결과 root경로에 node_modules 폴더가 git에 올라가있었는데 해당 프로젝트를 git clone 해왔기 때문에 발생함 \n\n즉시 clone한 프로젝트를 삭제하고 프로젝트 내 터미널에서 git rm --cached -r node_modules 후 그 프로젝트를 다시 새롭게 클론해줌</code></pre></div>\n<ul>\n<li>디렉토리 삭제 명령: <code class=\"language-text\">rm -r 디렉토리명</code></li>\n<li>파일 삭제 명령:  <code class=\"language-text\">rm abc.txt</code></li>\n</ul>\n<h2 id=\"서버-실행\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84-%EC%8B%A4%ED%96%89\" aria-label=\"서버 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 실행</h2>\n<ul>\n<li>\n<p>서버를 실행하기 전, production mode를 적용해주고 </p>\n<!-- `export NODE_ENV=production` -->\n</li>\n<li>\n<p>start를 하려면 build가 무조건 선행되어야한다.\n<code class=\"language-text\">npm start</code></p>\n<h2 id=\"오류-발생--1-1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%B0%9C%EC%83%9D--1-1\" aria-label=\"오류 발생  1 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 발생 -1</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Error: error:0308010C:digital envelope routines::unsupported\nat new Hash (node:internal/crypto/hash:67:19)\nat Object.createHash (node:crypto:130:10)\nat module.exports (/Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/util/createHash.js:135:53)\nat NormalModule._initBuildHash (/Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:417:16)\nat handleParseError (/Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:471:10)\nat /Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:503:5\nat /Users/user/Programming Documents/WebServer/untitled/node_modules/webpack/lib/NormalModule.js:358:12\nat /Users/user/Programming Documents/WebServer/untitled/node_modules/loader-runner/lib/LoaderRunner.js:373:3\nat iterateNormalLoaders (/Users/user/Programming Documents/WebServer/untitled/node_modules/loader-runner/lib/LoaderRunner.js:214:10)\nat iterateNormalLoaders (/Users/user/Programming Documents/WebServer/untitled/node_modules/loader-runner/lib/LoaderRunner.js:221:10)\n/Users/user/Programming Documents/WebServer/untitled/node_modules/react-scripts/scripts/start.js:19\nthrow err;\n^</code></pre></div>\n<h2 id=\"오류-해결--1-1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0--1-1\" aria-label=\"오류 해결  1 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 해결 -1</h2>\n<p><a href=\"https://jemerald.tistory.com/98?category=932089\">참고</a></p>\n</li>\n</ul>\n<p>터미널에 커맨드를 통해 환경변수를 설정하여 해결</p>\n<p><code class=\"language-text\">export NODE_OPTIONS=--openssl-legacy-provider</code> </p>\n<p>위 error는 node.js의 version이 맞지않아 발생하는 case이며, 17.0.~이상인 current version일 경우에 나타난다. 16.~ LTS version으로 변경해주면 해당 error case를 잡을 수 있다.</p>\n<h2 id=\"오류-발생--2-1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%EB%B0%9C%EC%83%9D--2-1\" aria-label=\"오류 발생  2 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 발생 -2</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dev.js 파일 없다고 에러남\nError: Cannot find module './dev'</code></pre></div>\n<h2 id=\"오류-해결--2-1\" style=\"position:relative;\"><a href=\"#%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0--2-1\" aria-label=\"오류 해결  2 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오류 해결 -2</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.gitignore 파일 내 포함되어있었기 때문에 따로 dev.js 파일을 생성해줘야함</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> server\n<span class=\"token builtin class-name\">cd</span> config\n<span class=\"token function\">cat</span> <span class=\"token operator\">></span> dev.js\nmodule.exports <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>mongoURI:<span class=\"token punctuation\">..</span>. 이하 생략\nctrl + c <span class=\"token punctuation\">(</span>종료하는 단축키<span class=\"token punctuation\">)</span></code></pre></div>\n<p>코드가 안들어가있다면 vi 편집기를 통해 다시 넣어줌 </p>\n<ol>\n<li>vi dev</li>\n<li>i 키를 누르면 왼쪽하단에 —INSERT— 라고 뜸</li>\n<li>텍스트를 입력</li>\n<li>텍스트 입력이 완료되었으면 esc를 눌러서 명령어 모드로 바꿈</li>\n<li>:wq를 입력해서 파일의 데이터를 저장후 vi편집기를 빠져나옴</li>\n</ol>\n<p>인스턴스의 퍼블릭 IPv4 (DNS)로 접속했을 때 제대로 뜬다면 성공\n-> <code class=\"language-text\">3.36.69.146:3000</code> URL로 이동 시 개발한 프로젝트가 뜸</p>\n<hr>\n<h2 id=\"pm2\" style=\"position:relative;\"><a href=\"#pm2\" aria-label=\"pm2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pm2</h2>\n<p>현재는 server에서만 npm start를 한 거라 server만 켜져있는 상태라 브라우저 상에<code class=\"language-text\">Cannot GET /</code> 만 뜸</p>\n<p>그래서 client에서 실행하려면 server는 pm2로 실행 해줘야함</p>\n<h3 id=\"pm2란\" style=\"position:relative;\"><a href=\"#pm2%EB%9E%80\" aria-label=\"pm2란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pm2란</h3>\n<p>PM2는 Node.js 프로세스 관리 도구로서 IBM, Microsoft, Paypal 등의 유명 기업에서도 사용하고 있다. </p>\n<p>다양한 기능을 지원하지만 가장 큰 특징으로는 역시 Cluster 모드일 것이다. </p>\n<p>자바스크립트는 싱글 스레드로 앱을 실행하지만 PM2는 Node.js의 Cluster 모듈을 사용해서 서버 앱에 복수의 인스턴스가 같은 포트를 사용하게 할 수 있도록 해준다.</p>\n<p>Node.js의 다중 프로젝트를 실행하고 관리하기 위한 관리 툴</p>\n<p>이를 통해 사용량에 따라 CPU 점유율 늘리고 줄이면서 앱의 안정성을 높일 수 있다.</p>\n<ul>\n<li>pm2에서 간단하게 살펴보자면 pm2는 서버를 실행 후 터미널에서 인스턴스를 나올려면 어쩔 수 없이 서버를 꺼야하지만, pm2 설치 시 실행 후 status가 online이면 ubuntu 터미널을 닫아도 서버가 종료되지 않고 계속 실행됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># pm2 설치 - Node 패키지 매니저인 npm을 통해서 간단하게 설치 가능</span>\n<span class=\"token comment\"># PM2는 여러 프로젝트에서 사용하므로 기본적으로 글로벌 셋팅으로 설치하는 것을 권장</span>\n<span class=\"token comment\"># (전역 설치시 sudo 권한으로 설치해줘야함 원래는 npm install pm2)</span>\n<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g pm2<span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># 설치 후 index.js가 있는 폴더로 이동해 다음 명령 실행해줌 </span>\n<span class=\"token variable\"><span class=\"token variable\">`</span>pm2 start server/index.js<span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># --watch 옵션 추가 시 Node.js소스가 수정되면 자동으로 해당 내용으로 서비스를 재시작해 내용을 갱신</span>\n<span class=\"token variable\"><span class=\"token variable\">`</span>pm2 start server/index.js --watch<span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># 모니터링</span>\n<span class=\"token comment\"># list: 현재 상태를 시각화, monit: 실시간 상태 확인</span>\n<span class=\"token variable\"><span class=\"token variable\">`</span>pm2 list<span class=\"token variable\">`</span></span>\n<span class=\"token variable\"><span class=\"token variable\">`</span>pm2 monit<span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># 프로세스 중지</span>\n<span class=\"token variable\"><span class=\"token variable\">`</span>pm2 stop server/index.js<span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># 중단</span>\n<span class=\"token variable\"><span class=\"token variable\">`</span>pm2 <span class=\"token function\">kill</span><span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># 콘솔 나갈 땐 </span>\n<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">exit</span><span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># 프로세스 재시작</span>\n<span class=\"token variable\"><span class=\"token variable\">`</span>pm2 restart server/index.js<span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># 프로세스 삭제</span>\n<span class=\"token variable\"><span class=\"token variable\">`</span>pm2 delete index.js<span class=\"token variable\">`</span></span><span class=\"token variable\"><span class=\"token variable\">`</span>\n<span class=\"token comment\"># 로그 확인 (현재 실행중인 로그 확인)</span>\n<span class=\"token variable\">`</span></span>pm2 logs`</code></pre></div>\n<h1 id=\"실행\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89\" aria-label=\"실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> client\n<span class=\"token function\">npm</span> start</code></pre></div>\n<hr>\n<h2 id=\"재접속-시-에러-발생\" style=\"position:relative;\"><a href=\"#%EC%9E%AC%EC%A0%91%EC%86%8D-%EC%8B%9C-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D\" aria-label=\"재접속 시 에러 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재접속 시 에러 발생</h2>\n<p>yujihyeon@MacBook-Air-2 .ssh % ssh -i “web_dev.pem” ubuntu@3.36.69.146\nssh: connect to host 3.36.69.146 port 22: Operation timed out</p>\n<h2 id=\"해결\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0\" aria-label=\"해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결</h2>\n<p>탄력적 ip를 설정해줬기 때문에 그 주소를 넣고 실행해야함\n접속 시\nssh -i “web<em>dev.pem” ubuntu@퍼블릭 IPv4 가 아닌\nssh -i “web</em>dev.pem” ubuntu@탄력적 ip 로 접속해야함!</p>\n<hr>\n<h2 id=\"웹-서버nginx-설치-및-환경-설정하기\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EC%84%9C%EB%B2%84nginx-%EC%84%A4%EC%B9%98-%EB%B0%8F-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"웹 서버nginx 설치 및 환경 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 서버(Nginx) 설치 및 환경 설정하기</h2>\n<p>Nginx를 통해 build된 React 프로젝트를 서버에 배포\n서버 컴퓨터에 파일만 올려서는 실행이 안되니 Apache나 Nginx 같은 웹서버를 설치해서 구동시켜 줘야한다</p>\n<ul>\n<li>ec2서버에 Nginx 설치 (apt로 설치 받음) - ubuntu 20.04에 Nginx 설치\n<code class=\"language-text\">sudo apt-get install nginx</code></li>\n<li>실행\n<code class=\"language-text\">sudo service start nginx</code>\nec2의 퍼블릭 IP 주소로 입력해서 들어갔을 때<code class=\"language-text\">welcom to nginx!</code>화면이 뜬다면 nginx 웹서버가 정상적으로 설치 되어 작동되고 있다는 뜻이다.</li>\n<li>nginx 시작\n<code class=\"language-text\">sudo service nginx start</code></li>\n<li>nginx 중지\n<code class=\"language-text\">sudo service nginx stop</code></li>\n<li>nginx 재시작\n<code class=\"language-text\">sudo service nginx restart</code></li>\n<li>nginx 구동되고 있는지 확인\n<code class=\"language-text\">ps-ef|grep nginx</code></li>\n<li>nginx에 빌드파일 연결하기\nnginx는 빌드된 파일을 사용하기 때문에 빌드 산출물을 생성해야 함\n<code class=\"language-text\">npm run build</code> (react의 경우 빌드 명령어)</li>\n<li>nginx 설정파일 수정</li>\n</ul>\n<h2 id=\"nginx-환경-설정\" style=\"position:relative;\"><a href=\"#nginx-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95\" aria-label=\"nginx 환경 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nginx 환경 설정</h2>\n<ul>\n<li>nginx의 설치가 끝나면 /etc/nginx 경로에 기본 화면으로 연결되는 Nginx 설정파일들이 이미 생성되어 있는데 우리가 만들 설정과 겹칠수 있기 때문에 모두 지워야 함 (default 파일 삭제)</li>\n<li>\n<p>/site-available 로 가서 default파일을 수정</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo rm /etc/nginx/sites-available/default\nsudo rm /etc/nginx/sites-enabled/default</code></pre></div>\n</li>\n<li>배포하고자 하는 프로젝트에 대한 Nginx 설정파일 생성</li>\n<li>\n<p>nginx에서 디폴트로 가지고 있는 설정 파일인 default.conf를 수정해도 되고, 새로운 .conf 파일을 생성해서 사용해도 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd /etc/nginx/sites-available\nsudo touch myapp.conf</code></pre></div>\n</li>\n<li>nginx에서 원하는 포트에 띄울 프로젝트의 경로를 설정함</li>\n<li>이 때, react 프로젝트를 빌드한 폴더 안의 index.html을 실행시키도록 경로를 설정</li>\n<li>\n<p>서버 안에 외부에서 React build 한 폴더를 직접 넣어줘도 되고, 서버 내에서 git으로 소스를 받아서 바로 build 해도 됨\n(myapp.conf)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n&lt;!-- listen80: port 80에 대한 설정을 의미 -->\nlisten 80;\n\n&lt;!-- location /: URL이 '/'가 포함된 경로에 대한 설정을 의미 -->\nlocation / {\n\n&lt;!-- root: 실행할 파일들의 루트 위치를 의미함(빌드한 파일 경로) -->\nroot   /home/user/hompage_youngbean-master/changwon_night/build;\n\n&lt;!-- index: 인덱스의 파일들을 지정하는 곳, 이 파일들 중 하나는 root 경로 내에 존재해야함-->\nindex  index.html index.htm;\n\n&lt;!-- try_files:  어떤 파일을 찾을 때 명시된 순서로 찾으며, 가장 먼저 발견되는 파일을 사용한다는 의미 -->\ntry_files $uri $uri/ /index.html;\n}\n}</code></pre></div>\n</li>\n<li>/etc/nginx/sites-available/에 설정 파일을 만들었으면, 아래 명령어로 이 파일의 심볼릭 링크를 /etc/nginx/sites-enabled/에도 만듦 </li>\n<li>웹서버가 동작될 때 sites-enabled에 있는 설정파일을 참조함</li>\n</ul>\n<p><code class=\"language-text\">sudo ln -s /etc/nginx/sites-available/myapp.conf /etc/nginx/sites-enabled/myapp.conf</code></p>\n<ul>\n<li>이로써 Nginx 의 환경설정이 모두 끝났으니 이제 Nginx를 실행하면 됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo systemctl stop nginx\nsudo systemctl start nginx</code></pre></div>\n<h1 id=\"nginx-재시작\" style=\"position:relative;\"><a href=\"#nginx-%EC%9E%AC%EC%8B%9C%EC%9E%91\" aria-label=\"nginx 재시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nginx 재시작</h1>\n<ul>\n<li>nginx로 띄우려는 React의 폴더 경로를 nginx 서버 설정 파일에 적용한 후 nginx 서비스를 재시작함</li>\n</ul>\n<p>`sudo service nginx restart<code class=\"language-text\"></code></p>\n<h1 id=\"완료\" style=\"position:relative;\"><a href=\"#%EC%99%84%EB%A3%8C\" aria-label=\"완료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완료</h1>\n<p>이제 EC2 public DNS주소롤 접속하면 웹 페이지가 잘 뜸(안 뜨면 포트번호가 EC2 인바운드 규칙에 설정되어있는지 확인해봄)</p>\n<p>Reference</p>\n<p><a href=\"https://blog.leehov.in/36\">leehov님 블로그</a>\n<a href=\"https://data-jj.tistory.com/31\">datajj님 블로그</a>\n<a href=\"https://codechasseur.tistory.com/25\">codechasseur님 블로그</a>\n<a href=\"https://velog.io/@hadam/React-Express-AWS-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-2\">hedam님 블로그</a>\n<a href=\"https://whiteknight3672.tistory.com/264\">whiteknight님 블로그</a>\n<a href=\"https://velog.io/@gwsyl22/git-branch-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%B2%B4%ED%81%AC%EC%95%84%EC%9B%83\">hyojinit님 블로그</a>\n<a href=\"https://zzang9ha.tistory.com/338\">zzzang9ha님 블로그</a>\n<a href=\"https://velog.io/@boori/React-Express-AWS-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\">boori님 블로그</a></p>","frontmatter":{"date":"December 15, 2021","title":"Shop Project_React 배포","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React14/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/[AWS] 도메인과 EC2 서버 연결/","nextSlug":"/Shop_React14/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}