{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React5/","result":{"data":{"cur":{"id":"be6a6ee8-7812-5786-b74c-23873709c50d","html":"<h1 id=\"react-js\" style=\"position:relative;\"><a href=\"#react-js\" aria-label=\"react js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React js</h1>\n<ul>\n<li>페이스북에서 제공하는 자바스크립트 라이브러리 오픈소스</li>\n<li>자바스크립트로 AJAX, HTML 조작 → 코드 多 / React, Angular, Vue 라이브러리 사용 → 간결한 코드</li>\n<li>Component 기반 구조\nComponent는 독립적인 단위의 소프트웨어 모듈을 말하며 컴포넌트로 이루어져 있어 재사용 성이 뛰어남 (컴포넌트 조립해서 사용)\nReact는 UI(View)를 여러 컴포넌트(component)를 쪼개서 만들기 때문에 전체 코드를 파악하기가 쉬우며 한페이지 내에서도 기능 단위로 캡슐화시켜 코드를 관리하기 때문에 재사용성이 높음\n컴포넌트만 import해 사용하면 되니까 코드 반복 입력할 필요없이 간편하며, 애플리케이션이 복잡해지더라도 코드의 유지보수, 관리가 용이함</li>\n<li>Virtural DOM\n예전에 RealDOM을 쓸 땐 하나만 업데이트 해도 전체를 다 reload했는데 이제는 virtural DOM 형태인 React를 사용해 Virtual DOM을 이용해서 처음에 스냅샷을 찍어 놓고 관찰해 바뀐 부분만을 찾아내서 RealDOM에서 이 부분만을 바꿔주기 때문에 훨씬 더 빠르게 한 부분만을 바꿀 수 있게 해줌</li>\n<li>UX가 뛰어나 좋은 사용자경험 제공</li>\n<li>HTML 관리 편함</li>\n<li>SPA(싱글 페이지 어플리케이션)나 iOS/Android 모바일 앱 제작 가능</li>\n<li>다른 페이지로 넘어가도 새로고침없이 스무스하게 동작하는게 모바일 앱이랑 비슷해 앱이라 부름</li>\n<li>React는 데이터 흐름이 한 방향으로만 흐르는 단방향 데이터 흐름을 가짐\n양방향 데이터 바인딩은 규모가 커질수록 데이터의 흐름을 추적하기가 힘들고 복잡해지는 경향이 있어, 단방향으로 복잡한 앱에서도 데이터 흐름에서 일어나는 변화를 보다 예측 가능할 수 있도록 함</li>\n<li>Props and State\nProps: 부모 컴포넌트에서 자식 컴포넌트로 전달해 주는 변경 불가능한 데이터 (props 전달해준 최상위 부모 컴포넌트만 props 변경 가능)\nState: 컴포넌트 내부에서 선언하며 내부에서 값을 변경 가능. 동적인 데이터를 다룰 때 사용 (사용자와의 상호작용을 통한 변경 시)</li>\n</ul>\n<h2 id=\"bable-webpack\" style=\"position:relative;\"><a href=\"#bable-webpack\" aria-label=\"bable webpack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bable, webpack</h2>\n<ul>\n<li>babel: 최신 자바스크립트 문법을 지원하지 않는 브라우저를 위해 최신 자바스크립트 문법을 구형 브라우저에서도 돌 수 있게 변환시켜줌</li>\n<li>webpack: 이전에 js,css,html 파일 몇개로만 웹사이트를 만들었을 때와 달리 규모가 점점 커지면서 많은 라이브러리, 프레임워크등을 쓰다보니 등장하게 된 것. 많은 모듈들을 하나의 웹팩을 이용해 bundle 해줌 (묶어줌)\nwebpack은 src폴더 내에만 관리해주고 public은 관리를 안해주기 때문에 이미지 파일 같은 것들을 앱에다 넣고 싶으면 src 안에다가 넣어야만  bundle 작용 가능</li>\n</ul>\n<h2 id=\"cra\" style=\"position:relative;\"><a href=\"#cra\" aria-label=\"cra permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRA</h2>\n<p>원래 리액트 앱을 처음 실행 시 webpack이나 babel 같은 것을 설정하기 위해서 엄청나게 많은 시간이 걸렸는데 이젠 CRA(create react app) Command로 바로 시작 가능\n<code class=\"language-text\">npx create-react-app .</code></p>\n<h1 id=\"npm-vs-npx\" style=\"position:relative;\"><a href=\"#npm-vs-npx\" aria-label=\"npm vs npx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm VS npx</h1>\n<p>요즘 대부분의 라이브러리에서 npx의 설치 방식을 공식문서에 소개하는 만큼 굉장히 자주 사용하는 도구이기에 해당 명령어가 어떤 의미를 가지고 있는지를 파악한 후 사용하는 것이 중요</p>\n<h2 id=\"npx란\" style=\"position:relative;\"><a href=\"#npx%EB%9E%80\" aria-label=\"npx란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npx란?</h2>\n<p>npx = Package Runner (실행)</p>\n<ul>\n<li>npx는 npm과 비교대상이 아닌 npm에서 제공하는 npm 레지스트리에 올라가있는 패키지를 쉽게 설치하고 관리할 수 있도록 도와주는 CLI 도구</li>\n<li>npm을 통해 설치하는 모든 종류의 Node.js 기반의 파일들을 굉장히 간단하게 설치하고 실행할 수 있게 도와줌</li>\n<li>npx는 해당 패키지를 실행만 되게 해주기 때문에 가벼움</li>\n</ul>\n<p>npm = Package Manager (관리) </p>\n<ul>\n<li>자바스크립트 패키지 관리 모듈 (Node Package Module)</li>\n<li>라이브러리 레지스트리(저장소)역할과 파일 build 시켜주는 역할을 함, npm에 관한 것은 package.json에 다 정의 되어있음</li>\n</ul>\n<p><code class=\"language-text\">npm install -g npx</code></p>\n<h2 id=\"등장한-이유\" style=\"position:relative;\"><a href=\"#%EB%93%B1%EC%9E%A5%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"등장한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>등장한 이유</h2>\n<p>과거 npm으로 패키지를 설치할 땐 전역으로 패키지를 설치해 의존성 라이브러리들을 전체적으로 관리하는 방법과 특정 프로젝트에만 의존성 라이브러리를 설치하는 방법이 존재했음\n이렇게 되면 패키지 업데이트 될 때 전역 따로 로컬 따로 업데이트 해야하기에 번거롭고 모듈 업데이트가 확인 불가하며 모듈 업데이트 변경으로 인한 다른 모듈 에러발생 등의 문제가 발생하는데 이를 해결하는 도구가 npx인 것\nnpx는 기존에 npm 설치 방법과는 다르게 일일이 설치, 실행, 제거를 할 필요 없이 일회성으로 원하는 패키지를 npm 레지스트리에 접근해서 실행시키고 설치하는 실행도구라\n패키지 설치 및 업데이트를 하지 않더라도 npm 레지스트리에 올라가 있는 최신 버전을 실행시키고 설치만 시키면 끝\n예를들어 원래는 create-react-app할 때 npm install -g create-react-app 이런식으로 global디렉토리에 다운받았었는데\n이제는 npx가 npm registry에서 create-react-app을 찾아서(look up) 굳이 다운로드 받지 않다도 실행 시켜줌</p>\n<h2 id=\"npx-이점\" style=\"position:relative;\"><a href=\"#npx-%EC%9D%B4%EC%A0%90\" aria-label=\"npx 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npx 이점</h2>\n<ol>\n<li>global로 컴퓨터에 다운받지 않아도 되니까 disk space를 낭비하지 않을 수 있음</li>\n<li>npm registry에 있는 create-react-app을 찾아서(look up)실행 시켜주는 거니까 항상 최신버전 사용 가능</li>\n</ol>\n<h2 id=\"사용\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9\" aria-label=\"사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용</h2>\n<ul>\n<li>npm run-script를 사용하지 않고 로컬에 설치된 패키지를 사용할 경우 npx A만 입력하면 로컬 devDependencies에 설치된 A 패키지를 바로 실행가능\n{\n“devDependencies”: {\n“A”: “^1.4.0”\n}\n}</li>\n<li>로컬에 존재하지 않는 패키지를 일회성 명령으로 원하는 패키지를 npm 레지스트리에 접근해 실행, 설치\nnpx는 우선적으로 로컬에 패키지가 설치되어있는지 파악한 후 패키지가 존재하지 않는다면, npm 레지스트리에서 해당 이름의 패키지가 자동으로 설치되고 호출됨\n그래서 패키지를 업데이트 하지 않아도 npm 레지스트리에 올라가 있는 최신 버전을 수행함</li>\n<li>gist-based scripts를 실행할 경우\n<code class=\"language-text\">npx gist 주소</code>\nGithub의 gist에 올라가 있는 스크립트를 npx를 사용해서 쉽게 실행 간으</li>\n<li>특정 노드 버전의 스크립트를 실행할 경우\nnode 패키지는 nvm, nave 또는 n과 같은 노드 버전 관리 도구를 사용하지 않고도 서로 다른 노드 버전을 사용하여 노드 명령을 매우 쉽게 쓸 수 있는 툴</li>\n</ul>\n<h2 id=\"react-구조\" style=\"position:relative;\"><a href=\"#react-%EA%B5%AC%EC%A1%B0\" aria-label=\"react 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 구조</h2>\n<ul>\n<li>index.js 파일:\nReactDOM.render(<App />, document.getElementById(‘root’));\npublic/index.html의  <div id=\"root\"></div> 부분에다가 보여주고 싶은 컴포넌트를 넣어주는데 App컴포넌트라고 정의를 해줌\n즉, app.js 페이지 렌더링 됨</li>\n</ul>\n<p>&#x3C; Src 폴더 내 > </p>\n<ul>\n<li>_actions, _reducer : Redux를 위한 폴더들</li>\n<li>components/views : Page들을 넣음 - Landing Page: 처음로딩되는 페이지에 관한 파일</li>\n<li>components/views/Sections : 해당 페이지에 관련된 css파일이나 component들을 넣음</li>\n<li>App.js: Routing 관련 처리 (페이지 별 분류)</li>\n<li>Config.js : 환경변수 정의</li>\n<li>hoc : Higher Order Component. 다른 컴포넌트를 갖는 function\n예를 들어 admin이라는 컴포넌트에 진입시 auth라는 hoc이 유저의 자격을 체크해서 컴포넌트에 진입 여부를 결정해 다음 액션을 취할 수있게 해줌\nauth 안에 여러 컴포넌트들을 넣어놓고 사용 가능 </li>\n<li>utils : 여러군데에서 쓰일 수 있는 것들을 이곳에 넣어 어디서든 쓸 수있게해줌</li>\n</ul>\n<h2 id=\"react-router-dom--페이지간-이동-\" style=\"position:relative;\"><a href=\"#react-router-dom--%ED%8E%98%EC%9D%B4%EC%A7%80%EA%B0%84-%EC%9D%B4%EB%8F%99-\" aria-label=\"react router dom  페이지간 이동  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Router Dom ( 페이지간 이동 )</h2>\n<p>Reference</p>\n<p><a href=\"https://webruden.tistory.com/275\">베이스 캠프</a>\n<a href=\"https://velog.io/@jini_eun/React-React.js%EB%9E%80-%EA%B0%84%EB%8B%A8-%EC%A0%95%EB%A6%AC\">Jini님 블로그</a></p>","excerpt":"React js 페이스북에서 제공하는 자바스크립트 라이브러리 오픈소스 자바스크립트로 AJAX, HTML 조작 → 코드 多 / React, Angular, Vue 라이브러리 사용 → 간결한 코드 Component 기반 구조\nComponent는 독립적인 단위의 소프트웨어 모듈을 말하며 컴포넌트로 이루어져 있어 재사용 성이 뛰어남 (컴포넌트 조립해서 사용)\nReact는 UI(View)를 여러 컴포넌트(component)를 쪼개서 만들기 때문에 전체 코드를 파악하기가 쉬우며 한페이지 내에서도 기능 단위로 캡슐화시켜 코드를 관리하기 때문에 재사용성이 높음\n컴포넌트만 import해 사용하면 되니까 코드 반복 입력할 필요없이 간편하며, 애플리케이션이 복잡해지더라도 코드의 유지보수, 관리가 용이함 Virtural DOM\n예전에 RealDOM을 쓸 땐 하나만 업데이트 해도 전체를 다 reload했는데 이제는 virtural DOM 형태인 React를 사용해 Virtual DOM을 이용해서 처음에 …","frontmatter":{"date":"November 15, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React5/"}},"next":{"id":"bc13ded1-996b-563c-9cf5-6bce01c09c20","html":"<h1 id=\"auth--인증-\" style=\"position:relative;\"><a href=\"#auth--%EC%9D%B8%EC%A6%9D-\" aria-label=\"auth  인증  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auth ( 인증 )</h1>\n<h2 id=\"auth-route-생성\" style=\"position:relative;\"><a href=\"#auth-route-%EC%83%9D%EC%84%B1\" aria-label=\"auth route 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>auth route 생성</h2>\n<p>페이지 이동 시 로그인 여부 및 관리자 여부(권한)등을 체크하기 위해 구현\n토큰 생성 후 토큰을 client 측에선 쿠키에다가 넣어주고 서버 측에서는 user database 에다가 넣어줬는데 이 두가지를 이용해 서로 토큰이 일치하는지 체크\n클라이언트에서 서버로 전달된 incode(암호화) 되어있는 token을 decode(복호화)해 user_id를 얻어내어 database user collection에서 유저를 찾은 후 쿠키에서 받아온 토큰이 유저도 갖고 있다면 인증 완료되는 구조\n토큰이 없거나 일치하지 않으면 인증실패\n토큰 일치시 인증 완료 그리고 해당하는 유저의 정보들을 선별해(아이디,이미지 등) front end측으로 보내줌\n(server/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> auth <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./middleware/auth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// auth라는 미들웨어를 추가 </span>\n<span class=\"token comment\">// 미들웨어: end point의 request를 받은 후 callback function을 하기 전 중간에 작업하기 위함</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/auth'</span><span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//여기 까지 미들웨어를 통과해 온 건 Authentication = True 라는 뜻</span>\n  <span class=\"token comment\">// 클라이언트에 authentication = ture 라는 정보를 전달해주기 위해 res.status(200)넣어주고 json데이터로 클라이언트에 원하는 유저 정보(server/models/User.js내 userSchema)를 제공해줌</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//middleware에서 req.user = user 해서 request에 넣어줬기 때문에 여기서 req.user._id 가능</span>\n    <span class=\"token comment\">//이렇게 정보를 주면 어떤 페이지에서든지 유저 정보를 이용 가능함</span>\n    _id<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 0이면 false 아니면 ture</span>\n    <span class=\"token comment\">// role 0 -> 일반유저   role 0이 아니면  관리자</span>\n    isAdmin<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>role <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    isAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    lastname<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>lastname<span class=\"token punctuation\">,</span>\n    role<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">,</span>\n    image<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>image\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>(server/models/middleware/auth.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../models/User'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// auth 정의</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">auth</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//인증 처리</span>\n    <span class=\"token comment\">// 1. cookie parser를 이용해 클라이언트 쿠키에서 토큰을 가져옴</span>\n    <span class=\"token comment\">// cookie를 넣을 때 x_auth라는 이름으로 넣었기 때문에 req.cookies.x_auth</span>\n    <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>x_auth<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2. 유저 모델{ User }을 불러 온 후 server/models/User.js에서 메소드를 만들어서 토큰을 복호화 한후 유저 찾음</span>\n    User<span class=\"token punctuation\">.</span><span class=\"token function\">findByToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 유저 없다면 클라이언트에  isAuth: false, error: true  정보 전해줌</span>\n        <span class=\"token comment\">// 즉 index.js내 findByToken메소드로 돌아가지 못하고 미들웨어 내에서 return해 빠져나가게 됨</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 유저 있다면 request token에다가 위에 받아온 token 넣어주고 </span>\n        req<span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> token<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// request user에다가도 user정보를 다 넣어준 후 </span>\n        req<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 미들웨어에서 다음으로 넘어갈 수 있게함</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//  request에다가 token과 user를 넣어주는 이유는 router(index.js)에서 request를 받을 때</span>\n<span class=\"token comment\">//  token과 user를 request에 넣어줌으로 인해 req.user시 미들웨어 내 구현한 user, token 정보를 사용하기 위함</span>\n\n\n<span class=\"token comment\">// 3. 유저가 있으면 인증 완료</span>\n<span class=\"token comment\">// 4. 유저가 없으면 인증 실패</span>\n\n<span class=\"token comment\">// auth를 다른 파일에서도 사용가능하도록 export - index.js에서 import</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> auth <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(server/models/User.js)\nfindByToken 메소드 생성해 복호화\n<a href=\"https://www.npmjs.com/package/jsonwebtoken\">공식문서 참고</a>\nverify a token symmetric</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">userSchema<span class=\"token punctuation\">.</span>statics<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">findByToken</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">token<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 가져온 토큰을 decode(복호화)할 땐 verify 사용</span>\n    <span class=\"token comment\">// 토큰 생성시 사용했던 secretToken을 넣어주면 decoded(디코드 된 결과물 = user_id)나옴</span>\n    jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">'secretToken'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> decoded</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// user_id 이용해서 유저를 찾은 다음 클라이언트에서 가져온 token과 DB에 보관된 토큰이 일치하는지 확인</span>\n        <span class=\"token comment\">// user 가져온 후 mongodb메소드인 findOne을 통해 user_id(decoded)과 token으로 찾음 </span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span> decoded<span class=\"token punctuation\">,</span> <span class=\"token string\">\"token\"</span><span class=\"token operator\">:</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// err와 user callback function을 주는데 만약 에러 있다면 callback으로 에러를 전달해줌</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 에러 없다면 user정보를 전달해주고 다시 미들웨어 auth.js에 가서 token과 err, user callback 써줌</span>\n            <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"로그아웃\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83\" aria-label=\"로그아웃 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그아웃</h1>\n<h2 id=\"logout-route-생성\" style=\"position:relative;\"><a href=\"#logout-route-%EC%83%9D%EC%84%B1\" aria-label=\"logout route 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>logout route 생성</h2>\n<ul>\n<li>\n<p>로그아웃 하려는 유저를 데이터베이스에서 찾아서 그 유저의 토큰을 지워줌\n인증 시 클라이언트 쿠키에 있는 토큰을 서버쪽 db에 있는 토큰과 같은지 확인을 함으로써 인증을 완료했었기 때문에\n로그아웃 시 토큰을 지워주면 인증실패해 로그인 기능이 풀려버림</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 로그인된 상태기 때문에 auth 미들웨어를 넣어줌</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/logout'</span><span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n<span class=\"token comment\">// User를 찾아서 업데이트</span>\n<span class=\"token comment\">// 첫번째 object: 유저를 찾을 땐 auth미들웨어에서 request에 넣어준 _id로 찾음</span>\nUser<span class=\"token punctuation\">.</span><span class=\"token function\">findOneAndUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> _id<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>_id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 두번재 object : 토큰을 지워줌</span>\n<span class=\"token punctuation\">{</span> token<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 마지막으로 callback function</span>\n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 에러 났다면 return Response json 데이터로  success: false와 error message 전달</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 성공 시 </span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    success<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"date":"November 14, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React4/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React5/","nextSlug":"/Shop_React4/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}