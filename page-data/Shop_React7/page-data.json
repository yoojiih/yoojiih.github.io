{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React7/","result":{"data":{"cur":{"id":"27781789-6db4-5953-b9a6-beb50fd40f68","html":"<h1 id=\"redux\" style=\"position:relative;\"><a href=\"#redux\" aria-label=\"redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h1>\n<p>상태(state) 관리 라이브러리</p>\n<p><a href=\"https://yoojiih.github.io/TIL_20211103/\">redux 참고</a></p>\n<h1 id=\"props-vs-state-react에서는-props와-state가-존재함\" style=\"position:relative;\"><a href=\"#props-vs-state-react%EC%97%90%EC%84%9C%EB%8A%94-props%EC%99%80-state%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%A8\" aria-label=\"props vs state react에서는 props와 state가 존재함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props VS State (React에서는 Props와 State가 존재함)</h1>\n<h2 id=\"propsproperties\" style=\"position:relative;\"><a href=\"#propsproperties\" aria-label=\"propsproperties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Props(properties)</h2>\n<p>부모 컴포넌트에서 자식컴포넌트로 데이터 내려줬을 때 데이터 변경 불가 (immutable)</p>\n<p>변경 시 부모컴포넌트에서 변경 후 다시 내려줘야함</p>\n<p><code class=\"language-text\">&lt;자식 컴포넌트명 messages={messages} currentMember={member} /></code></p>\n<h2 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State</h2>\n<p>부모 자식 간이 아닌 컴포넌트 내 데이터 교환 시 사용 </p>\n<p>컴포넌트 내에서도 충분히 state를 변하게 할 수 있으며 (mutable) 데이터 변화시 자동으로 리렌더링됨</p>\n<p><code class=\"language-text\">state = { message: '', attachFile: undefined, openMenu: false,};</code></p>\n<h2 id=\"redux-1\" style=\"position:relative;\"><a href=\"#redux-1\" aria-label=\"redux 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h2>\n<p>컴포넌트끼리 전달이 아니라 저장소를 두고 바로 꺼내서 사용해 훨씬 편하게 상태관리 할 수 있게됨</p>\n<ul>\n<li>Redux 데이터 flow (strict unidirectional(단방향) data flow)\n리덕스는 컴포넌트에서 시작 -> Dispatch(action) -> ACTION -> REDUCER -> STORE -> subscribe -> React Component로 다시 돌아옴</li>\n</ul>\n<h3 id=\"action\" style=\"position:relative;\"><a href=\"#action\" aria-label=\"action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action</h3>\n<p>무엇이 일어났는지 설명하는 객체 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// articleId 42을 LIKE_ARTICLE 좋아요 했다는 뜻</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'LIKE_ARTICLE'</span><span class=\"token punctuation\">,</span> articleId<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// 이름이 Mary고 id가 3인 유저의 정보를 가져오는 걸 성공했다는 뜻</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'FETCH_USER_SUCCESS'</span><span class=\"token punctuation\">,</span> response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Mary'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// Redux라는 text를 TODO리스트에 ADD 했다는 상태는 알려주는 것 </span>\n<span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'Redux'</span> <span class=\"token punctuation\">}</span> </code></pre></div>\n<h3 id=\"reducer\" style=\"position:relative;\"><a href=\"#reducer\" aria-label=\"reducer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reducer</h3>\n<p>이전 state와 action object를 받은 후에 next state를 리턴함\n<code class=\"language-text\">(previousState, action) => nextState</code></p>\n<h3 id=\"store\" style=\"position:relative;\"><a href=\"#store\" aria-label=\"store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store</h3>\n<p>전체적인 애플리케이션의 state을 감싸주는 역할\nstore내에는 많은 메소드들이 존재하며 그 메소드들을 이용해 모든 state를 관리할 수있음</p>\n<h1 id=\"setting-up-redux\" style=\"position:relative;\"><a href=\"#setting-up-redux\" aria-label=\"setting up redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up Redux</h1>\n<h2 id=\"리덕스-설치\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%84%A4%EC%B9%98\" aria-label=\"리덕스 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 설치</h2>\n<p>다운 받아야 할 Dependency들</p>\n<ol>\n<li>redux</li>\n<li>react-redux</li>\n<li>redux-promise</li>\n<li>redux-thunk\n<code class=\"language-text\">npm i redux react-redux redux-promise redux-thunk --save</code></li>\n</ol>\n<h2 id=\"리덕스-기본구조-생성\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EA%B8%B0%EB%B3%B8%EA%B5%AC%EC%A1%B0-%EC%83%9D%EC%84%B1\" aria-label=\"리덕스 기본구조 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 기본구조 생성</h2>\n<p>리덕스 store안에 모든 state를 관리하게 되는데 state를 변경 하려면 dispatch를 이용해서 action으로 변경 가능함</p>\n<p>근데 redux store에선 action이 오직 객체 형식이여야만 받을 수 있는데 객체형식으로 된 action이 아니라 promise 나 Function 형식으로 된것 도 받을 수 있기 때문에 redux-promise, redux-thunk를 미들웨어로 받아서 해결함. 즉, thunk와 promise 없이 redux사용시 에러발생</p>\n<p>redux-promise, redux-thunk: 리덕스를 잘 사용할 수 있게 도와주는 미들웨어 역할</p>\n<p>redux-thunk는 dispath한테 어떻게 function을 받는지 방법을 알려주고, redux-promise는 dispatch한테 어떻게 promise를 대처를 해야하는지 알려줌</p>\n<h2 id=\"리덕스-적용\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%A0%81%EC%9A%A9\" aria-label=\"리덕스 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 적용</h2>\n<p>(client/src/index.js)에서 어플리케이션이 시작되는거라 <App /> 에다가 redux를 연결시켜 줘야함</p>\n<ol>\n<li>이미 다운 받아놓은 dependency(react-redux) 에서 redux에서 제공하는 provider를 import</li>\n<li><App/>을 <Provider>로 감싸줘서 redux와 application을 연결시켜줌 </li>\n<li>provider 안에는 store를 넣어주는데 이 store안에다가 reducer 등 이것저것 넣어주는데 그 전에 미들웨어를 이용해야지 object 객체형태의 action 만 받는 store가 promise와 function도 받을 수 잇음</li>\n<li>applyMiddleware안에 미들웨어 2개를 넣어주고 redux에서 create store라는 걸 가져와 줘야함\n(원래는 store를 redux에서 생성시create store만 하지만 객체밖에 못받기 때문에 미들웨어들과 함께 생성해줌)</li>\n<li>store 만든 createStoreWithMiddleware을 Provider store={ 이 안에다가 넣어주고 그 안에 reducer와 REDUX<em>DEVTOOLS</em>EXTENSION__까지 넣어주면 어플리케이션에 리덕스가 연결이 됨</li>\n</ol>\n<p>(src/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> applyMiddleware<span class=\"token punctuation\">,</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> promiseMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-promise'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReduxThunk <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-thunk'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// client/src/_reducers/index.js를 import해옴 (index.js 안쳐도 자동으로 됨)</span>\n<span class=\"token keyword\">import</span> Reducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./_reducers'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> createStoreWithMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>promiseMiddleware<span class=\"token punctuation\">,</span> ReduxThunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>createStore<span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Provider\n        store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">createStoreWithMiddleware</span><span class=\"token punctuation\">(</span>Reducer<span class=\"token punctuation\">,</span>\n            window<span class=\"token punctuation\">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class=\"token operator\">&amp;&amp;</span>\n            window<span class=\"token punctuation\">.</span><span class=\"token function\">__REDUX_DEVTOOLS_EXTENSION__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/_reducers/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// store내 여러가지 state에 관한 리듀서들이 나눠져 있는걸 redux에서 가져온 combineReducers를 이용해 rootReducer로 하나로 합쳐줌</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> user <span class=\"token keyword\">from</span> <span class=\"token string\">'./user_reducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//로그인, 회원가입같은 인증에 관한 기능을 위한 user reducer </span>\n    user\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> rootReducer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/<em>reducers/user</em>reducer.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">AUTH_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../_actions/types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">case</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> loginSuccess<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> register<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> userData<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(client/src/_actions/types.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">LOGIN_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"login_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">REGISTER_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"register_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">AUTH_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"auth_user\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(client/src/<em>actions/usesr</em>action.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">AUTH_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loginUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/login'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/register'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/auth'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reference</p>","excerpt":"Redux 상태(state) 관리 라이브러리 redux 참고 Props VS State (React에서는 Props와 State가 존재함) Props(properties) 부모 컴포넌트에서 자식컴포넌트로 데이터 내려줬을 때 데이터 변경 불가 (immutable) 변경 시 부모컴포넌트에서 변경 후 다시 내려줘야함  State 부모 자식 간이 아닌 컴포넌트 내 데이터 교환 시 사용  컴포넌트 내에서도 충분히 state를 변하게 할 수 있으며 (mutable) 데이터 변화시 자동으로 리렌더링됨  Redux 컴포넌트끼리 전달이 아니라 저장소를 두고 바로 꺼내서 사용해 훨씬 편하게 상태관리 할 수 있게됨 Redux 데이터 flow (strict unidirectional(단방향) data flow)\n리덕스는 컴포넌트에서 시작 -> Dispatch(action) -> ACTION -> REDUCER -> STORE -> subscribe -> React Component로 다시 돌아옴 Act…","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React7/"}},"next":{"id":"42209f61-65e5-5c48-b348-40670b1df4b8","html":"<h1 id=\"login\" style=\"position:relative;\"><a href=\"#login\" aria-label=\"login permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Login</h1>\n<h1 id=\"구현사항\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84%EC%82%AC%ED%95%AD\" aria-label=\"구현사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현사항</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> 입력 폼에 email과 password를 입력가능하도록 state와 onChange이벤트 사용\n> \n> 입력시 매번 유효성 체크 &amp; 애니메이션 기능(Formilk,Yup)\n> React Hook Form</code></pre></div>\n<p>(client/src/components/views/LoginPage/LoginPage.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// useState를 react라이브러리에서 가져옴</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> loginUser <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../_actions/user_action'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">LoginPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 컴포넌트 내에서 데이터를 바꾸기 위해 state 사용 (타이핑 시 state를 바꿔줘야 value값이 바뀌는 로직)</span>\n    <span class=\"token comment\">// initialState = \"\" 빈칸</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Email<span class=\"token punctuation\">,</span> setEmail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 이벤트 핸들러 생성 후 파라미터로 event 넣어주고 타이핑 시 onChange라는 이벤트를 발생시켜서 setEmail을 이용해서 state를 바꾸면 value가 바뀌는 구조</span>\n    <span class=\"token comment\">// 그럼 입력한 것이 브라우저에 타이핑되어 보여질 수 있음</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onEmailHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 타이핑하는대로 입력칸 내 출력됨</span>\n        <span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onPasswordHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmitHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 버튼 누를 때마다 페이지 refresh 되기 때문에 밑에 코드를 실행 해주기 위해 refresh 방지용 코드 작성</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// state값을 서버에 보내야 해서 axios를 사용해 post라는 http 메소드를 통해 api/user/login에 Email, Password 값들을 넣어줘서 보내주기 위해 body로 묶어줌</span>\n        <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            email<span class=\"token operator\">:</span> Email<span class=\"token punctuation\">,</span>\n            password<span class=\"token operator\">:</span> Password\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// server/index.js의 login router쪽에 보내기 위한 코드</span>\n        <span class=\"token comment\">// login router내 /api/user/login와 똑같은 주소를 여기다가 작성</span>\n        <span class=\"token comment\">// Axios.post('/api/user/login', body) 이런식으로 end point와 body를 넣음</span>\n        <span class=\"token comment\">// .then(response => {...})</span>\n        <span class=\"token comment\">// 작성해 보낸 후 email과 password를 이용해서 로그인을 함</span>\n        <span class=\"token comment\">// server/index.js에서 User.findOne({ email: req.body.email }, (err, user) => {</span>\n        <span class=\"token comment\">// 여기서 email을 받은 걸 찾아(req.body.email)있다면 이메일과 비밀번호가 맞는지 여부 확인해 </span>\n        <span class=\"token comment\">// 맞으면 토큰을 생성해서 토큰을 쿠키에 저장한다음 클라이언트에다가 로그인 성공했으면 성공 메시지를 전해줌 </span>\n        <span class=\"token comment\">// 그래서 그 성공메시지를  .then(response로 받아서 여기서 처리할 거를 처리하면 됨</span>\n    \n        <span class=\"token comment\">// 근데 리덕스를 사용해야 하기 때문에 </span>\n        <span class=\"token comment\">// dispatch를 이용해서 이름이 loginUser인 action을 취한 후 리듀서로감 ( axios가 아닌 여기다가 이제 body 사용)</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">loginUser</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 다 완료가 된 후(리덕스에 저장)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 완료가 잘 됐으면 랜딩페이지(처음페이지, root페이지)로 이동 시켜줌</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>loginSuccess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        \n                    <span class=\"token comment\">// 리액트에서 페이지 이동 시킬땐 props.history.push를 이용함 (props은 function LoginPage(props)에 넣어줌)</span>\n                    <span class=\"token comment\">// 근데 history 쓸려면 history는 react-router-dom을 이용해서 쓰고있는 것이라서 </span>\n                    <span class=\"token comment\">// import { withRouter } from 'react-router-dom';  &amp; export default withRouter(LandingPage)를 써줘야 사용가능함</span>\n                    props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error˝'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> justifyContent<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span> alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span>\n            <span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>form style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> flexDirection<span class=\"token operator\">:</span> <span class=\"token string\">'column'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// form에다가 submit 이벤트를 등록해야 login버튼 눌렀을 때 </span>\n                onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmitHandler<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Email<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token comment\">// 위에서 정의한 state를 value로 넣어줌</span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Email<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onEmailHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Password<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Password<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onPasswordHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>\n                    Login\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>LoginPage<span class=\"token punctuation\">)</span></code></pre></div>\n<p>(server/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/login'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">//요청된 이메일이 데이터베이스에 있는지 찾는다.</span>\n  User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>email <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        loginSuccess<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">\"제공된 이메일에 해당하는 유저가 없습니다.\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//요청된 이메일이 데이터 베이스에 있다면 비밀번호가 맞는 비밀번호 인지 확인.</span>\n    user<span class=\"token punctuation\">.</span><span class=\"token function\">comparePassword</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> isMatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMatch<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loginSuccess<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"비밀번호가 틀렸습니다.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token comment\">//비밀번호 까지 맞다면 토큰을 생성</span>\n      user<span class=\"token punctuation\">.</span><span class=\"token function\">generateToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 쿠키에 토큰을 저장</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x_auth\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loginSuccess<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> userId<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">...</span></code></pre></div>\n<p>(client/src/<em>actions/usesr</em>action.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 위에서 body에 email과 password 넣어준 거(dispatch(loginUser(body))를 dataToSubmit라는 parameter를 통해 받타 </span>\n<span class=\"token comment\">// 위에서 하려고했던 request인 axios.post('/api/users/login', body)를 가져와서 여기서 함</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loginUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// request라는 변수에다가 지정해준 후 서버에다가 request를 날린 후 </span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/login'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// response 받은거에다가 .data => 이런식으로 서버에서 받은 데이터를 request 변수에다가 저장을 함</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 그 후 request변수를 리턴을 시켜서 state과 현재 action을 조합해서 그 다음 state를 만드는 역할을 하는 reducer로 보내줌</span>\n    <span class=\"token comment\">// action은 type과 response을 넣어줘야하니까 type이름은 LOGIN_USER, payload엔 request 변수를 넣어준 다음 reducer로 보냄</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>리듀서로 보내는 방법\n(client/src/<em>reducers/user</em>reducer.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 리듀서에서도 타입을 action_user_action에서 바로 가져오는게 아니라 return { type: LOGIN_USER, payload: request}</span>\n<span class=\"token comment\">// types.js에서 가져오기 위해 import해주고 previous state과 action을 가지고 next state를 리턴해줌</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">AUTH_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../_actions/types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// _action/user_action.js내 각각 다른 type들(ex.LOGIN_USER)에 맞는 조치를 취해주기위해 switch 문법을 이용해 처리</span>\n<span class=\"token comment\">// 현재 state는 비어있는 상태</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">LOGIN_USER</span><span class=\"token operator\">:</span>\n\n            <span class=\"token comment\">// 리턴 해줄 땐 비어있는 state를 spread operator를 통해 똑같이 가져와서</span>\n            <span class=\"token comment\">// _actions/user_aciton.js의 payload: request 변수를 리듀서의 loginSuccess: action.payload 에다가 넣어준 것</span>\n            <span class=\"token comment\">// request 변수 : backend server(node server)에서 가져온 모든 데이터임 response.data</span>\n            <span class=\"token comment\">// response.data: backend에선 로그 인 성공 시 .json({ loginSuccess: true, userId: user._id })가 들어감</span>\n            <span class=\"token comment\">// 즉, 결과로 user - loginSucess - loginSucess:ture userId: \"dfwkdfjlwkjld;fk\"</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> loginSuccess<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> register<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> userData<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 타입들만 관리하는 파일을 생성 -타입을 따로 지정해줌\n(client/src/_actions/types.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">LOGIN_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"login_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">REGISTER_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"register_user\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">AUTH_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"auth_user\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"에러사항\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC%EC%82%AC%ED%95%AD\" aria-label=\"에러사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러사항</h2>\n<ol>\n<li>회원가입 시 데이터베이스에 유저정보가 알맞게 잘 들어갔지만 로그인시 에러발생\n-> 회원가입 구현시 테스트할 때 email만 들어가고 다른 정보들은 들어가지 않아 코드 수정후 다시 전과 똑같은 이메일로 다시 회원가입을 시도 했기 때문에 데이터베이스에는 같은 이메일이 2개나 존재했던 것\n심지어 하나는 이메일만 들어가 있던 거라 에러 발생함.\n그래서 데이터베이스에서 중복된 이메일을 직접 삭제해줬더니 에러가 해결됨\n이로써 회원가입 시 이메일 중복체크의 필요성을 느끼게 되었다.</li>\n</ol>\n<p>Reference</p>","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React8/"}},"prev":{"id":"1feb9020-d0d2-5913-89d1-b498e3d8d188","html":"<h1 id=\"회원가입-기능\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EA%B8%B0%EB%8A%A5\" aria-label=\"회원가입 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 기능</h1>\n<h2 id=\"구현-목표\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%AA%A9%ED%91%9C\" aria-label=\"구현 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 목표</h2>\n<ul>\n<li></li>\n<li></li>\n<li>상품 리스트 페이지에서 “장바구니 담기” 버튼을 클릭하였을 때, nav bar 의 장바구니의 숫자가 올라가면서 장바구니 페이지에 담기게 할 수 있다.</li>\n</ul>\n<p>장바구니 페이지에서 삭제 버튼(휴지통 모양의 아이콘)을 클릭하였을 때, nav bar 의 장바구니 숫자가 내려가면서 장바구니의 상품을 삭제할 수 있다.</p>\n<p>이 모든 과정을 redux 로 구현할 수 있다.</p>\n<h1 id=\"register-page\" style=\"position:relative;\"><a href=\"#register-page\" aria-label=\"register page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Register Page</h1>\n<h2 id=\"구현-목표-1\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%AA%A9%ED%91%9C-1\" aria-label=\"구현 목표 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 목표</h2>\n<ul>\n<li>React Hook Form을 통해 입력한 것에 대한 유효성 체크</li>\n<li>loginPage는 state로 구현하고 register Page는 react-hook-form으로 구현해 차이점을 알 수있게 함</li>\n<li>UseRef를 이용해 Password와 Password Confirm 일치 여부 구현</li>\n<li>버튼을 눌러 유저 생성 처리중일 땐 누르지 못하게 막기</li>\n<li>비동기 요청시 try &#x26; catch문 안에서 해서 오류가 날 때 catch문 내의 에러 메시지를 state로 저장해 콘솔창이 아닌 브라우저 화면상에 출력</li>\n<li>상품 리스트 페이지에서 “장바구니 담기” 버튼을 클릭하였을 때, nav bar 의 장바구니의 숫자가 올라가면서 장바구니 페이지에 담기게 할 수 있다.</li>\n</ul>\n<p>장바구니 페이지에서 삭제 버튼(휴지통 모양의 아이콘)을 클릭하였을 때, nav bar 의 장바구니 숫자가 내려가면서 장바구니의 상품을 삭제할 수 있다.</p>\n<p>이 모든 과정을 redux 로 구현할 수 있다.</p>\n<h1 id=\"react-hook-form-사용\" style=\"position:relative;\"><a href=\"#react-hook-form-%EC%82%AC%EC%9A%A9\" aria-label=\"react hook form 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Hook Form 사용</h1>\n<p>React에서 Form을 쉽게 만들기 위한 라이브러리로 성능이 좋고 유연하며 유효성 검사에 탁월하다는 특징이 존재함\n<a href=\"https://react-hook-form.com/kr/get-started/\">공식문서 참고</a>\n<a href=\"https://react-hook-form.com/api/useform\">useForm참고</a>\n유효성 체크를 쉽게 도와주는 모듈 UI 가져다가 사용\n참고로 useForm은 ref를 이용한 uncontrolled 모드, Controller는 state를 이용한 controlled 모드이다</p>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li>적은 코드로 더 좋은 퍼포먼스를 낼 수 있음</li>\n<li>다른 라이브러리 혹은 React에 비해 Re-render 수가 적음</li>\n<li>Fast Mounting (로딩속도가 빠름)</li>\n<li>TS를 기본으로 지원</li>\n</ul>\n<h2 id=\"how-to-use\" style=\"position:relative;\"><a href=\"#how-to-use\" aria-label=\"how to use permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to use?</h2>\n<ol>\n<li>패키지 설치\n<code class=\"language-text\">npm install react-hook-form</code></li>\n<li>React Hook Form을 사용하기 위해 useForm 이라는 hook을 불러옴</li>\n</ol>\n<p>  <code class=\"language-text\">import { useForm } from 'react-hook-form';</code></p>\n<ol start=\"3\">\n<li>사용자가 입력할 때마다 추적 하기 위한 register, watch, formState을 import useForm을 통해 가져옴</li>\n<li>register\ninput에서 값을 불러오기 위한 함수로 ref={register({“사용하고자 하는 이름”})} 형식으로 사용 가능</li>\n</ol>\n<p>속성으로는 max, min, pattern등을 가지고 있음</p>\n<ul>\n<li>watch\n위에서 지정한 이름과 함께 input에서 입력한 값을 실시간으로 보여줌</li>\n</ul>\n<p>그렇기 때문에 onChange등의 함수를 직접 구현해 값을 불러 올 필요없음</p>\n<ul>\n<li>handleSubmit\nsubmit을 관리하기 위해 만들어진 함수</li>\n</ul>\n<p>handleSubmit은 함수를 인자로 받으며 그 함수에 data라는 인자를 넘겨줌</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 출력값 : {email: \"eee@naver.com\"}</span>\n<span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span>onSubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> pattern<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\S+@\\S+$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>handleSubmit이 넘겨주는 데이터는 watch 함수가 가장 마지막으로 출력하는 데이터와 동일하기 때문에 최종적으로 입력한 값이 나옴\n그래서 eee@nav 이렇게 watch한 중간 결과물이 아니라 eee@naver.com이 나오는 것</p>\n<ul>\n<li>formState\n개체에 엑세스하여 양식이 유효한지 확인하기 위해 사용됨. 기본값은 false\n이를 활용 시 유저이름과 비밀번호를 입력하면 button이 disabled가 해제되게 할 수있음</li>\n<li>\n<p>언제 유효성 체크할 것인지 결정</p>\n<ul>\n<li>\n<p>version 1. 입력시 즉각적으로 유효성 체크 에러표시 (실시가나 유효성 검사)</p>\n<ul>\n<li>useForm({ mode: “onChange” });</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">const { register, watch, formState: { errors }, handleSubmit} = useForm({mode: \"onChange\"});</code></p>\n<ul>\n<li>version 2. submit button누르기 전까진 유효성 체크 안함</li>\n</ul>\n<p><code class=\"language-text\">const { register, watch, formState: { errors }, handleSubmit } = useForm();</code></p>\n</li>\n</ul>\n<p>❗️errors는 에러들이 담긴 객체로 현재는 모드가 onChange이기 때문에 에러가 실시간으로 업데이트 됩니다.</p>\n<h2 id=\"useref를-이용해-password와-password-confirm-일치-여부-구현-react-hook-form\" style=\"position:relative;\"><a href=\"#useref%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-password%EC%99%80-password-confirm-%EC%9D%BC%EC%B9%98-%EC%97%AC%EB%B6%80-%EA%B5%AC%ED%98%84-react-hook-form\" aria-label=\"useref를 이용해 password와 password confirm 일치 여부 구현 react hook form permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UseRef를 이용해 Password와 Password Confirm 일치 여부 구현 (React Hook Form)</h2>\n<p>현재 react-hook-form 모듈을 사용하고 있기때문에 state이용해서 비교하는 이벤트로 구현방식을 사용하지 않고 useRef로 비교해줌 (= state 대체) </p>\n<ol>\n<li>password랑 password_confirm이 같아야 하니까 조건문 vaildate 작성</li>\n<li>import useRef 라이브러리에서 가져옴</li>\n</ol>\n<p><code class=\"language-text\">import React, { useRef } from 'react'</code></p>\n<ol start=\"3\">\n<li>useRef를 이용해서 ref 생성해 password를 정의</li>\n</ol>\n<p><code class=\"language-text\">const password = useRef();</code></p>\n<ol start=\"4\">\n<li>password.current라는 property 안에다가 password라는 이름을 가진 input element를 관찰함 </li>\n</ol>\n<p>-> input의 이름을 이용해 watch라는 메소드로 계속 지켜보기 때문에 value를 입력할 때마다 password.current로 들어감</p>\n<p><code class=\"language-text\">password.current = watch(\"password\");</code></p>\n<p>실시간 입력되는지 테스트 : console.log(‘password.current’, password.current)</p>\n<ol start=\"5\">\n<li>password라는 이름을 가진 input에 value를 넣은것과 password<em>confirm에 value를 입력한 것이 같은지 안같은지를 체크해 서로의 vaule가 같으면 validate 됐다고 함\n{errors.password</em>confirm &#x26;&#x26; errors.password_confirm.type === “validate” &#x26;&#x26; <p>The passwords do not match</p>}</li>\n</ol>\n<h2 id=\"버튼-누르지-못하게-막기\" style=\"position:relative;\"><a href=\"#%EB%B2%84%ED%8A%BC-%EB%88%84%EB%A5%B4%EC%A7%80-%EB%AA%BB%ED%95%98%EA%B2%8C-%EB%A7%89%EA%B8%B0\" aria-label=\"버튼 누르지 못하게 막기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버튼 누르지 못하게 막기</h2>\n<p>버튼 눌렀을 땐 database에서 유저생성 처리중이기 때문</p>\n<ol>\n<li>const [loading, setLoading] = useState(false);</li>\n<li>처음 submit 버튼 눌렀을 땐 현재 프로세스가 진행중인 거니까 버튼 못누르게 함</li>\n</ol>\n<p><code class=\"language-text\">setLoading(true)</code></p>\n<ol start=\"3\">\n<li>마지막엔 false로 state변환</li>\n</ol>\n<p><code class=\"language-text\">setLoading(false)</code></p>\n<ol start=\"5\">\n<li>프로세스가 진행중일 땐(=로딩이 true) 버튼 못누르게 해주기 위해  disabled={loading}</li>\n</ol>\n<p><code class=\"language-text\">&lt;input type=\"submit\" disabled={loading} /></code></p>\n<h2 id=\"에러메시지-출력\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%B6%9C%EB%A0%A5\" aria-label=\"에러메시지 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러메시지 출력</h2>\n<p>오류시 catch문 state로 저장해서 UI에 출력하기 위함</p>\n<ol>\n<li>에러시 에러메시지 담아줄 state생성 </li>\n</ol>\n<p><code class=\"language-text\">const [errorFromSubmit, setErrorFromSubmit] = useState(\"\")</code></p>\n<ol start=\"2\">\n<li>비동기 요청시 try &#x26; catch문 안에서 해서 오류가 뜨면 catch문으로 가게 함</li>\n<li>에러시 에러메시지 담아줄 setErrorFromSubmit에다가 “message”부분만 에러메시지 저장</li>\n</ol>\n<p><code class=\"language-text\">setErrorFromSubmit(error.message)</code></p>\n<ol start=\"4\">\n<li>오류를 콘솔창이 아닌 브라우저 화면상에 출력하기 위해 errorFromSubmit이 있다면(= 오류 떠서 catch문에 걸리면) 콘솔창의 오류문구중 “message”부분만 <p>태그에 랜더링해줌</li>\n</ol>\n<p><code class=\"language-text\">{errorFromSubmit &amp;&amp; &lt;p>{errorFromSubmit}&lt;/p>}</code></p>\n<ol start=\"5\">\n<li>오류메시지가 5초후에 사라지게 하려면</li>\n</ol>\n<p><code class=\"language-text\">setTimeout(() => { setErrorFromSubmit(\"\")}, 5000);</code></p>\n<p>redux로 상태를 관리하기 위해선 type => action => reducer 순으로 정의해야한다.\n먼저 정의한 type을 이용해 action을 정의하는데 action은 state를 변경하기 위한 처리를 하는 곳이다.\n회원가입에서는 client에서 데이터를 받아 server로 전달해야 하므로 axios를 이용해 post방식으로 전송한다.\n그리고 그 결과 중의 data부분만 request에 담아 payload로 반환한다.\nreducer는 action이 발생하는 것을 먼저 감지하여, action 처리 후의 payload값을 받아 state를 변화시킨다.\n이 때 중요한 건 state는 불변해야 하므로, spread operator로 기존의 state를 그대로 가져오고 더할 부분만 뒤에 추가하는 것이다.\n이렇게 하면 회원가입 로직은 프론트와 백 모두 구현 완료이다.</p>\n<p>(client/src/components/views/RegisterPage/RegisterPage.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// registerUser function을 불러오기 위함</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> registerUser <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../_actions/user_action'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">RegisterPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Email<span class=\"token punctuation\">,</span> setEmail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Password<span class=\"token punctuation\">,</span> setPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>ConfirmPassword<span class=\"token punctuation\">,</span> setConfirmPassword<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onEmailHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onNameHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onPasswordHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onConfirmPasswordHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setConfirmPassword</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmitHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 비밀번호와 비밀번호 확인같아야지 회원가입을 누를 수 있게 조건체크 해줌</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Password <span class=\"token operator\">!==</span> ConfirmPassword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// 만약 같지 않으면 밑의 코드로는 진행이 안되게 함</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'비밀번호와 비밀번호 확인은 같아야 합니다.'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// body를 넣을 때 email 과 password만 넣는게 아니라 이름까지 넣어줌 ()</span>\n        <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            email<span class=\"token operator\">:</span> Email<span class=\"token punctuation\">,</span>\n            password<span class=\"token operator\">:</span> Password<span class=\"token punctuation\">,</span>\n            name<span class=\"token operator\">:</span> Name\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// dispatch를 이용해서 registerUser라는 이름의 액션을 날리고 밑의 user_action.js에 가서 registerUser를 똑같이 만들어줌 </span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// loginSuccess가 아닌 그냥 success로 </span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// 로그인 페이지로 보내줌</span>\n                    props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to sign up\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n            display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> justifyContent<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span> alignItems<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span>\n            <span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'100vh'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>form style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">,</span> flexDirection<span class=\"token operator\">:</span> <span class=\"token string\">'column'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n                onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmitHandler<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Email<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Email<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onEmailHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Name<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onNameHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Password<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Password<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onPasswordHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Confirm Password<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ConfirmPassword<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onConfirmPasswordHandler<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n                <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>\n                    회원 가입\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>RegisterPage<span class=\"token punctuation\">)</span></code></pre></div>\n<p>(client/src/<em>actions/usesr</em>action.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">LOGIN_USER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// type.js에서 export const REGISTER_USER = \"register_user\"; 정의 해줌</span>\n    <span class=\"token constant\">REGISTER_USER</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loginUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n <span class=\"token comment\">// function이름은 RegisterPage.js내 registerUser와 같아야함</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">registerUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dataToSubmit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// end point는 (server/index.js)내 app.post('/api/users/register', (req, res) => { 와 똑같이 해줘야 server/index 쪽의 api로 진입 가능함 = 이렇게 보내면 서버에서 다 처리를 해서 값을 줌</span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/register'</span><span class=\"token punctuation\">,</span> dataToSubmit<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// type을 REGISTER_USER로 바꿔줌</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">REGISTER_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// reducer로 가서 case문 작성해줌 </span>\n    <span class=\"token comment\">// 아무것도 없는 원본 state를 가져오고 이름은 register, 서버에서 가져온 response를 action.payload에다가 넣어주면 됨</span>\n    <span class=\"token comment\">// case REGISTER_USER:</span>\n        <span class=\"token comment\">// return { ...state, register: action.payload } </span>\n        <span class=\"token comment\">// break;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<h1 id=\"logout\" style=\"position:relative;\"><a href=\"#logout\" aria-label=\"logout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logout</h1>\n<p>(client/src/components/views/LandingPage/LandingPage.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">function</span> <span class=\"token function\">LandingPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClickHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// server/index.js의 logout라우터 get request를 아무런 값(ex.body) 없이 주면 됨</span>\n        axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/users/logout</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// console.log(response.data) 출력 시: Object sucess: true __proto__: Objcet </span>\n                <span class=\"token comment\">// server/index.js에서 return한 success: true가 온 것을 확인 가능</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'로그아웃 하는데 실패 했습니다.'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">...</span>\n            <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>시작 페이지<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n            <span class=\"token comment\">//버튼 누르면 로그아웃이 되도록 onclick이벤트를 준 다음 클릭 시 onClickHandler라는 function을 실행하도록</span>\n            <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClickHandler<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                로그아웃\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>LandingPage<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Reference\n<a href=\"https://velog.io/@kihyun/React-Hook-Form-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">kihyunlee님 블로그</a></p>","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React9/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React7/","nextSlug":"/Shop_React8/","prevSlug":"/Shop_React9/"}},"staticQueryHashes":["1073350324","2938748437"]}