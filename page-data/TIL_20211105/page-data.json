{"componentChunkName":"component---src-templates-blog-template-js","path":"/TIL_20211105/","result":{"data":{"cur":{"id":"22fb78a6-deda-5a44-b244-1f0593f15a75","html":"<h1 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h1>\n<p><code class=\"language-text\">touch tsconfig.json</code>\n<code class=\"language-text\">npm install --save-dev typescript @types/react @types/node</code>\n<code class=\"language-text\">npm run dev</code>\n로그인 -> post\n회원가입 -> Post\n검증 -> Get\n로그아웃 -> Delete</p>\n<h1 id=\"회원가입-폼-생성\" style=\"position:relative;\"><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%ED%8F%BC-%EC%83%9D%EC%84%B1\" aria-label=\"회원가입 폼 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>회원가입 폼 생성</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript\n\n\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>javascript</code></pre></div>\n<h1 id=\"로그인-폼-생성\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%8F%BC-%EC%83%9D%EC%84%B1\" aria-label=\"로그인 폼 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로그인 폼 생성</h1>\n<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>Reference</p>","excerpt":"설치 \n\n\n로그인 -> post\n회원가입 -> Post\n검증 -> Get\n로그아웃 -> Delete 회원가입 폼 생성 로그인 폼 생성  Reference","frontmatter":{"date":"November 05, 2021","title":"Shop Project_Typescript 적용","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211105/"}},"next":{"id":"f8024bc6-e485-50b9-b8f7-8f4bfe4360a2","html":"<p>Redux Middleware를 적용하기 전에 동기 &#x26; 비동기에 대해 짚고 넘어가고자 함</p>\n<h1 id=\"javascript-synchronous동기-asynchronous비동기-콜백함수\" style=\"position:relative;\"><a href=\"#javascript-synchronous%EB%8F%99%EA%B8%B0-asynchronous%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98\" aria-label=\"javascript synchronous동기 asynchronous비동기 콜백함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript Synchronous(동기), Asynchronous(비동기), 콜백함수</h1>\n<h2 id=\"synchronous-asynchronous-의미\" style=\"position:relative;\"><a href=\"#synchronous-asynchronous-%EC%9D%98%EB%AF%B8\" aria-label=\"synchronous asynchronous 의미 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Synchronous, Asynchronous 의미</h2>\n<ul>\n<li>동기: 하나의 요청이 오면 완료가 된 후 다음 요청을 실행하는 방식 (순차적으로 로직 수행됨)</li>\n<li>비동기: 어떤 요청이 오면 완료 되기 까지 기다리지 않고 다음 요청을 실행하는 방식\n→ 여러 작업을 동시에 효율적으로 처리하기 때문에 즉시 응답을 못받아 흐름을 정확히 파악해 그에 맞게 적절히 처리 되어야 예상밖의 결과가 나오는 것을 막을 수 있음 (순차적인 흐름을 보장하지 않음, 완료되면 실행, 물리적으로 잠시 보류) </li>\n<li>자바스크립트는 일반적인 코드 작성 시 synchronous(동기식)하게 코드 적은 순서대로 윗에서부터 한줄한줄 차례로 처리됨.</li>\n<li>ajax 요청, 이벤트 리스너, state 변경함수, setTimeout, 이런 함수들은 처리시간이 오래걸리기 때문에 사용 시 asynchronous (비동기적)으로 처리됨</li>\n</ul>\n<h2 id=\"콜백-함수\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98\" aria-label=\"콜백 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백 함수</h2>\n<p>비동기로 작성된 함수를 일부 구간에서 동기 처리(순차적 처리)하기 위한 하나의 방법론\n→ 독립적으로 수행되는 작업뿐만 아니라 응답을 받은 이후 처리 되어야하는 종속적인 작업에 대응 하기 위함</p>\n<h2 id=\"콜백-함수-형태\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-%ED%98%95%ED%83%9C\" aria-label=\"콜백 함수 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백 함수 형태</h2>\n<p>보통 함수를 선언한 뒤에 함수 타입 파라미터를 맨 마지막에 하나 더 선언 해 주는 방식으로 정의\n처리가 끝나면 파라미터로 전달 받은 함수를 실행하며 필요한 경우 결과 값을 인자로 넘겨줄 수도 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function mainFunc(param1, param2, callbackFunc) {\n// ... 처리 내용\n    callbackFunc(result);\n}</code></pre></div>\n<h2 id=\"적용-예시\" style=\"position:relative;\"><a href=\"#%EC%A0%81%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"적용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>적용 예시</h2>\n<p>Synchronous(동기) Vs Asynchronous(비동기) 의미</p>\n<ul>\n<li>\n<p>동기식 (순차흐름)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function syn(alphabet, seq_1, seq_2) {\nconsole.log(\"B\");\n    var total = seq_1+seq_2;\nvar total = price*quantity;\nreturn total;\n}\n// 1과 2의 총합을 리턴해 tot변수에 대입 시켜주고 tot를 cal 함수의 파라미터로 넘겨줌\nvar tot = syn(\"A\", 1, 2);\ncal(tot);</code></pre></div>\n</li>\n<li>\n<p>1,000,000,000번 루프를 돌고, 이 작업이 얼마나 걸렸는지 알려주는 기능을 하는 <code class=\"language-text\">work()</code> 함수 호출 시 for 문이 돌아갈 때는 다른 작업은 처리하지 않고 온전히 for 문만 실행</p>\n<ul>\n<li>\n<p>Date.now -> 현재 시간을 숫자 형태로 가져오는 자바스크립트 내장 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n</li>\n</ul>\n<p>const start = Date.now();\nfor (let i = 0; i &#x3C; 1000000000; i++) {}\nconst end = Date.now();\nconsole.log(end - start + ‘ms’);\n}</p>\n</li>\n</ul>\n<p>work();\nconsole.log(‘다음 작업’);</p>\n<p>// 출력 값 -> 517ms 다음작업</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 비동기 방식 \nsetTimeout 함수를 사용하여 함수 안의 코드가 1초뒤에 출력이 완료되게 구현\n결과값 : A → undefined → B (1초 후 출력됨) \nsetTimeout함수 호출 시 다음 구문을 1초 뒤가 아닌 호출한 직후 실행하기 때문에 tot 변수에 아무 값도 받지 못한 상태로 C가 B보다 먼저 출력됨</code></pre></div>\n<p>function asyn(alphabet, seq<em>1, seq</em>2) {\nsetTimeout(function() {\nconsole.log(“B”);\nvar total = seq<em>1+seq</em>2;\nreturn total;\n}, 1000);\n}</p>\n<p>function asyn(alphabet, seq<em>1, seq</em>2) {\nvar tot = asyn(“A”, 1, 2);\ncal(tot);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 비동기에서 콜백함수를 이용한 동기처리 (feat. 콜백함수가 필요한 이유_동기 &amp; 비동기)\nB 이후의 행위를 기술하기 위해 콜백 함수를 인자로 받고 setTimeout 함수 내에 포함\n콜백 함수에 C를 기술시 결과값 : A → (1초뒤 출력)B → C(순차 실행 만족)</code></pre></div>\n<p>function buy<em>tobe(alphabet, seq</em>1, seq<em>2, callback) {\nsetTimeout(function() {\nconsole.log(“B”);\nvar total = seq</em>1+seq_2;\ncallback(total);\n}, 1000);\n}</p>\n<p>function cal(tot) {\nconsole.log(tot + “C”);\n}\n// cal 함수를 콜백 파라미터에 대입\nbuy<em>tobe(“A”, 1, 2, cal);\n// pay 함수를 따로 선언하지 않고 바로 익명함수 처리도 가능함\nbuy</em>tobe(“A”, 1, 2, function(tot) {\nconsole.log(tot + “C”);\n});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 동기에서 비동기 처리\nfor문 돌아가는 동안 다른 작업도 하고싶으면 `setTimeout` 함수를 사용해 비동기 형태로 변환해 줘야함\n`setTimeout` 함수\n- 첫번째 파라미터에 넣은 함수를 두번째 파라미터에 넣은 시간(ms 단위)이 흐른 후 호출해줌\n- 정한 작업이 백그라운드에서 수행되기 때문에 기존의 코드 흐름을 막지 않고 동시에 다른 작업들을 진행 가능</code></pre></div>\n<p>function work() {\nsetTimeout(() => {\nconst start = Date.now();\nfor (let i = 0; i &#x3C; 1000000000; i++) {}\nconst end = Date.now();\nconsole.log(end - start + ‘ms’);\n}, 0);\n}</p>\n<p>console.log(‘작업 시작!’);\nwork();\nconsole.log(‘다음 작업’);\n//출력 값 -> 작업 시작! 다음 작업 508ms</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- work 함수가 끝난 다음에 어떤 작업을 처리하고 싶다면 콜백 함수를 파라미터로 전달해주면 됨\n콜백 함수 → 함수 타입의 값을 파라미터로 넘겨줘서, 파라미터로 받은 함수를 특정 작업이 끝나고 호출을 해주는 것</code></pre></div>\n<p>function work(callback) {\nsetTimeout(() => {\nconst start = Date.now();\nfor (let i = 0; i &#x3C; 1000000000; i++) {}\nconst end = Date.now();\nconsole.log(end - start + ‘ms’);\ncallback();\n}, 0);\n}</p>\n<p>console.log(‘작업 시작!’);\nwork(() => {\nconsole.log(‘작업이 끝났어요!‘)\n});\nconsole.log(‘다음 작업’);</p>\n<p>//출력 값 : 작업시작! 다음 작업 298ms 작업이 끝났어요!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">작업들을 비동기적으로 처리하게 되는 경우\n\n- Ajax Web API 요청: 서버쪽에서 데이터를 받아올 땐 요청 후 서버에서 응답 할 때까지 대기함\n- 파일 읽기: 주로 서버 쪽에서 파일을 읽어야 하는 상황\n- 암호화/복호화:  바로 처리가 되지 않고 시간이 어느정도 걸리는 경우가 있기 때문\n- 작업 예약: 단순히 어떤 작업을 몇초 후에 스케쥴링 해야 하는 상황에 setTimeout 을 사용\n- 비동기 작업을 다룰 때에는 callback 함수, Promise,  async/await 라는 문법을 사용해 처리 가능.\n\n# Promise\n[[typescript] Promise와 Async/Await 구문](https://hoony-gunputer.tistory.com/entry/typescript-Promise%EC%99%80-AsyncAwait-%EA%B5%AC%EB%AC%B8)\n\n## Promise란\n비동기 처리의 방법(콜백함수, Promise)중 하나\n비동기 함수를 동기식으로 처리하기 위해 고안한 객체\n-> 비동기 작업이 완료된 이후에 다음 작업을 연결시켜 진행할 수 있는 기능 + 작업 결과에 따라 성공 또는 실패를 리턴하며 결과 값을 전달받을 수 있음\n  기본적으로 promise는 함수에 콜백을 전달하는 대신에, 콜백을 첨부하는 방식의 객체임\n## Promise 기본 문법\n  `const myPromise = new Promise((resolve, reject) => { ... })`\n  Promise는 성공 시엔 resolve, 실패 시엔 reject 호출해줌\n  `resolve` 호출 시 \n    파라미터로 특정 값 넣어주면 이 값을 작업이 끝나고 나서 사용  가능하고\n    → 작업 끝난 후 또 다른 작업 해야할 땐 Promise 뒤에 `.then(...)` 을 붙여서 사용\n  `reject` 호출 시 \n    `.catch` 를 통해 실패했을 때 수행 할 작업을 설정 가능\n  \n## Promise의 3가지 상태 및 처리 흐름\nPromise 객체가 비동기 함수의 처리 상태를 보고 완료되었는지 판단하여 성공 여부에 따라 다음 처리를 다르게 수행할 수 있게 해줌\npending(대기) : 처리가 완료되지 않은 상태\nfulfilled(이행) : 성공적으로 처리가 완료된 상태\nrejected(거부) : 처리가 실패로 끝난 상태\n\n## then 체인 (직접 Promise를 return) \nthen 메서드 내 return 키워드 사용 시 결과 값이 기본 자료형이 아닌 Promise 객체로 반환됨\n각각의 함수가 Promise 객체를 리턴하는 비동기 작업이라고 가정한다면 then 메서드를 연속적으로 사용해 순차적인 작업 가능\nthen을 통해 반환한 값은 또 다른 then을 통해서 수신 가능하기 때문에 체인 형식이 가능하게 됨\n체이닝 기법을 활용함으로써 콜백 함수를 너무 많이 중첩 시 발생 가능한 콜백 지옥에 빠지지 않게 함</code></pre></div>\n<p>goA()\n.then(function(){\nreturn goB();\n})\n.then(function(){\nreturn goC();\n})\n.then(function(){\nreturn goD();\n});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### 콜백지옥 예시\n비동기 작업을 처리 할 때 콜백 함수로 처리 시 비동기 작업이 많아질 때 코드 깊이가 계속 깊어지는 Callback Hell (콜백지옥)현상이 발생하는데 이를 Promise 사용함으로서 방지 가능\n  - 파라미터로 숫자 n 받아와 다섯번에 걸쳐 1초마다 1씩 더해서 출력하는 작업을 setTimeout 으로 구현</code></pre></div>\n<p>  function increaseAndPrint(n, callback) {\nsetTimeout(() => {\nconst increased = n + 1;\nconsole.log(increased);\nif (callback) {\ncallback(increased);\n}\n}, 1000);\n}</p>\n<p>  increaseAndPrint(0, n => {\nincreaseAndPrint(n, n => {\nincreaseAndPrint(n, n => {\nincreaseAndPrint(n, n => {\nincreaseAndPrint(n, n => {\nconsole.log(‘끝!’);\n});\n});\n});\n});\n});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Promise 사용 시 문제점\nPromise 를 사용하면, 비동기 작업의 개수가 많아져도 코드의 깊이가 깊어지지 않지만\n에러를 잡을 때 몇번째에서 발생했는지 알아내기도 어렵고 특정 조건에 따라 분기를 나누는 작업도 어렵고, \n특정 값을 공유해가면서 작업을 처리하기도 까다로움 →  async/await 을 사용시 해결 가능\n\n# Async/Await\nPromise를 다루는 구문 (Promise 객체를 좀 더 쉽게 다룰 수 있게 고안된 문법)\n-> promise.then 사용보다 훨씬 간결하고 가독성 뛰어남\n비동기 함수를 동기 함수처럼 다룰 수 있어 매우 깔끔하고 유용하게 사용할 수 있는 방법\n\n## Await\n피연산자의 값을 반환해 줌 (피연산자가 Promise 객체면 then 메서드를 호출해 얻은 값을 반환)\nawait 키워드를 사용하더라도 그 작업이 처리되는 동안 다른 모든 프로세스가 중단되는 것은 아니며 엔진이 다른 일을 할 수 있으므로 자원이 효율적으로 운영됨\n- await 기본 예제\n앞에 async / await 키워드만 붙여주면 비동기 작업의 순차 처리가 동기적으로 처리로 가능</code></pre></div>\n<p>// 1초 후 hello 출력되는 코드\nfunction greet() {\nreturn new Promise(function(resolve){\nsetTimeout(function() {\nresolve(‘hello’);\n}, 1000);\n});\n}</p>\n<p>(async function() {\nvar result = await greet();//resolved 될 때까지 대기console.log(result);\n})();</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Async\nawait구문은 항상 async 함수 안에서만 사용가능\nfunction 앞에 async 키워드만 붙여주면 됨 → 항상 Promise 객체를 반환해줌\nasync 함수에서는 Promise가 아닌 값을 리턴하더라도 내부적으로 Promise로 감싸서 resolved promise가 반환됨\n\nasync 함수의 성질\n\n- 일반함수 처럼 사용가능\n- promise 객체로도 사용 가능 -> Promise.all에도 적용해 사용 가능함\n- 값 반환 가능 (반환값은 Promise 형태로 변환되므로 then 메소드를 통해서 반환되는 값을 얻어야 함)\n- 제일 외부에서는 then을 통해서 값에 접근해야함</code></pre></div>\n<p>const hiasync = async()=>{\nawait Promise 객체 혹은 값\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>const hi = async ()=>{\nreturn [1, 2, 3];\n}</p>\n<p>const asyncReturn = async ()=>{\nconst result = await hi()\nconsole.log(‘value0:’, result)\nreturn result;\n}</p>\n<p>asyncReturn().then(value =>\nconsole.log(‘value1: ’, value))</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">결과</code></pre></div>\n<p>value0: [ 1, 2, 3 ]\nvalue1:  [ 1, 2, 3 ]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  ## async/await 문법 → Promise 를 더욱 쉽게 사용 할 수 있게 해줌\n  \n  함수를 선언 할 때 함수 앞부분에 `async` 키워드를 붙이고 Promise의 앞부분에 `await` 을 넣어주면 \n  해당 프로미스가 끝날때까지 기다렸다가 다음 작업을 수행 가능\n  \n  `sleep` 함수의 파라미터에 넣어준 시간만큼 기다리는 Promise 를 만들고, 이를 `process` 함수 안에서 await 붙인 형태로 사용\n   &amp; `process` 함수 앞에 `async` 사용시 해당 함수는 결과값으로 Promise 를 반환하게 됨</code></pre></div>\n<p>  async function process() {\nconsole.log(‘A’);\nawait sleep(1000); // 1초쉬고\nconsole.log(‘B!’);\n}\nprocess().then(() => {\nconsole.log(‘C’);\n});</p>\n<p>  <code class=\"language-text\">async</code> 함수에서 에러를 발생 시 <code class=\"language-text\">throw</code>, 에러를 잡아낼 땐 try/catch 문을 사용</p>\n<p>  async function makeError() {\nawait sleep(1000);\nconst error = new Error();\nthrow error;\n}</p>\n<p>  async function process() {\ntry {\nawait makeError();\n} catch (e) {\nconsole.error(e);\n// 출력 값: Error\n}\n}</p>\n<p>  process();</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> </code></pre></div>\n<p>  function sleep(ms) {\nreturn new Promise(resolve => setTimeout(resolve, ms));\n}</p>\n<p>  const A = async () => {\nawait sleep(1000);\nreturn ‘가’;\n};</p>\n<p>  const B = async () => {\nawait sleep(500);\nreturn ‘나’;\n};\nconst C = async () => {\nawait sleep(3000);\nreturn ‘다’;\n};</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">동기적 처리시  (`A` -> `B` -> `C` 함수들을 순서대로 하나가 끝나야 다음작업이 실행되게 함)</code></pre></div>\n<p>  async function process() {\nconst a = await A();\nconsole.log(a);\nconst b = await B();\nconsole.log(b);\nconst c = await C();\nconsole.log(c);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">비동기적 처리 시 (동시에 작업을 시작하고 싶다면 Promise.all 을 사용해야 함)</code></pre></div>\n<p>  async function process() {\nconst results = await Promise.all([A(), B(), C()]);\nconsole.log(results);  // 출력값 : [“가”,“나”,“다”]\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> 배열 비구조화 할당 문법을 사용시 각 결과값을 따로 따로 추출해서 조회 가능\n Promise.all를 사용 시 등록한 프로미스 중 하나라도 실패하면, 모든게 실패 한 것으로 간주</code></pre></div>\n<p>  async function process() {\nconst [a, b, c] = await Promise.all([\nA(),\nB(),\nC()\n]);\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//Promise.race는 Promise.all과 달리, 여러개의 프로미스를 등록해서 실행했을 때 가장 빨리 끝난 Promise 하나만의 결과값을 가져옴\n가장 먼저 끝난 Promise가 실패시 이를 실패로 간주하기 때문에 B에서 에러를 발생시킨다면 에러를 잡아낼 수 있지만, C나 A에서 발생한 에러는 무시됨</code></pre></div>\n<p>  async function process() {\nconst first = await Promise.race([\nA(),\nB(),\nC()\n]);\nconsole.log(first);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>  process();</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n\nReference\n\n[자바스크립트 async / await 예제](https://sangminem.tistory.com/479)</code></pre></div>","frontmatter":{"date":"November 04, 2021","title":"Shop Project_JavaScript_동기 비동기 콜백함수","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211104/"}},"prev":{"id":"bc332ff5-e0f6-516f-97cb-79ca121a95dd","html":"<h2 id=\"장바구니-데이터를-조작할-수-있는-reducer-생성과정\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EB%B0%94%EA%B5%AC%EB%8B%88-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A1%B0%EC%9E%91%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-reducer-%EC%83%9D%EC%84%B1%EA%B3%BC%EC%A0%95\" aria-label=\"장바구니 데이터를 조작할 수 있는 reducer 생성과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장바구니 데이터를 조작할 수 있는 reducer 생성과정</h2>\n<ul>\n<li>이미 있는 상품을 장바구니 추가 누르면 수량만 1증가 O 항목추가 X</li>\n<li>‘항목추가’라는 dispatch요청할 때 문제가 있는거니까 reducer에서 데이터 수정방법을 손봐주면 됨</li>\n<li>\n<p>주문하기 버튼 누르면 누를 때 마다 찾은상품.id / 찾은상품.name이라는 실제 페이지내의 상품데이터가 redux store에 저장됨</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\nprops<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>type <span class=\"token operator\">:</span> <span class=\"token string\">'항목추가'</span><span class=\"token punctuation\">,</span> 데이터 <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> 찾은상품<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> 찾은상품<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> quan <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">주문하기</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> 초기값 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> \n    <span class=\"token punctuation\">{</span>id <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> <span class=\"token string\">'신발'</span><span class=\"token punctuation\">,</span> quan <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>id <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> <span class=\"token string\">'신발2'</span><span class=\"token punctuation\">,</span> quan <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// reducer에 초기값을 default파라미터 문법으로 집어넣음 </span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> 초기값<span class=\"token punctuation\">,</span> 액션</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 액션.type === 수정방법이름</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>액션<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'항목추가'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// dispatch로 수신한 데이터의 id ({ id : 0, name : '새로운상품' })가 state(초기값 배열)안에 같은 id가 이미 존재 한다면 push()하지 않고 수량(quan)만 증가 </span>\n        <span class=\"token keyword\">const</span> 몇번째있니 <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> \n            <span class=\"token comment\">// state array내 각 자료의 id === 액션.데이터.id 비교</span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> 액션<span class=\"token punctuation\">.</span>데이터<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> 몇번째있니 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        copy<span class=\"token punctuation\">[</span>몇번째있니<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>quan<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        copy<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>액션<span class=\"token punctuation\">.</span>데이터<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> copy\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>액션<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'수량증가'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//수량증가 요청이 들어오면 state 데이터 카피본을 만들어 해당 아이템 quan 항목에 1 더해주고 return</span>\n        <span class=\"token comment\">// array, object로 구성된 state 데이터 수정시 사본을 만드는게 좋음</span>\n        <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//dispatch()할 때 방금 누른 +버튼 옆의 상품번호를 redux store로 함께 실어 보냈기 때문에</span>\n        <span class=\"token comment\">//copy[0].quan++; 가 아닌 copy[방금 누른 +버튼 옆의 상품번호].quan++ 로 변경</span>\n        <span class=\"token comment\">// {액션.데이터}를 state에 추가</span>\n\t    copy<span class=\"token punctuation\">[</span>액션<span class=\"token punctuation\">.</span>데이터<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>quan<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> copy\n    \n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>액션<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'수량감소'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        copy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>quan<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> copy\n    \n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 요청 안들어온 경우 기본 state 리턴</span>\n        <span class=\"token keyword\">return</span> state\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>findIndex()\n특정 값이 array 안에 있는지 찾을 때 사용하는 자바스크립트 기본함수</p>\n<ul>\n<li>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//결과값 3</span></code></pre></div>\n<p>array 안에 1이 있는지 찾고 싶으면\na: array안에 있던 하나하나의 자료 {}\na와 1을 비교해 일치시 몇번째 값인지 남겨줌</p>\n</li>\n</ul>\n</li>\n<li><strong>주문하기 버튼 옆에 수량을 직접 입력할 수 있는 input 생성</strong></li>\n<li><strong>상품의 사이즈 정보를 저장할 수 있는 곳을 만들어서 사이즈 선택 기능 추가</strong></li>\n<li><strong>장바구니 항목 삭제 기능</strong></li>\n</ul>\n<h1 id=\"redux를-이용한-개발환경-셋팅\" style=\"position:relative;\"><a href=\"#redux%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%85%8B%ED%8C%85\" aria-label=\"redux를 이용한 개발환경 셋팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux를 이용한 개발환경 셋팅</h1>\n<ul>\n<li>\n<p>redux에서 state를 생성하려면 useState가 아닌 createStore() 함수를 써야함</p>\n<ol>\n<li>createStore를 import 후 <code class=\"language-text\">import {createStore} from 'redux';</code></li>\n<li>state 만들어 store 변수에 저장</li>\n<li>createStore 콜백함수엔 원하는 state 초기값 작성</li>\n<li>&#x3C; Provider> import 후 <code class=\"language-text\">import {Provider} from 'react-redux';</code></li>\n<li>\n<p><Provider>에 store state를 props처럼 등록하면 Provider로 감싼 모든 HTML, 컴포넌트들은 전부 store안에 있던 state값을 props 전송없이 공유 가능 -> state값 공유 원하는 컴포넌트(App)를 감쌈\n//redux 설치 후엔 state들을 store라는 명칭으로 부름!</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Provider<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createStore<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>const store = createStore(()=>{ return [{id : 0, name : ‘멋진신발’, quan : 2}]  })</p>\n<p>ReactDOM.render(\n&#x3C;React.StrictMode>\n<BrowserRouter>\n<Provider store={store}>\n<App/>\n</Provider>\n</BrowserRouter>\n&#x3C;/React.StrictMode>\n);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Reference</code></pre></div>\n</li>\n</ul>","frontmatter":{"date":"November 06, 2021","title":"Shop Project_Next js 장바구니 구현","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIl_20211107/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/TIL_20211105/","nextSlug":"/TIL_20211104/","prevSlug":"/TIl_20211107/"}},"staticQueryHashes":["1073350324","2938748437"]}