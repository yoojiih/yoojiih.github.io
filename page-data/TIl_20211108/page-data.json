{"componentChunkName":"component---src-templates-blog-template-js","path":"/TIl_20211108/","result":{"data":{"cur":{"id":"cdc42cc7-e1bf-5f52-9ea9-7eafa0b5210f","html":"<p>Reference</p>","excerpt":"Reference","frontmatter":{"date":"November 06, 2021","title":"Shop Project_Next js 지도 API","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIl_20211108/"}},"next":{"id":"c2c096bc-fe46-5af0-880e-b0f4bcede8ee","html":"<p>Reference</p>","frontmatter":{"date":"November 06, 2021","title":"Shop Project_Next js에서 Redux사용해 인증(로그인, 회원가입)","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIl_20211106/"}},"prev":{"id":"b29b52da-1d5e-5e90-8566-d450954f33e8","html":"<h1 id=\"기능구현-후-성능향상--유지관리\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5%EA%B5%AC%ED%98%84-%ED%9B%84-%EC%84%B1%EB%8A%A5%ED%96%A5%EC%83%81--%EC%9C%A0%EC%A7%80%EA%B4%80%EB%A6%AC\" aria-label=\"기능구현 후 성능향상  유지관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기능구현 후 성능향상 &#x26; 유지관리</h1>\n<p>[ 컴포넌트 로딩속도 등을 향상시킴 ] </p>\n<h2 id=\"1익명함수object-사용-자제\" style=\"position:relative;\"><a href=\"#1%EC%9D%B5%EB%AA%85%ED%95%A8%EC%88%98object-%EC%82%AC%EC%9A%A9-%EC%9E%90%EC%A0%9C\" aria-label=\"1익명함수object 사용 자제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.익명함수/object 사용 자제</h2>\n<p>함수나 오브젝트는 변수에 담아쓰는게 좋음. 콜백하마수나 오브젝트 형식이 아닌 컴포넌트 바깥에 있는 변수에 저장해서 불러 씀\n-> 메모리공간을 아끼는 JS 관습\n컴포넌트 재렌더링 시 이름없는(변수에 저장안된) object, function 자료형 → 매번 새로운 메모리 영역을 할당해줘야하기 때문에 컴퓨터 바빠짐</p>\n<h2 id=\"2레이아웃에-애니메이션-사용-자제\" style=\"position:relative;\"><a href=\"#2%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83%EC%97%90-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EC%82%AC%EC%9A%A9-%EC%9E%90%EC%A0%9C\" aria-label=\"2레이아웃에 애니메이션 사용 자제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.레이아웃에 애니메이션 사용 자제</h2>\n<p>애니메이션 넣을 때 성능에 지장 없이 만들려면 자바스크립트, transition을 이용한 레이아웃 변경 애니메이션은 브라우저 입장에서는 큰 부담이니 사용 자제\n(레이아웃: width, margin, padding, left right top bottom 등)<br>\ntransform, opacity 같은 CSS 속성(transform은 사이즈 변경, 좌표이동, 회전 전부 가능한 속성)을 이용해 성능 지장 없게 만들어야함.</p>\n<h2 id=\"3-컴포넌트-lazy-loading-하기\" style=\"position:relative;\"><a href=\"#3-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-lazy-loading-%ED%95%98%EA%B8%B0\" aria-label=\"3 컴포넌트 lazy loading 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 컴포넌트 lazy loading 하기</h2>\n<p>보통 App.js 라는 메인페이지 방문시 많은 컴포넌트 파일을 import 해오기 때문에 사이트 초기 접속속도가 굉장히 느려짐 (웹앱 사이트들의 특징)\n첫 페이지 방문시 import를 바로 해올 필요없는 컴포넌트는 필요해질 때 import 해달라고 할 수 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, {useState, useContext, lazy, Suspense} from 'react';\nconst Detail = lazy( ()=>{ return import('./Detail.js') } );\n\nrender (\n  &lt;Suspense fallback={ &lt;div>로딩중&lt;/div> }>\n    &lt;Detail/>\n  &lt;/Suspense>\n)</code></pre></div>\n<blockquote>\n<ol>\n<li>react 라이브러리에서 lazy, Suspense를 import </li>\n<li>import Detail 대신 lazy 함수를 이용</li>\n<li><Suspense> 컴포넌트로 <Detail>을 감싸줌</li>\n<li><Detail> 컴포넌트가 필요해질 때 import Detail </li>\n<li><Suspense>의 fallback 속성을 이용해 <Detail> 컴포넌트 로딩 전까지 띄울 HTML 안내문 적을 수 있음</li>\n</ol>\n</blockquote>\n<h2 id=\"4-react-dev-tools-리액트-개발자-도구-크롬-확장프로그램\" style=\"position:relative;\"><a href=\"#4-react-dev-tools-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%8F%84%EA%B5%AC-%ED%81%AC%EB%A1%AC-%ED%99%95%EC%9E%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8\" aria-label=\"4 react dev tools 리액트 개발자 도구 크롬 확장프로그램 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. React Dev Tools 리액트 개발자 도구 크롬 확장프로그램</h2>\n<p>크롬으로 구글에 react dev tools 검색해 설치시 크롬브라우저에서 우클릭 -> 검사 누르면 리액트 관련 탭 생김\nComponents탭\n→ 현재 페이지에 사용된 모든 컴포넌트들을 쭉 나열해 보여줌\n컴포넌트를 클릭시 사용중인 props, state, hook 표시해주기 때문에 </p>\n<ul>\n<li>props가 잘 전해졌는지, state가 잘 변하고 있는지 확인</li>\n<li>실시간 state, props 수정해보는것 가능</li>\n<li>시계모양 버튼 → 해당 컴포넌트 렌더링을 잠깐 정지</li>\n</ul>\n<p>Profiler탭\n→ 맨 왼쪽 녹화 버튼(파란점)을 눌러서 컴포넌트 렌더링 속도를 측정 가능\n버튼 누르고 사이트 탐색하고 버튼 다시 누르면 녹화가 완료되며 렌더링된 컴포넌트 다 기록되어 있음</p>\n<ul>\n<li>어떤 컴포넌트가 렌더링 시간이 젤 오래걸리는지</li>\n<li>쓸데없이 재렌더링 자주되는 컴포넌트가 있는지</li>\n<li>렌더링 필요없는 컴포넌트가 있는지 찾아낼 수 있음</li>\n</ul>\n<h2 id=\"5-memo\" style=\"position:relative;\"><a href=\"#5-memo\" aria-label=\"5 memo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. memo</h2>\n<p>리액트 앱은 컴포넌트와 관련된 state 혹은 props가 변경되면 항상 자동 재렌더링 됨 → 사이트 구동 속도가 저하\n컴포넌트의 규모가 너무 커 잦은 재렌더링이 부담스러울 때 쓰는 방법\n특히 컴포넌트안에 컴포넌트가 여러개 있을 때 유용함 (부모 컴포넌트를 구성하는 state나 props가 변경되면 해당 Props를 전달받는 자식 컴포넌트를 전부 자동 재렌더링 시키기 때문)\nmemo로 감싼 컴포넌트는 기존 props와 바뀐 props를 비교하는 연산이 추가로 진행되기 때문에 props가 크고 복잡하면 이거 자체로도 부담이 됨\n규모가 작은 사이트를 만들거나 컴포넌트 내부에 있는 HTML 양이 매우 적을 경우엔 사용 X</p>\n<p>Reference</p>","frontmatter":{"date":"November 09, 2021","title":"Shop Project_성능 최적화","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIl_20211109/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/TIl_20211108/","nextSlug":"/TIl_20211106/","prevSlug":"/TIl_20211109/"}},"staticQueryHashes":["1073350324","2938748437"]}