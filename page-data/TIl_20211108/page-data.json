{"componentChunkName":"component---src-templates-blog-template-js","path":"/TIl_20211108/","result":{"data":{"cur":{"id":"cdc42cc7-e1bf-5f52-9ea9-7eafa0b5210f","html":"<p>Reference</p>","excerpt":"Reference","frontmatter":{"date":"November 06, 2021","title":"Shop Project_Next js 지도 API","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIl_20211108/"}},"next":{"id":"c2c096bc-fe46-5af0-880e-b0f4bcede8ee","html":"<p>Reference</p>","frontmatter":{"date":"November 06, 2021","title":"Shop Project_Next js에서 Redux사용해 인증(로그인, 회원가입)","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIl_20211106/"}},"prev":{"id":"b29b52da-1d5e-5e90-8566-d450954f33e8","html":"<ul>\n<li>\n<p>성능 최적화시</p>\n<p>기능구현 후 성능향상 &#x26; 유지관리</p>\n<p>[ 리액트에서 컴포넌트의 로딩속도 등을 향상시킬 수 있는 방법 ] </p>\n<ul>\n<li>\n<p>1.익명함수/object 사용 자제</p>\n<p><strong>함수나 오브젝트는 변수에 담아쓰는게 좋음</strong></p>\n<p>class로 만든 컴포넌트는 class 안에 함수 집어넣는 공간에 저장</p>\n<p>메모리공간을 아끼는 JS 관습 (리액트 개념 X)</p>\n<p>컴포넌트 재렌더링 시 이름없는(변수에 저장안된) object, function 자료형 → 매번 새로운 메모리 영역을 할당해줘야하기 때문에 컴퓨터 바빠짐</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var 스타일 = {color : 'red'};\n\nfunction Cart(){\n  return (\n\n\t\t//이렇게 이름없는 콜백 함수나 오브젝트 X\n\t\t&lt;div style={ {color : 'red'} } >&lt;/div>\n\t\t\n\t\t//컴포넌트 바깥에 있는 변수에 저장해 씀 (함수도 마찬가지)\n    &lt;div style={ 스타일 } >&lt;/div>\n  )\n}</code></pre></div>\n</li>\n<li>\n<p>2.레이아웃에 애니메이션 사용 자제</p>\n<p><strong>2. 애니메이션 넣을 때 성능에 지장 없이 만들려면 (</strong>전반적인 CSS 코딩 팁)</p>\n<p><strong>레이아웃 변경 애니메이션은 좋지않음 (</strong>레이아웃: width, margin, padding, left right top bottom 등)   → CSS 렌더링 단계 참고! 자바스크립트, transition을 이용해 레이아웃을 변경시키는건 브라우저 입장에서 큰 부담</p>\n<p>transform, opacity 같은 CSS 속성을 이용 (transform은 사이즈 변경, 좌표이동, 회전 전부 가능한 속성) 을 이용해 성능 지장 없게 만들어야함.</p>\n</li>\n<li>\n<ol start=\"3\">\n<li>컴포넌트 lazy loading 하기</li>\n</ol>\n<p><strong>컴포넌트 import 시 lazy 하게</strong></p>\n<p>App.js 라는 메인페이지 방문시 많은 컴포넌트 파일을 import 해오는데 그러면 사이트 초기 접속속도가 굉장히 느려짐! 웹앱 사이트들의 특징임</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(App.js 상단)\n\nimport React, {useState, useContext} from 'react';\nimport Detail from './Detail.js';\nimport Cart from './Cart.js'</code></pre></div>\n<p>첫 페이지 방문시 import를 바로 해올 필요없는 Detail, Cart 같은 컴포넌트는 <strong>필요해질 때 import 해달라고 할 수 있음.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(App.js 상단)\n\nimport React, {useState, useContext, lazy, Suspense} from 'react';\nlet Detail = lazy( ()=>{ return import('./Detail.js') } );\n\n(App.js 중단에 Detail 컴포넌트 쓰는 곳)\nrender (\n  &lt;Suspense fallback={ &lt;div>로딩중입니다~!&lt;/div> }>\n    &lt;Detail/>\n  &lt;/Suspense>\n)</code></pre></div>\n<ol>\n<li>react 라이브러리에서 lazy, Suspense를 import </li>\n<li>import Detail 대신 lazy 함수를 이용</li>\n<li><Suspense> 컴포넌트로 <Detail>을 감싸줌</li>\n<li><Detail> 컴포넌트가 필요해질 때 import Detail </li>\n<li><Suspense>의 fallback 속성을 이용해 <Detail> 컴포넌트 로딩 전까지 띄울 HTML 안내문 적을 수 있음. <div>대신 회전하는 이미지 등을 컴포넌트로 만들어 넣어도 됨.</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li><strong>React Dev Tools 리액트 개발자 도구 크롬 확장프로그램</strong></li>\n</ol>\n<p>크롬으로 구글에 react dev tools 검색해 설치시 크롬브라우저에서 <strong>우클릭 - 검사</strong> 누르면 리액트 관련 탭 생김</p>\n<p>컴포넌트를 적게, 코드를 깔끔하고 예쁘게 짜면 이런 과정 불필요…</p>\n<p>Components탭</p>\n<p>→ 현재 페이지에 사용된 모든 컴포넌트들을 쭉 나열해 보여줌</p>\n<p>컴포넌트를 클릭시 사용중인 props, state, hook 표시해주기 때문에 </p>\n<ul>\n<li>props가 잘 전해졌는지</li>\n<li>state가 잘 변하고 있는지 확인</li>\n<li>실시간 state, props 수정해보는것 가능</li>\n<li>시계모양 버튼 → 해당 컴포넌트 렌더링을 잠깐 정지</li>\n</ul>\n<p>Profiler탭 </p>\n<p>→ 맨 왼쪽 녹화 버튼(파란점) 을 눌러서 컴포넌트 렌더링 속도를 측정 가능</p>\n<ol>\n<li>버튼 누르고 2. 사이트 탐색하고 3. 버튼 다시 누르면 녹화 끝</li>\n</ol>\n<p>렌더링된 컴포넌트 다 기록되어 있음</p>\n<ul>\n<li>어떤 컴포넌트가 렌더링 시간이 젤 오래걸리는지</li>\n<li>쓸데없이 재렌더링 자주되는 컴포넌트가 있는지</li>\n<li>렌더링 필요없는 컴포넌트가 있는지 찾아낼 수 있음</li>\n</ul>\n</li>\n<li>\n<ol start=\"5\">\n<li>memo</li>\n</ol>\n<p>리액트 앱은 컴포넌트는 컴포넌트와 관련된 state 혹은 props가 변경되면 항상 자동 재렌더링 됨 → 사이트 구동 속도가 저하</p>\n<p>특히 컴포넌트안에 컴포넌트가 여러개 있을 때,</p>\n<p>Parent(부모 컴포넌트)를 구성하는 state나 props가 변경되면 그것과 관련된 모든 컴포넌트(props를 전송받고있는 자식 컴포넌트)를 전부 자동 재렌더링 시킴</p>\n<p>props 변동사항이 없는 가만히 있던 자식 컴포넌트들도</p>\n<p><strong>재렌더링이 비효율적인 경우!</strong></p>\n<p>아무 js 파일에 <strong>컴포넌트 3개 생성해 예를 들어봄</strong> </p>\n<ol>\n<li>function Cart 에다가 <Parent/> 컴포넌트 집어 넣음 → 미리보기 가능해짐 </li>\n<li>\n<p>컴포넌트가 로드/재렌더링 시 useEffect로 콘솔창에 짧은 단어를 출력</p>\n<p>(useEffect 사용 시 상단에 import)</p>\n</li>\n<li>Cart 안에 있던 <strong>존박, 20</strong> 데이터를 <strong>Child1/Child2</strong> 까지 props를 각각 child1에겐 존박을 child2에겐 20을 전달하려면 </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Cart(){\n  return (\n    &lt;Parent 이름=\"존박\" 나이=\"20\"/>\n  )\n}\n\nfunction Parent(props){\n  return (\n    &lt;div>\n      &lt;Child1 이름={props.존박} />\n      &lt;Child2 나이={props.나이} />\n    &lt;/div>\n  )\n}\n\nfunction Child1(){\n  useEffect( ()=>{ console.log('렌더링됨1') } );\n  return &lt;div>1111&lt;/div>\n}\nfunction Child2(){\n  useEffect( ()=>{ console.log('렌더링됨2') } );\n  return &lt;div>2222&lt;/div>\n}</code></pre></div>\n<p><strong>&#x3C;Parent 이름=“존박”></strong> 여기 전송하고 있는 props를 존박1로 변경시 </p>\n<p>( 리액트 개발자도구의 Components 탭에서<parent> 클릭하면 props 이름: 을 존박 1로 수정가능 )</p>\n<p><strong><Child1>과 존박이랑 아무상관없는<Child2> 이 두개의 컴포넌트가 재렌더링됨.</strong></p>\n<p>렌더링 될 때마다 콘솔창에 출력하라고 useEffect() 작성했기 때문에 콘솔창에 렌더링됨 1 2 1 2 번갈아 나옴</p>\n<p><strong>memo()함수로 컴포넌트 불필요한 재렌더링 막기</strong></p>\n<ol>\n<li>‘react’ 라이브러리로부터 memo import </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, {useEffect, memo} from 'react';\n\nfunction Cart(){\n ....\n}\n\nfunction Parent(props){\n  ....\n}\nfunction Child1(){\n  ....\n}\nlet Child2 = memo(function(){\n  useEffect( ()=>{ console.log('렌더링됨2') } );\n  return &lt;div>2222&lt;/div>\n})</code></pre></div>\n<ol start=\"2\">\n<li>Child2라는 원하는 컴포넌트를 memo로 감싸면 관련있는 props가 변경이 될때만 제렌더링</li>\n<li>\n<p>자바스크립트 함수만드는 두가지 방법 중 let 으로 만들어야 memo로 감쌀 수 있음</p>\n<ul>\n<li>function 함수(){ }</li>\n<li>let 함수 = function() { }</li>\n</ul>\n</li>\n</ol>\n<p>컴포넌트가 너무 크거나 해서 잦은 재렌더링이 부담스러울 때 쓰는 방법</p>\n<p>memo로 감싼 컴포넌트는 기존 props와 바뀐 props를 비교하는 연산이 추가로 진행되어</p>\n<p>props가 크고 복잡하면 이거 자체로도 부담이 </p>\n<p>작은 사이트를 만들거나 컴포넌트 내부에 있는 HTML 양이 매우 적을 경우엔 사용 X</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>Reference</p>","frontmatter":{"date":"November 09, 2021","title":"Shop Project_성능 최적화","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIl_20211109/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/TIl_20211108/","nextSlug":"/TIl_20211106/","prevSlug":"/TIl_20211109/"}},"staticQueryHashes":["1073350324","2938748437"]}