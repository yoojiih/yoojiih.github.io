{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React10/","result":{"data":{"cur":{"id":"7bd5ed81-9721-5e7a-9ad6-0068dca1886a","html":"<h1 id=\"auth\" style=\"position:relative;\"><a href=\"#auth\" aria-label=\"auth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auth</h1>\n<ul>\n<li>아무나 진입 가능한 페이지: Landing Page, About Page</li>\n<li>로그인한 회원만 진입 가능한 페이지: Detail Page</li>\n<li>로그인한 회원은 진입 못하는 페이지: Register Page, Login Page</li>\n<li>관리자만 진입 가능한 페이지: Admin Page</li>\n<li>\n<p>댓글 작성, 파일 전송, 파일 업로드 등등 인증에 관한 것들을 컨트롤 해주기 위해 HOC라는 Higher Order Component를 사용해 페이지들에 대해 진입을 통제\n모든 가능한 케이스에 대해 처리</p>\n<h2 id=\"hoc\" style=\"position:relative;\"><a href=\"#hoc\" aria-label=\"hoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HOC</h2>\n<p>다른 컴포넌트를 받은 후 새로운 컴포넌트를 리턴하는 function\n<code class=\"language-text\">const EnhancedComponent = higherOrderComponent(WrapperComponent);</code>\nAuth 컴포넌트(react 부분)를 HOC로 설정하고 Auth에다가 다른 모든 컴포넌트들을 집어 넣어 새로운 컴포넌트를 생성\nbackend에다가 request를 날려서 현재 페이지에 들어와있는 사람의 상태정보를 HOC으로 가지고 올 수 있기 때문에 그 정보를 가지고 접근 제어를 할 수 있음 (페이지별 인증 컨트롤)</p>\n</li>\n<li>frontend : react, auth 컴포넌트</li>\n<li>backend : node js, request, 상태(로그인된 유저인지 어드민 유저인지 로그인이 되어있지 않은 유저인지)</li>\n</ul>\n<p>// 1. user_action.js에다가 export 작성 2. 타입 정의 후 3. types.js에다가 정의 4. reducer부분에서 import 해주고 case 작성해 리턴\n(client/src/hoc/auth.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> auth <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../_actions/user_action'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">SpecificComponent<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">,</span> adminRoute <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ------------- option ----------------</span>\n    <span class=\"token comment\">//  null    =>  아무나 출입이 가능한 페이지</span>\n    <span class=\"token comment\">//  true    =>  로그인한 유저만 출입이 가능한 페이지</span>\n    <span class=\"token comment\">//  false   =>  로그인한 유저는 출입 불가능한 페이지</span>\n    <span class=\"token comment\">// --------------------------------------</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">AuthenticationCheck</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 백엔드에 request를 날려서 유저의 현재상태를 가져오기 위해 useEffect 사용 (react 라이브러리에서 import)</span>\n<span class=\"token comment\">// server/index.js(백엔드)에 app.get('/api/users/auth',auth,(req,res))API를 이미 만들어 놨기 때문에 </span>\n<span class=\"token comment\">// get request로 요청을 주면 auth라는 미들웨어 부분으로 인해 server/middleware/auth.js로 요청이 오게됨</span>\n<span class=\"token comment\">// 그래서 여기서 토큰이 들어있는 쿠키를 사용해서 이 사람이 로그인한 유저인지 아닌지 판단해서 </span>\n<span class=\"token comment\">// 다시 react부분에 정보를 전달해주는 route부분(server/index.js)에다가 request를 날려주면 됨 </span>\n\n<span class=\"token comment\">// 현재 auth.js으로 돌아와서 원래는 Axios.get('api/users/auth')하면 되지만 여기선 리덕스를 사용할 거기 때문에</span>\n<span class=\"token comment\">// dispatch로 액션을 날려줌 => import {useDispathch} from 'react-redux' 라는 hook사용</span>\n<span class=\"token comment\">// const dispatch = useDispatch();해서 액션 이름은 auth라고 지음 dispatch(auth())</span>\n\n<span class=\"token comment\">// 이 auth를 (client/src/_actions/user_action.js)에다가 작성하기 때문에 현재 auth.js파일 맨 위에  import { auth } from ; 작성해줌</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// End point와 get method로 request 보내줌</span>\n    <span class=\"token comment\">// get메소드니까 바디부분(dataToSubmit)은 필요 없으니 지움</span>\n    <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/auth'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// type는 AUTH_USER라고 해준 후 types.js에다가도 정의 </span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token punctuation\">,</span>\n        payload<span class=\"token operator\">:</span> request\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// (user_reducer.js) -> 이후 auth.js로 돌아감</span>\n<span class=\"token keyword\">case</span> <span class=\"token constant\">AUTH_USER</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> userData<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n        <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n     \n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// then으로 백엔드(server/index.js의 appp.get auth 라우터)에서 처리해서 가져온 유저 정보들이 들어있는 response 안에는 </span>\n            <span class=\"token comment\">// 로그인 하기 전 (localhost:3000/login)</span>\n            <span class=\"token comment\">// type: \"auth_user\" payload: isAuth: false, error: true, __proto__: Object __proto__: Objet</span>\n            <span class=\"token comment\">// 로그인 후 (localhost:3000)</span>\n            <span class=\"token comment\">// type:\"auth_user\" payload: id:\"dsdwdfwdsf\" isAdmin: true isAuth: true email:\"dfsdf@gmail.com\" name: \"jiih\" lastname: \"yoo\" role: 1 __proto__: Object __proto__: Object </span>\n            \n                <span class=\"token comment\">// Auth 체크한 정보로 Auth 컴포넌트에서 분기처리를 해줌</span>\n                <span class=\"token comment\">// 로그인 페이지에 진입하는데 이미 로그인한 사람이면 Auth부분에서 못들어오게 막아주는 분기처리를 해야하기 때문에     </span>\n                <span class=\"token comment\">// 로그인 하지 않은 상태 (isAuth: false)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>isAuth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// 로그인하지 않는 사람이 로그인 한 사람만 들어갈 수 있는 option이 true인 페이지에 들어가려고 하는 거기 때문에 강제로 로그인 페이지로 이동시킴</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// 로그인 한 상태 </span>\n                    <span class=\"token comment\">// admin이 아닌데 admin만 들어갈 수있는 페이지를 들어가려고 할 때(adminRoute가 ture)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>adminRoute <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>isAdmin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// 로그인한 유저가 출입 불가능한 페이지(로그인, 레지스터페이지)를 가려고 할 때</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>option <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n                            props<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>SpecificComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> AuthenticationCheck\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>(server/index.js)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// role 0 -> 일반유저   role 0이 아니면  관리자 </span>\n<span class=\"token comment\">// 이 라우트에서 모든 것을 처리하고 난 후 유저정보들을 클라이언트에 전해주고 있기 때문에 user_reducer.js에서 payload 부분에 모든 유저 데이터가 들어있음 그리고 다시 auth.js로 돌아감 </span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/users/auth'</span><span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//여기 까지 미들웨어를 통과해 왔다는 얘기는  Authentication 이 True 라는 말.</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    _id<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 어드민 유저인지 아니면 false고 맞으면 true</span>\n    isAdmin<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>role <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 인증된 유저인지(즉, 로그인된 사람인지)</span>\n    isAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    lastname<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>lastname<span class=\"token punctuation\">,</span>\n    role<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">,</span>\n    image<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>image\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"hoc-적용\" style=\"position:relative;\"><a href=\"#hoc-%EC%A0%81%EC%9A%A9\" aria-label=\"hoc 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HOC 적용</h1>\n<p>hoc는 다른 컴포넌트를 넣어줘야하기 때문에 모든 페이지 컴포넌트들이 있는 app.js를 이용함</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  BrowserRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span>\n  Switch<span class=\"token punctuation\">,</span>\n  Route<span class=\"token punctuation\">,</span>\n  Link\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> LandingPage <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/views/LandingPage/LandingPage'</span>\n<span class=\"token keyword\">import</span> LoginPage <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/views/LoginPage/LoginPage'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RegisterPage <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/views/RegisterPage/RegisterPage'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1. auth 컴포넌트를 import해옴</span>\n<span class=\"token keyword\">import</span> Auth <span class=\"token keyword\">from</span> <span class=\"token string\">'./hoc/auth'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n        <span class=\"token comment\">// 2. LandingPage 컴포넌트를 불러온 Auth 컴포넌트로 감싸줌 </span>\n        \n        <span class=\"token comment\">// 감싸줄 때 옵션 설정</span>\n        <span class=\"token comment\">// 1번째 파라미터 => client/src/hoc/auth.js의 인자인 SpecificComponent로 해당하는 컴포넌트인 LandingPage을 넣어줌</span>\n        <span class=\"token comment\">// 2번째 파라미터 => 아무나 출입 가능한 페이지인 null라는 옵션 설정해줌 </span>\n        <span class=\"token comment\">// 3번째 파라미터 => admin user만 들어가길 원하는 페이지라면 여기다가 ture라고 해주면 됨. 아무값도 안넣으면 기본값은 null</span>\n\n        <span class=\"token comment\">// ------------- option ----------------</span>\n        <span class=\"token comment\">//  null    =>  아무나 출입이 가능한 페이지 = LandingPage</span>\n        <span class=\"token comment\">//  true    =>  로그인한 유저만 출입이 가능한 페이지</span>\n        <span class=\"token comment\">//  false   =>  로그인한 유저는 출입 불가능한 페이지 = Login, RegisterPage </span>\n        <span class=\"token comment\">// --------------------------------------</span>\n\n          <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">Auth</span><span class=\"token punctuation\">(</span>LandingPage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/login\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">Auth</span><span class=\"token punctuation\">(</span>LoginPage<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/register\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">Auth</span><span class=\"token punctuation\">(</span>RegisterPage<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Switch<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Reference</p>","excerpt":"Auth 아무나 진입 가능한 페이지: Landing Page, About Page 로그인한 회원만 진입 가능한 페이지: Detail Page 로그인한 회원은 진입 못하는 페이지: Register Page, Login Page 관리자만 진입 가능한 페이지: Admin Page 댓글 작성, 파일 전송, 파일 업로드 등등 인증에 관한 것들을 컨트롤 해주기 위해 HOC라는 Higher Order Component를 사용해 페이지들에 대해 진입을 통제\n모든 가능한 케이스에 대해 처리 HOC 다른 컴포넌트를 받은 후 새로운 컴포넌트를 리턴하는 function \n\nAuth 컴포넌트(react 부분)를 HOC로 설정하고 Auth에다가 다른 모든 컴포넌트들을 집어 넣어 새로운 컴포넌트를 생성\nbackend에다가 request를 날려서 현재 페이지에 들어와있는 사람의 상태정보를 HOC으로 가지고 올 수 있기 때문에 그 정보를 가지고 접근 제어를 할 수 있음 (페이지별 인증 컨트롤) frontend …","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React10/"}},"next":{"id":"be6a6ee8-7812-5786-b74c-23873709c50d","html":"<h1 id=\"react-js\" style=\"position:relative;\"><a href=\"#react-js\" aria-label=\"react js permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React js</h1>\n<ul>\n<li>페이스북에서 제공하는 자바스크립트 라이브러리 오픈소스</li>\n<li>자바스크립트로 AJAX, HTML 조작 → 코드 多 / React, Angular, Vue 라이브러리 사용 → 간결한 코드</li>\n<li>Component 기반 구조\nComponent는 독립적인 단위의 소프트웨어 모듈을 말하며 컴포넌트로 이루어져 있어 재사용 성이 뛰어남 (컴포넌트 조립해서 사용)\nReact는 UI(View)를 여러 컴포넌트(component)를 쪼개서 만들기 때문에 전체 코드를 파악하기가 쉬우며 한페이지 내에서도 기능 단위로 캡슐화시켜 코드를 관리하기 때문에 재사용성이 높음\n컴포넌트만 import해 사용하면 되니까 코드 반복 입력할 필요없이 간편하며, 애플리케이션이 복잡해지더라도 코드의 유지보수, 관리가 용이함</li>\n<li>Virtural DOM\n예전에 RealDOM을 쓸 땐 하나만 업데이트 해도 전체를 다 reload했는데 이제는 virtural DOM 형태인 React를 사용해 Virtual DOM을 이용해서 처음에 스냅샷을 찍어 놓고 관찰해 바뀐 부분만을 찾아내서 RealDOM에서 이 부분만을 바꿔주기 때문에 훨씬 더 빠르게 한 부분만을 바꿀 수 있게 해줌</li>\n<li>UX가 뛰어나 좋은 사용자경험 제공</li>\n<li>HTML 관리 편함</li>\n<li>SPA(싱글 페이지 어플리케이션)나 iOS/Android 모바일 앱 제작 가능</li>\n<li>다른 페이지로 넘어가도 새로고침없이 스무스하게 동작하는게 모바일 앱이랑 비슷해 앱이라 부름</li>\n<li>React는 데이터 흐름이 한 방향으로만 흐르는 단방향 데이터 흐름을 가짐\n양방향 데이터 바인딩은 규모가 커질수록 데이터의 흐름을 추적하기가 힘들고 복잡해지는 경향이 있어, 단방향으로 복잡한 앱에서도 데이터 흐름에서 일어나는 변화를 보다 예측 가능할 수 있도록 함</li>\n<li>Props and State\nProps: 부모 컴포넌트에서 자식 컴포넌트로 전달해 주는 변경 불가능한 데이터 (props 전달해준 최상위 부모 컴포넌트만 props 변경 가능)\nState: 컴포넌트 내부에서 선언하며 내부에서 값을 변경 가능. 동적인 데이터를 다룰 때 사용 (사용자와의 상호작용을 통한 변경 시)</li>\n</ul>\n<h2 id=\"bable-webpack\" style=\"position:relative;\"><a href=\"#bable-webpack\" aria-label=\"bable webpack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bable, webpack</h2>\n<ul>\n<li>babel: 최신 자바스크립트 문법을 지원하지 않는 브라우저를 위해 최신 자바스크립트 문법을 구형 브라우저에서도 돌 수 있게 변환시켜줌</li>\n<li>webpack: 이전에 js,css,html 파일 몇개로만 웹사이트를 만들었을 때와 달리 규모가 점점 커지면서 많은 라이브러리, 프레임워크등을 쓰다보니 등장하게 된 것. 많은 모듈들을 하나의 웹팩을 이용해 bundle 해줌 (묶어줌)\nwebpack은 src폴더 내에만 관리해주고 public은 관리를 안해주기 때문에 이미지 파일 같은 것들을 앱에다 넣고 싶으면 src 안에다가 넣어야만  bundle 작용 가능</li>\n</ul>\n<h2 id=\"cra\" style=\"position:relative;\"><a href=\"#cra\" aria-label=\"cra permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRA</h2>\n<p>원래 리액트 앱을 처음 실행 시 webpack이나 babel 같은 것을 설정하기 위해서 엄청나게 많은 시간이 걸렸는데 이젠 CRA(create react app) Command로 바로 시작 가능\n<code class=\"language-text\">npx create-react-app .</code></p>\n<h1 id=\"npm-vs-npx\" style=\"position:relative;\"><a href=\"#npm-vs-npx\" aria-label=\"npm vs npx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm VS npx</h1>\n<p>요즘 대부분의 라이브러리에서 npx의 설치 방식을 공식문서에 소개하는 만큼 굉장히 자주 사용하는 도구이기에 해당 명령어가 어떤 의미를 가지고 있는지를 파악한 후 사용하는 것이 중요</p>\n<h2 id=\"npx란\" style=\"position:relative;\"><a href=\"#npx%EB%9E%80\" aria-label=\"npx란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npx란?</h2>\n<p>npx = Package Runner (실행)</p>\n<ul>\n<li>npx는 npm과 비교대상이 아닌 npm에서 제공하는 npm 레지스트리에 올라가있는 패키지를 쉽게 설치하고 관리할 수 있도록 도와주는 CLI 도구</li>\n<li>npm을 통해 설치하는 모든 종류의 Node.js 기반의 파일들을 굉장히 간단하게 설치하고 실행할 수 있게 도와줌</li>\n<li>npx는 해당 패키지를 실행만 되게 해주기 때문에 가벼움</li>\n</ul>\n<p>npm = Package Manager (관리) </p>\n<ul>\n<li>자바스크립트 패키지 관리 모듈 (Node Package Module)</li>\n<li>라이브러리 레지스트리(저장소)역할과 파일 build 시켜주는 역할을 함, npm에 관한 것은 package.json에 다 정의 되어있음</li>\n</ul>\n<p><code class=\"language-text\">npm install -g npx</code></p>\n<h2 id=\"등장한-이유\" style=\"position:relative;\"><a href=\"#%EB%93%B1%EC%9E%A5%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"등장한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>등장한 이유</h2>\n<p>과거 npm으로 패키지를 설치할 땐 전역으로 패키지를 설치해 의존성 라이브러리들을 전체적으로 관리하는 방법과 특정 프로젝트에만 의존성 라이브러리를 설치하는 방법이 존재했음\n이렇게 되면 패키지 업데이트 될 때 전역 따로 로컬 따로 업데이트 해야하기에 번거롭고 모듈 업데이트가 확인 불가하며 모듈 업데이트 변경으로 인한 다른 모듈 에러발생 등의 문제가 발생하는데 이를 해결하는 도구가 npx인 것\nnpx는 기존에 npm 설치 방법과는 다르게 일일이 설치, 실행, 제거를 할 필요 없이 일회성으로 원하는 패키지를 npm 레지스트리에 접근해서 실행시키고 설치하는 실행도구라\n패키지 설치 및 업데이트를 하지 않더라도 npm 레지스트리에 올라가 있는 최신 버전을 실행시키고 설치만 시키면 끝\n예를들어 원래는 create-react-app할 때 npm install -g create-react-app 이런식으로 global디렉토리에 다운받았었는데\n이제는 npx가 npm registry에서 create-react-app을 찾아서(look up) 굳이 다운로드 받지 않다도 실행 시켜줌</p>\n<h2 id=\"npx-이점\" style=\"position:relative;\"><a href=\"#npx-%EC%9D%B4%EC%A0%90\" aria-label=\"npx 이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npx 이점</h2>\n<ol>\n<li>global로 컴퓨터에 다운받지 않아도 되니까 disk space를 낭비하지 않을 수 있음</li>\n<li>npm registry에 있는 create-react-app을 찾아서(look up)실행 시켜주는 거니까 항상 최신버전 사용 가능</li>\n</ol>\n<h2 id=\"사용\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9\" aria-label=\"사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용</h2>\n<ul>\n<li>npm run-script를 사용하지 않고 로컬에 설치된 패키지를 사용할 경우 npx A만 입력하면 로컬 devDependencies에 설치된 A 패키지를 바로 실행가능\n{\n“devDependencies”: {\n“A”: “^1.4.0”\n}\n}</li>\n<li>로컬에 존재하지 않는 패키지를 일회성 명령으로 원하는 패키지를 npm 레지스트리에 접근해 실행, 설치\nnpx는 우선적으로 로컬에 패키지가 설치되어있는지 파악한 후 패키지가 존재하지 않는다면, npm 레지스트리에서 해당 이름의 패키지가 자동으로 설치되고 호출됨\n그래서 패키지를 업데이트 하지 않아도 npm 레지스트리에 올라가 있는 최신 버전을 수행함</li>\n<li>gist-based scripts를 실행할 경우\n<code class=\"language-text\">npx gist 주소</code>\nGithub의 gist에 올라가 있는 스크립트를 npx를 사용해서 쉽게 실행 간으</li>\n<li>특정 노드 버전의 스크립트를 실행할 경우\nnode 패키지는 nvm, nave 또는 n과 같은 노드 버전 관리 도구를 사용하지 않고도 서로 다른 노드 버전을 사용하여 노드 명령을 매우 쉽게 쓸 수 있는 툴</li>\n</ul>\n<h2 id=\"react-구조\" style=\"position:relative;\"><a href=\"#react-%EA%B5%AC%EC%A1%B0\" aria-label=\"react 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 구조</h2>\n<ul>\n<li>index.js 파일:\nReactDOM.render(<App />, document.getElementById(‘root’));\npublic/index.html의  <div id=\"root\"></div> 부분에다가 보여주고 싶은 컴포넌트를 넣어주는데 App컴포넌트라고 정의를 해줌\n즉, app.js 페이지 렌더링 됨</li>\n</ul>\n<p>&#x3C; Src 폴더 내 > </p>\n<ul>\n<li>_actions, _reducer : Redux를 위한 폴더들</li>\n<li>components/views : Page들을 넣음 - Landing Page: 처음로딩되는 페이지에 관한 파일</li>\n<li>components/views/Sections : 해당 페이지에 관련된 css파일이나 component들을 넣음</li>\n<li>App.js: Routing 관련 처리 (페이지 별 분류)</li>\n<li>Config.js : 환경변수 정의</li>\n<li>hoc : Higher Order Component. 다른 컴포넌트를 갖는 function\n예를 들어 admin이라는 컴포넌트에 진입시 auth라는 hoc이 유저의 자격을 체크해서 컴포넌트에 진입 여부를 결정해 다음 액션을 취할 수있게 해줌\nauth 안에 여러 컴포넌트들을 넣어놓고 사용 가능 </li>\n<li>utils : 여러군데에서 쓰일 수 있는 것들을 이곳에 넣어 어디서든 쓸 수있게해줌</li>\n</ul>\n<h2 id=\"react-router-dom--페이지간-이동-\" style=\"position:relative;\"><a href=\"#react-router-dom--%ED%8E%98%EC%9D%B4%EC%A7%80%EA%B0%84-%EC%9D%B4%EB%8F%99-\" aria-label=\"react router dom  페이지간 이동  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Router Dom ( 페이지간 이동 )</h2>\n<p><a href=\"https://v5.reactrouter.com/web/example/basic\">참고</a>\n<code class=\"language-text\">npm i react-router-dom</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  BrowserRouter <span class=\"token keyword\">as</span> Router<span class=\"token punctuation\">,</span>\n  Switch<span class=\"token punctuation\">,</span>\n  Route<span class=\"token punctuation\">,</span>\n  Link\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> functiion <span class=\"token function\">BasicExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n   <span class=\"token operator\">&lt;</span>Router<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/signin\"</span><span class=\"token operator\">></span>login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/signup\"</span><span class=\"token operator\">></span>register<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Switch<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route exact path<span class=\"token operator\">=</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">></span>\n        <span class=\"token comment\">//라우터 안에 Home 컴포넌트 삽입</span>\n          <span class=\"token operator\">&lt;</span>LandingPage <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n        <span class=\"token comment\">// 한줄로 표현 가능</span>\n       <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/signin\"</span> component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>LandingPage<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Route path<span class=\"token operator\">=</span><span class=\"token string\">\"/signup\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>SignupPage <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Route<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Router<span class=\"token operator\">></span>\n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nfuntion <span class=\"token function\">LandingPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Home<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 위의 컴포넌트를 따로 파일로 빼서 import 해올 수 있음</span>\n<span class=\"token keyword\">import</span> SigninPage <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/views/SigninPage/SigninPage'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>client<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>views<span class=\"token operator\">/</span>SigninPages<span class=\"token operator\">/</span>SigninPage<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\nfuntion <span class=\"token function\">SigninPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Login<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> SigninPage\n\nSignupPage<span class=\"token operator\">...</span> </code></pre></div>\n<h1 id=\"react-vs-react-hooks\" style=\"position:relative;\"><a href=\"#react-vs-react-hooks\" aria-label=\"react vs react hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React VS React Hooks</h1>\n<h2 id=\"react-component\" style=\"position:relative;\"><a href=\"#react-component\" aria-label=\"react component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Component</h2>\n<ul>\n<li>\n<p>Class Component\nProvide more features 더 많은 기능들 사용 가능\nLonger Code 코드 길어짐\nMore Complex Code 복잡한 코드\nSlower Performance 성능측면에서 느려짐</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// react 생성 순서(Life cycle) </span>\n<span class=\"token comment\">// 제일 먼저 constructor 실행</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// state을 먼저 부여해줌 name은 아무것도 없는 걸로 해줌</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// render후에 실행되는 부분</span>\n<span class=\"token comment\">// componentDidMount을 통해 데이터를 가져오거나 하고싶은 것들을 해주면 됨</span>\n<span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user/name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// constructor다음 render </span>\n<span class=\"token comment\">// DOM에다가 알맞게 넣어줘서 화면에 랜더링 해주는 것 </span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> My name is <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Functional Component\nProvide less features 한정적인 기능\nShorter Code 코드 짧음\nSimpler Code 코드 간단\nFaster Performance 성능이 더 좋음</li>\n</ul>\n<h2 id=\"functional-component에선-쓰지-못하는-class-component-기능\" style=\"position:relative;\"><a href=\"#functional-component%EC%97%90%EC%84%A0-%EC%93%B0%EC%A7%80-%EB%AA%BB%ED%95%98%EB%8A%94-class-component-%EA%B8%B0%EB%8A%A5\" aria-label=\"functional component에선 쓰지 못하는 class component 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional Component에선 쓰지 못하는 Class Component 기능</h2>\n<p><a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">참고</a>\nClass Component를 이용할 때 리액트에서 처음에 페이지 켤 때 생성, 업데이트. 삭제 시\nconstructor-> render-> react updates DOM and refs -> componentDidMount 이런식의 과정을 거치는데 functional component에서는 이것들을 쓸 수가 없기에 빠르다는 장점을 제외하고는 기능이 제한적이다보니 대부분 클래스 컴포넌트를 사용해왔지만\nReact에서 Hooks을 발표한 이후부턴 life cycle, state 부여하는 기능등을 통해 functional component만으로도 Class Component기능들을 쓸 수있게됨\ncomponentDidMount = useEffect, this.state 를 useState로 대체해서 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Hooks</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>Name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// useEffect Hooks</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      Axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user/name'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> My name is <span class=\"token punctuation\">{</span>Name<span class=\"token punctuation\">}</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Reference</p>\n<p><a href=\"https://webruden.tistory.com/275\">베이스 캠프</a>\n<a href=\"https://velog.io/@jini_eun/React-React.js%EB%9E%80-%EA%B0%84%EB%8B%A8-%EC%A0%95%EB%A6%AC\">Jini님 블로그</a></p>","frontmatter":{"date":"November 15, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React5/"}},"prev":{"id":"3a04554a-4517-5113-bcf8-d18315143d10","html":"<h1 id=\"data-request-response-flow--axios\" style=\"position:relative;\"><a href=\"#data-request-response-flow--axios\" aria-label=\"data request response flow  axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Request, Response Flow &#x26; Axios</h1>\n<p><code class=\"language-text\">Database</code> &#x3C;=> <code class=\"language-text\">server</code> -response-> <code class=\"language-text\">client</code>\n&#x3C;-request-</p>\n<blockquote>\n<p>로그인 과정으로 예를 들자면</p>\n</blockquote>\n<blockquote>\n<p>유저가 클라이언트에서 이름과 비밀번호를 넣고 로그인 버튼 누르면 그 요청(request)이 서버로 이동하고 서버에서는 db에 유저 아이디가 있는지 찾고 있다면 보내준 비밀번호가 맞는지 체크함</p>\n</blockquote>\n<blockquote>\n<p>비밀번호 맞으면 response를 클라이언트 측에 성공했다는 걸 전해주고 비밀번호가 틀리거나 유저 자체가 없으면 없다는 정보들을 클라이언트에 보내줌</p>\n</blockquote>\n<h1 id=\"axios\" style=\"position:relative;\"><a href=\"#axios\" aria-label=\"axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Axios</h1>\n<p><a href=\"https://yoojiih.github.io/TIL_20211029/\">axios 참고</a>\n데이터 요청시 axios 라이브러리를 사용해서 보냄</p>\n<h2 id=\"axios-설치\" style=\"position:relative;\"><a href=\"#axios-%EC%84%A4%EC%B9%98\" aria-label=\"axios 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>axios 설치</h2>\n<p><code class=\"language-text\">npm i axios</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>client<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>views<span class=\"token operator\">/</span>LandingPage<span class=\"token operator\">/</span>LandingPage<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">LandingPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// LandingPage에 들어오자마자 실행되는 부분</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//get request를 서버(server/index.js)로 보냄. end point는 /api/hello</span>\n        axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/hello'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 서버에서 돌아오는 response를 콘솔창에 출력</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>시작 페이지<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LandingPage</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>server<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// request를 받는 router 생성 </span>\n<span class=\"token comment\">// 클라이언트측에서 get으로 줬으니 get메소드 사용, end point는 /api/hello, (req, res) callback을 주고 </span>\n<span class=\"token comment\">// 원래 라우터 같은 경우 request받은 걸로 처리 후 front로 다시 response줌 (지금은 프론트에 response(메시지)만 줌)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!~~ '</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"cors이슈-proxy-설정\" style=\"position:relative;\"><a href=\"#cors%EC%9D%B4%EC%8A%88-proxy-%EC%84%A4%EC%A0%95\" aria-label=\"cors이슈 proxy 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS이슈, Proxy 설정</h1>\n<p>Cross-Origin Resource Sharing(CORS): origin이 다른데 resource를 Sharing할 때 적용되는 정책\nweb document와 서버가 교환 시 same origin이면 항상 허용되지만 다르면 정책에 의해 컨트롤 당함</p>\n<p>Server 포트번호 5000번 -> localhost:5000 (Response) - origin</p>\n<p>Client 포트번호 3000번 -> localhost:3000 (Request) - origin</p>\n<p>axios.get(‘/api/hello’) 이렇게 요청 보내면 3000번으로 가기 때문에 5000번인 서버는 받지 못하는 상황 벌어짐\n이렇게 두개의 다른 포트를 가지고 있는 서버는 Cors 보안 정책 때문에 아무 설정없이 서버에 request를 보낼 수 없음</p>\n<h2 id=\"해결방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\" aria-label=\"해결방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법</h2>\n<ul>\n<li>방법 1: 개발자 도구 사용(Chrome Cors Extension)</li>\n</ul>\n<p>개발자들만 사용하는 방법이기 때문에 제한적임</p>\n<p>프론트엔드 부분만 컨트롤 가능한 상황 -> json 방식을 이용해 모든 request를 get request로 보냄으로써 해결이 가능. but 제한적임\nbackend 와 frontend 모두 컨트롤 할 수있는 상황 ->  서버에다가 클라이언트에서 오는 건 받을 수 있게 해주고 클라이언트 측에서도 보낼 때 ~한 것들은 허용해달라고 request를 보낼 때 같이 전달해서 보내면 해결됨</p>\n<ul>\n<li>방법 2: Proxy 사용\n<a href=\"https://create-react-app.dev/docs/proxying-api-requests-in-development/\">Configuring the Proxy Manually</a>\nProxy를 임의로 설정하기 위해 client 부분에 모듈 다운로드</li>\n</ul>\n<p><code class=\"language-text\">npm install http-proxy-middleware --save</code></p>\n<p>그 다음 src/setupProxy.js 파일 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createProxyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http-proxy-middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createProxyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// server/index.js에서 정의한 port번호가 5000번이니까 target을 5000번으로 설정</span>\n      <span class=\"token comment\">// front end 3000번 -> back end 5000번으로 주겠다고 설정해 놓음</span>\n      target<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span>\n      changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"proxy-server\" style=\"position:relative;\"><a href=\"#proxy-server\" aria-label=\"proxy server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proxy Server</h1>\n<p>보안상의 이유 등으로 직접 통신할 수 없는 두 점 사이에서 대리로 통신(request, response)을 수행하는 기능을 프록시, 그 중계 기능을 하는 컴퓨터 시스템이나 응용프로그램을 프록시 서버라 함</p>\n<h2 id=\"프록시-서버의-주요-특징\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%A3%BC%EC%9A%94-%ED%8A%B9%EC%A7%95\" aria-label=\"프록시 서버의 주요 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 서버의 주요 특징</h2>\n<ol>\n<li>프록시 서버는 클라이언트가 자신을 통해서 다른 네트워크 서비스에 간접적으로 접속할 수 있게 해줌 (pc와 외부 인터넷 사이의 징검다리 역할) </li>\n</ol>\n<p>  시스템에 방화벽을 가지고 있는 경우 외부와의 통신을 위해 만들어 놓은 서버 -> 외부 인터넷의 내부 침입을 막는 방화벽 기능</p>\n<ol start=\"2\">\n<li>프록시 서버는 프록시 서버에 요청된 웹 페이지 내용들을 캐시를 이용해 저장 (캐시 데이터, 공유 데이터 제공 기능)</li>\n</ol>\n<p>  Proxy 서버는 사용자의 요청을 Cahche해서 동일 요청이 들어오면 Cache 자원을 반환하기 때문에 리소스로의 접근을 빠르게 할 수 있음</p>\n<p>  예를들어 특정 사이트에 접속시 static한 이미지등을 proxy서버에 저장 시켜놔서 보고 싶을 때 빠르게 proxy서버에 담겨있는 해당 이미지를 볼 수 있음. </p>\n<p>  이렇게 하면 전송시간도 절약하고 불필요하게 외부와의 연결을 하지 않아도 되며 외부와의 트래픽을 줄이게 됨으로써 네트워크 병목현상을 방지 가능</p>\n<blockquote>\n<p>캐시는 컴퓨터의 기억장치에 관련된 기술로, 속도가 느린 기억장치와 속도가 빠른 기억장치가 존재할 경우, 빠른 기억장치에 느린 기억장치의 내용 중 최근에 사용한 일부를 넣어두는 것을 말한다. 이 경우 같은 내용을 여러 번 참조할 때, 두 번째부터는 빠른 속도로 읽을 수 있다.</p>\n</blockquote>\n<ul>\n<li>\n<p>IP 조작\n임의로 보낸 유저 ip 조작할 수 있어 실제 ip를 모르게해 더 나은 보안을 제공함</p>\n<p>추가적으로 ip뿐만 아니라 데이터도 중간에서 조작 가능</p>\n</li>\n<li>A Client(Proxy Server 설치)가 B Proxy에 접근하여 C인터넷(google.com)에 접속하는 방식</li>\n<li>\n<p>네트워크 서비스나 콘텐츠로의 접근 정책을 적용 가능</p>\n<p>ACL(access control list ACL): 사이트 접근에 대한 접근 정책을 정의</p>\n<p>회사에서 직원들이나 집안에서 아이들 특정 사이트 접근제어</p>\n</li>\n<li>\n<p>사용률 기록 &#x26; 검사</p>\n<p>log/Audit: 회사 내 직원의 인터넷 사용을 레포팅할 수 있다. 반대로 인트라넷의 사용을 레포팅할 수 도 있다.</p>\n</li>\n<li>보안 및 통제를 뚫고 나가기 위해 사용할 수 있으며 역으로 IP 추적을 당하지 않을 목적으로 사용. 역기능이긴 하지만 우회를 할 수 있도록 함</li>\n<li>\n<p>밖으로 나가는 콘텐츠 검사</p>\n<p>중계 서버인 프록시 서버를 거치기 때문에 콘텐츠를 검사할 수 있다. </p>\n<p>보안 상의 이유로 80 포트 외에 포트를 막아놓는 지역 제한을 우회해 다른 서비스 이용 가능</p>\n</li>\n<li>익명의 사용자가 서버에 접근하는 것을 막아 보안 유지</li>\n</ul>\n<h1 id=\"concurrently를-이용해-front-back-서버-한번에-켜기\" style=\"position:relative;\"><a href=\"#concurrently%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-front-back-%EC%84%9C%EB%B2%84-%ED%95%9C%EB%B2%88%EC%97%90-%EC%BC%9C%EA%B8%B0\" aria-label=\"concurrently를 이용해 front back 서버 한번에 켜기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concurrently를 이용해 front, back 서버 한번에 켜기</h1>\n<p>여러개의 commands를 동시에 작동 시킬 수 있게해주는 tool\n라이브러리 설치\n<code class=\"language-text\">npm i concurrently --save\n사용법\npackage.json파일에 스크립트 내 켜고 싶은 것들 차례로 나열함\nconcurrently \"command1 arg\" \"commmand2 arg\"\nclient 폴더 내 start로 실행 하기 위해 prefix 사용</code>“dev”: “concurrently ”npm run backend” ”npm run start —prefix client”“`</p>\n<p>Reference\n<a href=\"https://velog.io/@jangwonyoon/Proxy-Server%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%9E%80\">jang님 블로그</a></p>","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React6/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React10/","nextSlug":"/Shop_React5/","prevSlug":"/Shop_React6/"}},"staticQueryHashes":["1073350324","2938748437"]}