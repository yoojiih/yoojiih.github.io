{"componentChunkName":"component---src-templates-blog-template-js","path":"/TIL_20211102/","result":{"data":{"cur":{"id":"7f8bd5a9-f505-5215-8c68-b270aa6190cd","html":"<h1 id=\"next-js에서-라우팅-구현\" style=\"position:relative;\"><a href=\"#next-js%EC%97%90%EC%84%9C-%EB%9D%BC%EC%9A%B0%ED%8C%85-%EA%B5%AC%ED%98%84\" aria-label=\"next js에서 라우팅 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next js에서 라우팅 구현</h1>\n<h2 id=\"페이지-이동\" style=\"position:relative;\"><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99\" aria-label=\"페이지 이동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>페이지 이동</h2>\n<ol>\n<li>\n<p>이동할 페이지를 만들기 위해 pages 디렉토리 내부에 파일 생성</p>\n<blockquote>\n<p>pages/about.js\npages/blog/[slug].js</p>\n</blockquote>\n</li>\n<li>\n<p>간단하게 파일 내부 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">About</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>about page<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>메인 페이지(index.js)에서 페이지 이동을 위해 “next/link”에서 모듈을 불러와서 Link라는 태그를 작성</li>\n<li>\n<p>링크 태그 안에 a 태그 넣어주고  Link 태그의 속성에는 href를 넣어서 어디로 이동해야 파일이 있는지 명시</p>\n<blockquote>\n<p>라우트가 아닌 외부링크를 사용시에는 Link 사용 x a태그에 주소를 입력.\nclassName같은 속성을 부여할 일이 있을 경우 Link가 아닌 a 태그에 부여할 것.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'next/link'</span></code></pre></div>\n</li>\n</ol>\n<p>function Home() {\nreturn (\n&#x3C;>\n<Link href=\"/\">\n<a>Home</a>\n</Link>\n<Link href=\"/about\">\n<a>About Us</a>\n</Link>\n<Link href=\"/blog/hello-world\">\n<a>Blog Post</a>\n</Link>\n&#x3C;/>\n)\n}</p>\n<p>export default Home</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 동적 페이지 생성 (dynamic Routes)\n\n## Dynamic Routes \n[Nextjs공식문서](https://nextjs.org/docs/routing/dynamic-routes)\n\n사용 예시) 제품 클릭 시 각 id에 해당하는 상세 페이지로 전환\nview/1 이나 view/abc로 들어왔을 때 모두 pages/view/[id].js 페이지로 가는 것 (pages디렉토리 내에 디렉토리 하나 더 생성 후 [id].js 파일을 생성)\n\n1. 누르면 페이지 보내줘야 하니까  import Link from \"next/link\";\n2. href는 각 아이템의 id로 가게함 (href로 써주는건 a태그랑 사용법 같음)\n    - 방법 1) 쿼리스트링으로 원하는 정보 넘겨주기 &lt;Link href=\"/view/abc?name=${props.name}\">\n    페이지를 요청할 때 페이지명?a=b와 같은 형식으로 값을 넘겨주는 쿼리 스트링으로 동적 페이지 생성\n    - 방법 2) [파일명].js 방식 &lt;Link href=\"/view/${props.name}\"> \n    실제 이동할 경로를 의미하며 URL에 어떻게 보일지를 결정. 각 /view/이름 으로 URL창에 나타남\n    [...id]로 정의하게 되면 {id: [1,2,3]} 은 post/1/2/3 링크와 매치가능.\n    /의 개수만큼 폴더를 만들지 않아도 Link에 /를 여러번 사용가능.\n3. next/router에 존재하는 모듈 중 하나인 useRouter Hook 이용해 쿼리에 담긴 문자열을 받음\n4. [id]를 통해서 url 얻어낸 다음에 \n5. const {id} = router.query \n```javascript\n// pages/view/[id].js\nimport { useRouter } from 'next/router';\n\nconst Post = () => {\n    const router = useRouter();\n    const { id } = router.query;\n    return &lt;p>Post: {id}&lt;/p>;\n};\n\nexport default Post;</code></pre></div>\n<p><a href=\"https://nextjs.org/docs/api-reference/next/link\">Nextjs공식문서</a>\n<a href=\"https://velog.io/@jakeseo_me/Next.js-%EB%B9%A8%EB%A6%AC-%EB%B0%B0%EC%9A%B0%EA%B8%B0-y0jz9oebn0#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">jakeseo_me님 블로그</a></p>","excerpt":"Next js에서 라우팅 구현 페이지 이동 이동할 페이지를 만들기 위해 pages 디렉토리 내부에 파일 생성 pages/about.js\npages/blog/slug.js 간단하게 파일 내부 구현 메인 페이지(index.js)에서 페이지 이동을 위해 “next/link”에서 모듈을 불러와서 Link라는 태그를 작성 링크 태그 안에 a 태그 넣어주고  Link 태그의 속성에는 href를 넣어서 어디로 이동해야 파일이 있는지 명시 라우트가 아닌 외부링크를 사용시에는 Link 사용 x a태그에 주소를 입력.\nclassName같은 속성을 부여할 일이 있을 경우 Link가 아닌 a 태그에 부여할 것. function Home() {\n  return (\n      <>\n        \n          Home\n        \n        \n          About Us\n        \n        \n          Blog Post\n        \n    </>\n  )\n} expor…","frontmatter":{"date":"November 02, 2021","title":"Shop Project_동적 라우팅","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211102/"}},"next":{"id":"7e4528e6-b3b0-5645-8918-e38e459822d5","html":"<h2 id=\"nextjs는-기본적으로-static-generation이-적용되어-있으며-외부데이터api-db등을-포함하여-렌더링해야할-때-ssg-ssr을-선택적으로-적용할-수-있다\" style=\"position:relative;\"><a href=\"#nextjs%EB%8A%94-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9C%BC%EB%A1%9C-static-generation%EC%9D%B4-%EC%A0%81%EC%9A%A9%EB%90%98%EC%96%B4-%EC%9E%88%EC%9C%BC%EB%A9%B0-%EC%99%B8%EB%B6%80%EB%8D%B0%EC%9D%B4%ED%84%B0api-db%EB%93%B1%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EC%97%AC-%EB%A0%8C%EB%8D%94%EB%A7%81%ED%95%B4%EC%95%BC%ED%95%A0-%EB%95%8C-ssg-ssr%EC%9D%84-%EC%84%A0%ED%83%9D%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%A0%81%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"nextjs는 기본적으로 static generation이 적용되어 있으며 외부데이터api db등을 포함하여 렌더링해야할 때 ssg ssr을 선택적으로 적용할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next.js는 기본적으로 static generation이 적용되어 있으며 외부데이터(API, DB)등을 포함하여 렌더링해야할 때 ssg ssr을 선택적으로 적용할 수 있다.</h2>\n<p><a href=\"https://nextjs.org/docs/basic-features/pages\">Nextjs공식문서</a></p>\n<h2 id=\"static-generation-with-data-recommended\" style=\"position:relative;\"><a href=\"#static-generation-with-data-recommended\" aria-label=\"static generation with data recommended permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Generation with data (Recommended)</h2>\n<p>정적 생성은 build시 HTML을 생성한다\n보통 데이터에 의존하지 않는 페이지들은 모두 이에 해당 (ex.인터렉션에 관계없이 똑같은 정보를 제공해야 하는 프로모션 페이지)\n또한 페이지의 컨텐츠나 경로가 외부 데이터에 의존할 경우, getStaticProps 와 getStaticPaths 를 활용하여 HTML을 정적 생성할 수 있다.</p>\n<h1 id=\"data-fetching\" style=\"position:relative;\"><a href=\"#data-fetching\" aria-label=\"data fetching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Fetching</h1>\n<p>Next.js에서 제공하는 Functions (fetching external data for pre-rendering)\nYour page <code class=\"language-text\">content</code> depends on external data: <code class=\"language-text\">Use getStaticProps</code>\nYour page <code class=\"language-text\">paths</code> depend on external data: <code class=\"language-text\">Use getStaticPaths</code> (usually in addition to getStaticProps).</p>\n<blockquote>\n<p>The HTML is generated at build time and will be reused on each request. To make a page use Static Generation, either export the page component, or export getStaticProps (and getStaticPaths if necessary). It’s great for pages that can be pre-rendered ahead of a user’s request. You can also use it with Client-side Rendering to bring in additional data.</p>\n</blockquote>\n<h2 id=\"server-side-rendering\" style=\"position:relative;\"><a href=\"#server-side-rendering\" aria-label=\"server side rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server-side Rendering</h2>\n<p>매 요청마다 데이터를 fetching해야 한다면 getServerSideProps를 사용해 SSR을 함\ngetServerSideProps is run on every request instead of on build time.(getStaticProps와의 차이점)</p>\n<blockquote>\n<p>The HTML is generated on each request. To make a page use Server-side Rendering, export getServerSideProps. Because Server-side Rendering results in slower performance than Static Generation, use this only if absolutely necessary.</p>\n</blockquote>\n<h1 id=\"getinitialprops-next-93에선-사용-권장하지-않음\" style=\"position:relative;\"><a href=\"#getinitialprops-next-93%EC%97%90%EC%84%A0-%EC%82%AC%EC%9A%A9-%EA%B6%8C%EC%9E%A5%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C\" aria-label=\"getinitialprops next 93에선 사용 권장하지 않음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getInitialProps (Next 9.3에선 사용 권장하지 않음)</h1>\n<p>React에서 프로젝트를 진행하면 렌더링 후에 componentDidMount나 useEffect()로 데이터를 불러와야 하지만\nNext에선 getInitialProps를 통해 데이터를 미리 불러와 한 번에 렌더링이 가능해 속도 빨라지고 코드상 처리 깔끔해짐\n어디든지 사용가능한 공통 데이터가 필요 시 _app.js에 getInitialProps를 붙이면 되고,그게 아니면 페이지마다 붙이면 됨\n자식 컴포넌트에서 사용할 수 없으며, 오로지 default export 컴포넌트에서만 사용가능</p>\n<h1 id=\"getstaticprops-vs-getstaticpaths-vs-getserversideprops\" style=\"position:relative;\"><a href=\"#getstaticprops-vs-getstaticpaths-vs-getserversideprops\" aria-label=\"getstaticprops vs getstaticpaths vs getserversideprops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getStaticProps VS getStaticPaths VS getServerSideProps</h1>\n<p>getStaticProps (Static Generation): 빌드(build)할 때 데이터를 불러옴\ngetStaticPaths (Static Generation): 데이터에 기반하여 pre-render때 특정한 동적 라우팅 구현\ngetServerSideProps (Server-side Rendering): 요청(request) 있을 때 데이터를 불러옴</p>\n<h1 id=\"getstaticprops-함수\" style=\"position:relative;\"><a href=\"#getstaticprops-%ED%95%A8%EC%88%98\" aria-label=\"getstaticprops 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getStaticProps 함수</h1>\n<blockquote>\n<p>어떤 페이지에서 getStaticProps 함수를 async로 export하면, getStaticProps에서 리턴되는 props를 가지고 페이지를 pre-render 한다.</p>\n</blockquote>\n<ul>\n<li>초기 렌더링 때 한번 실행된 후 실행안됨</li>\n<li>\n<p>기본 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 컴포넌트로 넘어갈 props</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>context 매개변수\nparams: 페이지 이름이 [id].js (동적라우팅)-> params는 {id: …} 라우팅 매개변수 지님\npreview: true일 때 preview 모드가 된다.\npreviewData: setPreviewData로 설정한 preview data를 지닌다.</li>\n<li>API, DB 등 외부 데이터를 포함하고 있을 경우 렌더링 하는 방법\nasync function으로 컴포넌트 내에 외부데이터를 포함하여 pre-render하기 위해 사용\ngetStaticProps 함수는 서버 단에서 build 시간에 호출됨 (직접 데이터베이스 쿼리에도 접근 가능)\n{ props: posts }을 리턴하여 Blog 컴포넌트는 getStaticProps()에 의해 build 시간에 ‘posts’를 props로 받아서 사용\n-> 외부데이터를 pre-render하기전에 getStaticProps함수를 한번 거치는 것\nFetch API (자바스크립트에 내장된) 사용 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Blog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//먼저 getStaticProps 함수 내에 외부 데이터를 props객체로 반환한다.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://.../posts'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 외부데이터</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      posts<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Blog</code></pre></div>\n<ul>\n<li>\n<p>getStaticProps가 필요한 경우</p>\n<ol>\n<li>페이지를 렌더링 하는데 사용자의 요청보다 먼저 build 시간에 필요한 데이터를 가져올 때</li>\n<li>headless CMS에서 데이터가 올 때</li>\n<li>공개적으로 캐시될 수 있는 데이터(특정 유저가 아닌)</li>\n<li>페이지가 사전 렌더링(ex. SEO)되어야 하고 엄청 빨라야 할 때(getStatidProps는 HTML과 JSON 파일을 생성하며, 이 두 파일 모두 CDN에서 성능을 위해 캐시할 수 있음)</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"getstaticpaths\" style=\"position:relative;\"><a href=\"#getstaticpaths\" aria-label=\"getstaticpaths permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getStaticPaths</h1>\n<p>Next는 pre-render에서 정적으로 getStaticPaths에서 호출하는 경로들을 가져옴\n외부데이터를 이용하여 data를 빌드타임에 fetching하면서 data에 따라 다른페이지를 보여줄 동적 라우팅이 필요한 경우\nid의 경우에는 동적라우트 컴포넌트 파일명을 따름 ([id].js -> id: “1”, [hi].js -> hi: 1)\nLink href 주소와 매칭이 되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    paths<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> or <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">const</span> postData <span class=\"token operator\">=</span> <span class=\"token function\">context</span><span class=\"token punctuation\">(</span>getStaticPaths에서 리턴한 값<span class=\"token punctuation\">)</span>를 이용하여 데이터를 가공<span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            postData<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>원하는 컴포넌트에서 가공된 데이터를 활용</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>postData<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>paths\npaths: 동적 라우팅 경로를 pre-render함\nparams: 페이지 이름에 사용되는 매개변수와 일치\nex) pages/posts/[postId]/[commentId] -> params는 postId와 commentId를 포함해야 함\npages/[…slug]와 같이 모든 경로를 사용 -> params는 slug가 담긴 배열이여야 함</li>\n<li>fallback\nfalse: getStaticPaths로 리턴되지 않은 것은 모두 404 페이지 뜨게함\ntrue: getStaticPaths로 리턴되는 것은 build 시간에 HTML이 렌더됨\nparams가 수천개가 넘어갈 경우 빌드타임에 수천개의 페이지가 만들어지는 문제점을 해결</li>\n</ul>\n<h1 id=\"getserversideprops-server-side-rendering\" style=\"position:relative;\"><a href=\"#getserversideprops-server-side-rendering\" aria-label=\"getserversideprops server side rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getServerSideProps (Server-Side rendering)</h1>\n<p>빌드타임 이후 유저의 요청(request time)에 즉각 반응하여 SEO를 적용한 새로운 외부 데이터를 제공해야 하는 ssr의 경우\npage 요청때마다 항상 실행되어 리턴되는 데이터를 getServerSideProps로 pre-render함 </p>\n<ul>\n<li>\n<p>기본 문법</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>외부 API에서 데이터 호출 시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://.../data</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 페이지에 props로 데이터 보내기</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Context Object (getStaticProps와 비슷)\nparams: 페이지 이름이 [id].js (동적라우팅)-> params는 {id: …} 라우팅 매개변수 지님\nreq: HTTP request object\nres: HTTP response object\nquery: 쿼리스트링\npreview: true일 때 preview 모드 됨\npreviewData: setPreviewData로 설정한 preview data를 지닌다.</li>\n<li>\n<p>getServerSideProp가 필요한 경우</p>\n<ul>\n<li>요청(request)할 때 데이터를 가져와야 하는 페이지를 미리 렌더해야 할때 사용\n서버가 모든 요청에 대한 결과를 계산하고, 추가 구성 없이 CDN에 의해 결과를 캐시할 수 없기 때문에\n첫 번째 바이트까지의 시간(TTFB)은 getStaticProps보다 느리다.</li>\n<li>만약 미리 렌더를 하지 않아도 될 경우, 클라이언트 단에서 데이터를 불러오는 것을 고려해야 한다.</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://velog.io/@gytlr01/Next.js-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95\">Hyosik님 블로그</a>\n<a href=\"https://www.howdy-mj.me/next/next-js-intro/\">MJKim님 블로그</a>\n<a href=\"https://coffeeandcakeandnewjeong.tistory.com/m/97\">newjeong님 블로그</a></p>","frontmatter":{"date":"November 01, 2021","title":"Shop Project_SSG vs SSR (with Method)","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211101/"}},"prev":{"id":"99aaa181-49cc-5b27-988a-b9293d2535e7","html":"","frontmatter":{"date":"November 03, 2021","title":"Shop Project_Shop Project_Login & Logout(Auth) 장바구니","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211103/index./"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/TIL_20211102/","nextSlug":"/TIL_20211101/","prevSlug":"/TIL_20211103/index./"}},"staticQueryHashes":["1073350324","2938748437"]}