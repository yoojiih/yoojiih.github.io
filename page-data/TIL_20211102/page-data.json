{"componentChunkName":"component---src-templates-blog-template-js","path":"/TIL_20211102/","result":{"data":{"cur":{"id":"7f8bd5a9-f505-5215-8c68-b270aa6190cd","html":"<h2 id=\"nextjs는-기본적으로-static-generation이-적용되어-있으며-외부데이터api-db등을-포함하여-렌더링해야할-때-ssg-ssr을-선택적으로-적용할-수-있다\" style=\"position:relative;\"><a href=\"#nextjs%EB%8A%94-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9C%BC%EB%A1%9C-static-generation%EC%9D%B4-%EC%A0%81%EC%9A%A9%EB%90%98%EC%96%B4-%EC%9E%88%EC%9C%BC%EB%A9%B0-%EC%99%B8%EB%B6%80%EB%8D%B0%EC%9D%B4%ED%84%B0api-db%EB%93%B1%EC%9D%84-%ED%8F%AC%ED%95%A8%ED%95%98%EC%97%AC-%EB%A0%8C%EB%8D%94%EB%A7%81%ED%95%B4%EC%95%BC%ED%95%A0-%EB%95%8C-ssg-ssr%EC%9D%84-%EC%84%A0%ED%83%9D%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%A0%81%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"nextjs는 기본적으로 static generation이 적용되어 있으며 외부데이터api db등을 포함하여 렌더링해야할 때 ssg ssr을 선택적으로 적용할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next.js는 기본적으로 static generation이 적용되어 있으며 외부데이터(API, DB)등을 포함하여 렌더링해야할 때 ssg ssr을 선택적으로 적용할 수 있다.</h2>\n<p><a href=\"https://nextjs.org/docs/basic-features/pages\">Nextjs공식문서</a></p>\n<h2 id=\"static-generation-with-data-recommended\" style=\"position:relative;\"><a href=\"#static-generation-with-data-recommended\" aria-label=\"static generation with data recommended permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Generation with data (Recommended)</h2>\n<p>정적 생성은 build시 HTML을 생성한다\n보통 데이터에 의존하지 않는 페이지들은 모두 이에 해당 (ex.인터렉션에 관계없이 똑같은 정보를 제공해야 하는 프로모션 페이지)\n또한 페이지의 컨텐츠나 경로가 외부 데이터에 의존할 경우, getStaticProps 와 getStaticPaths 를 활용하여 HTML을 정적 생성할 수 있다.</p>\n<h1 id=\"data-fetching\" style=\"position:relative;\"><a href=\"#data-fetching\" aria-label=\"data fetching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Fetching</h1>\n<p>Next.js에서 제공하는 Functions (fetching external data for pre-rendering)\nYour page <code class=\"language-text\">content</code> depends on external data: <code class=\"language-text\">Use getStaticProps</code>\nYour page <code class=\"language-text\">paths</code> depend on external data: <code class=\"language-text\">Use getStaticPaths</code> (usually in addition to getStaticProps).</p>\n<blockquote>\n<p>The HTML is generated at build time and will be reused on each request. To make a page use Static Generation, either export the page component, or export getStaticProps (and getStaticPaths if necessary). It’s great for pages that can be pre-rendered ahead of a user’s request. You can also use it with Client-side Rendering to bring in additional data.</p>\n</blockquote>\n<h2 id=\"server-side-rendering\" style=\"position:relative;\"><a href=\"#server-side-rendering\" aria-label=\"server side rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server-side Rendering</h2>\n<p>매 요청마다 데이터를 fetching해야 한다면 getServerSideProps를 사용해 SSR을 함\ngetServerSideProps is run on every request instead of on build time.(getStaticProps와의 차이점)</p>\n<blockquote>\n<p>The HTML is generated on each request. To make a page use Server-side Rendering, export getServerSideProps. Because Server-side Rendering results in slower performance than Static Generation, use this only if absolutely necessary.</p>\n</blockquote>\n<h1 id=\"getinitialprops-next-93에선-사용-권장하지-않음\" style=\"position:relative;\"><a href=\"#getinitialprops-next-93%EC%97%90%EC%84%A0-%EC%82%AC%EC%9A%A9-%EA%B6%8C%EC%9E%A5%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C\" aria-label=\"getinitialprops next 93에선 사용 권장하지 않음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getInitialProps (Next 9.3에선 사용 권장하지 않음)</h1>\n<p>React에서 프로젝트를 진행하면 렌더링 후에 componentDidMount나 useEffect()로 데이터를 불러와야 하지만\nNext에선 getInitialProps를 통해 데이터를 미리 불러와 한 번에 렌더링이 가능해 속도 빨라지고 코드상 처리 깔끔해짐\n어디든지 사용가능한 공통 데이터가 필요 시 _app.js에 getInitialProps를 붙이면 되고,그게 아니면 페이지마다 붙이면 됨\n자식 컴포넌트에서 사용할 수 없으며, 오로지 default export 컴포넌트에서만 사용가능</p>\n<h1 id=\"getstaticprops-vs-getstaticpaths-vs-getserversideprops\" style=\"position:relative;\"><a href=\"#getstaticprops-vs-getstaticpaths-vs-getserversideprops\" aria-label=\"getstaticprops vs getstaticpaths vs getserversideprops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getStaticProps VS getStaticPaths VS getServerSideProps</h1>\n<p>getStaticProps (Static Generation): 빌드(build)할 때 데이터를 불러옴\ngetStaticPaths (Static Generation): 데이터에 기반하여 pre-render때 특정한 동적 라우팅 구현\ngetServerSideProps (Server-side Rendering): 요청(request) 있을 때 데이터를 불러옴</p>\n<h1 id=\"getstaticprops-함수\" style=\"position:relative;\"><a href=\"#getstaticprops-%ED%95%A8%EC%88%98\" aria-label=\"getstaticprops 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getStaticProps 함수</h1>\n<blockquote>\n<p>어떤 페이지에서 getStaticProps 함수를 async로 export하면, getStaticProps에서 리턴되는 props를 가지고 페이지를 pre-render 한다.</p>\n</blockquote>\n<ul>\n<li>초기 렌더링 때 한번 실행된 후 실행안됨</li>\n<li>\n<p>기본 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 컴포넌트로 넘어갈 props</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>context 매개변수\nparams: 페이지 이름이 [id].js (동적라우팅)-> params는 {id: …} 라우팅 매개변수 지님\npreview: true일 때 preview 모드가 된다.\npreviewData: setPreviewData로 설정한 preview data를 지닌다.</li>\n<li>API, DB 등 외부 데이터를 포함하고 있을 경우 렌더링 하는 방법\nasync function으로 컴포넌트 내에 외부데이터를 포함하여 pre-render하기 위해 사용\ngetStaticProps 함수는 서버 단에서 build 시간에 호출됨 (직접 데이터베이스 쿼리에도 접근 가능)\n{ props: posts }을 리턴하여 Blog 컴포넌트는 getStaticProps()에 의해 build 시간에 ‘posts’를 props로 받아서 사용\n-> 외부데이터를 pre-render하기전에 getStaticProps함수를 한번 거치는 것\nFetch API (자바스크립트에 내장된) 사용 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Blog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//먼저 getStaticProps 함수 내에 외부 데이터를 props객체로 반환한다.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://.../posts'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 외부데이터</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      posts<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Blog</code></pre></div>\n<ul>\n<li>\n<p>getStaticProps가 필요한 경우</p>\n<ol>\n<li>페이지를 렌더링 하는데 사용자의 요청보다 먼저 build 시간에 필요한 데이터를 가져올 때</li>\n<li>headless CMS에서 데이터가 올 때</li>\n<li>공개적으로 캐시될 수 있는 데이터(특정 유저가 아닌)</li>\n<li>페이지가 사전 렌더링(ex. SEO)되어야 하고 엄청 빨라야 할 때(getStatidProps는 HTML과 JSON 파일을 생성하며, 이 두 파일 모두 CDN에서 성능을 위해 캐시할 수 있음)</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"getstaticpaths\" style=\"position:relative;\"><a href=\"#getstaticpaths\" aria-label=\"getstaticpaths permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getStaticPaths</h1>\n<p>Next는 pre-render에서 정적으로 getStaticPaths에서 호출하는 경로들을 가져옴\n외부데이터를 이용하여 data를 빌드타임에 fetching하면서 data에 따라 다른페이지를 보여줄 동적 라우팅이 필요한 경우\nid의 경우에는 동적라우트 컴포넌트 파일명을 따름 ([id].js -> id: “1”, [hi].js -> hi: 1)\nLink href 주소와 매칭이 되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    paths<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> or <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">const</span> postData <span class=\"token operator\">=</span> <span class=\"token function\">context</span><span class=\"token punctuation\">(</span>getStaticPaths에서 리턴한 값<span class=\"token punctuation\">)</span>를 이용하여 데이터를 가공<span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            postData<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>원하는 컴포넌트에서 가공된 데이터를 활용</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>postData<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>paths\npaths: 동적 라우팅 경로를 pre-render함\nparams: 페이지 이름에 사용되는 매개변수와 일치\nex) pages/posts/[postId]/[commentId] -> params는 postId와 commentId를 포함해야 함\npages/[…slug]와 같이 모든 경로를 사용 -> params는 slug가 담긴 배열이여야 함</li>\n<li>fallback\nfalse: getStaticPaths로 리턴되지 않은 것은 모두 404 페이지 뜨게함\ntrue: getStaticPaths로 리턴되는 것은 build 시간에 HTML이 렌더됨\nparams가 수천개가 넘어갈 경우 빌드타임에 수천개의 페이지가 만들어지는 문제점을 해결</li>\n</ul>\n<h1 id=\"getserversideprops-server-side-rendering\" style=\"position:relative;\"><a href=\"#getserversideprops-server-side-rendering\" aria-label=\"getserversideprops server side rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getServerSideProps (Server-Side rendering)</h1>\n<p>빌드타임 이후 유저의 요청(request time)에 즉각 반응하여 SEO를 적용한 새로운 외부 데이터를 제공해야 하는 ssr의 경우\npage 요청때마다 항상 실행되어 리턴되는 데이터를 getServerSideProps로 pre-render함 </p>\n<ul>\n<li>\n<p>기본 문법</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\nprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>외부 API에서 데이터 호출 시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://.../data</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 페이지에 props로 데이터 보내기</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Context Object (getStaticProps와 비슷)\nparams: 페이지 이름이 [id].js (동적라우팅)-> params는 {id: …} 라우팅 매개변수 지님\nreq: HTTP request object\nres: HTTP response object\nquery: 쿼리스트링\npreview: true일 때 preview 모드 됨\npreviewData: setPreviewData로 설정한 preview data를 지닌다.</li>\n<li>\n<p>getServerSideProp가 필요한 경우</p>\n<ul>\n<li>요청(request)할 때 데이터를 가져와야 하는 페이지를 미리 렌더해야 할때 사용\n서버가 모든 요청에 대한 결과를 계산하고, 추가 구성 없이 CDN에 의해 결과를 캐시할 수 없기 때문에\n첫 번째 바이트까지의 시간(TTFB)은 getStaticProps보다 느리다.</li>\n<li>만약 미리 렌더를 하지 않아도 될 경우, 클라이언트 단에서 데이터를 불러오는 것을 고려해야 한다.</li>\n</ul>\n</li>\n</ul>\n<p>Reference</p>\n<p><a href=\"https://velog.io/@gytlr01/Next.js-%EC%A3%BC%EC%9A%94-%EA%B0%9C%EB%85%90-%EC%A0%95%EB%A6%AC-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EB%B2%95\">Hyosik님 블로그</a>\n<a href=\"https://www.howdy-mj.me/next/next-js-intro/\">MJKim님 블로그</a>\n<a href=\"https://coffeeandcakeandnewjeong.tistory.com/m/97\">newjeong님 블로그</a></p>","excerpt":"next.js는 기본적으로 static generation이 적용되어 있으며 외부데이터(API, DB)등을 포함하여 렌더링해야할 때 ssg ssr을 선택적으로 적용할 수 있다. Nextjs공식문서 Static Generation with data (Recommended) 정적 생성은 build시 HTML을 생성한다\n보통 데이터에 의존하지 않는 페이지들은 모두 이에 해당 (ex.인터렉션에 관계없이 똑같은 정보를 제공해야 하는 프로모션 페이지)\n또한 페이지의 컨텐츠나 경로가 외부 데이터에 의존할 경우, getStaticProps 와 getStaticPaths 를 활용하여 HTML을 정적 생성할 수 있다. Data Fetching Next.js에서 제공하는 Functions (fetching external data for pre-rendering)\nYour page  depends on external data: \nYour page  depend on external data:  (u…","frontmatter":{"date":"November 02, 2021","title":"Shop Project_SSG vs SSR (with Method)","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211102/"}},"next":{"id":"7e4528e6-b3b0-5645-8918-e38e459822d5","html":"<h1 id=\"useeffect-hook\" style=\"position:relative;\"><a href=\"#useeffect-hook\" aria-label=\"useeffect hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useEffect Hook</h1>\n<ul>\n<li>컴포넌트 라이프사이클\n등장 -> 업데이트(재렌더링)-> 퇴장  </li>\n<li>Lifecycle에다가 중간에 Hook을 걸어 요구 가능 ex) Detail 컴포넌트 등장 전에 이것좀 해줘</li>\n<li>\n<p>예전 방식의 class 컴포넌트에서 사용하는 Life cycle Hook </p>\n<ul>\n<li>\n<p>긴 함수 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Detail</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//Detail 컴포넌트가 Mount 되고나서(첫 등장 후) 실행할 코드</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//Detail 컴포넌트가 Unmount 되기전에 실행할 코드 ( 컴포넌트가 사라지기 전 다른 페이지로 넘어간다든지 )</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>useEffect() 내의 코드의 실행조건   </p>\n<ul>\n<li>컴포넌트가 첫 등장해서 로딩이 끝난 후(mount) </li>\n<li>컴포넌트가 재렌더링 되고난 후 (update) 특정 코드 실행가능 (다른곳에서 만들어놓은 함수명, arrow function 가능) </li>\n</ul>\n</li>\n<li>\n<p>function컴포넌트에서 useEffect Hook 사용방법</p>\n<ol>\n<li>import useEffect</li>\n<li>useEffect() 를 사용해 안에 콜백함수를 집어넣음.</li>\n<li>\n<p>콜백함수 안에는 해당 컴포넌트 로드시 or 업데이트 시 실행하고 싶은 코드 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useEffect<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>function Detail(){\nuseEffect(()=>{\n//코드\n});\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n<li>\n<p>여러개 사용 시 적은 순서대로 실행 됨 =>(arrow function)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">이름</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> 실행할 코드 <span class=\"token punctuation\">}</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//1번째로 실행할 코드</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//2번째로 실행할 코드 </span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>},[실행 조건]);</p>\n<ul>\n<li>}); 기본 (컴포넌트 라이프 사이클 동안 즉, 처음 ~ 업데이트 될 때마다 useEffect 실행됨-> 자원낭비)</li>\n<li>},[]); 실행조건에 아무것도 안넣으면 맨 처음 컴포넌트 로드 될 때만 실행됨 </li>\n<li>},[state명]); 실행조건에 state명 넣으면 state명이 변경 될 때만 업데이트로 인식 (여러개 state 콤마로 넣을 수 있음)</li>\n</ul>\n</li>\n<li>\n<p>setTimeout</p>\n<ul>\n<li>n초 후에 코드를 실행하고 싶을 때 useEffect 안에다가 구현 </li>\n<li>setTimeout(()=>{실행할 코드},n000)</li>\n</ul>\n</li>\n<li>\n<p>clearTimeout</p>\n<ul>\n<li>unmount (다른 페이지로 이동 시, 컴포넌트 사라질 때) 즉시 타이머 해제하기 위해 useEffect() 맨 끝에 return에다가 작성</li>\n<li>남은 타이머 때문에 이상현상 발생 가능하기 때문에 설정해놓은 타이머 끝나기 전에 컴포넌트 벗어남으로써 버그 예방하는 에프킬라식 코딩</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> 타이머 <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> <span class=\"token function\">state변경</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> n000<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>타이머이름<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"useselector-hook\" style=\"position:relative;\"><a href=\"#useselector-hook\" aria-label=\"useselector hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useSelector Hook</h1>\n<h2 id=\"redux-store에-있는-state-데이터-꺼내쓰는-법\" style=\"position:relative;\"><a href=\"#redux-store%EC%97%90-%EC%9E%88%EB%8A%94-state-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%BA%BC%EB%82%B4%EC%93%B0%EB%8A%94-%EB%B2%95\" aria-label=\"redux store에 있는 state 데이터 꺼내쓰는 법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux store에 있는 state 데이터 꺼내쓰는 법</h2>\n<p>​- useSelector Hook VS redux connect함수 </p>\n<ul>\n<li>connect함수는 따로 함수를 작성하여 컴포넌트의 props에서 각각 state와 action dispatch로 사용할 함수들을 설정해줘야함</li>\n<li>export default connect(함수명)(Home); 이렇게 connect로 컴포넌트를 감싸는 형태를 HOC; High Order Component 고차 컴포넌트라고 함 </li>\n<li>redux store에 있던 state를 꺼내쓰려면 state를 props화 해주는 함수를 파일 밑에 첨부해야 해서 코드 길어짐</li>\n<li>Hooks에서는 connect 함수보다 간소화 됨 </li>\n<li>\n<p>useSelector를 이용해 쉽게 state를 가져다 사용하고 useDispatch를 사용하여 props에 action dispatch를 사용할 필요없이 바로 action 객체를 dispatch 가능하게 함 </p>\n<ol>\n<li>useSelector() 함수 import </li>\n<li>useSelector() 안에 콜백함수 작성</li>\n<li>그 자리에 남은 redux state를 변수에 저장해서 사용</li>\n<li>콜백함수 안에는 파라미터 하나 입력가능한데 그건 자동으로 store (reducer 합친거)가 됨.</li>\n<li>\n<p>(state) => state.value 이런식으로 state를 원하는 것만 뽑아서 가져올수있음\n​</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> cart <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> cart<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"usedispatch\" style=\"position:relative;\"><a href=\"#usedispatch\" aria-label=\"usedispatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useDispatch</h1>\n<ul>\n<li>\n<p>dispatch할 때 props.dispatch()로 state 수정요청 날리지 않고 그냥 useDispatch로 가져오면 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelector<span class=\"token punctuation\">,</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>원래 개발단계에서 미리보기 띄울 때 페이지 이동시 페이지를 껐다 켠 것 처럼 초기화 되기 때문에 나중에 사이트 발행시엔 제대로 동작함.</p>\n</li>\n</ul>\n<p>개발환경에서도 state가 리셋되지않게 하려면 주문하기 버튼을 눌렀을 때</p>\n<p>history.push() 등의 라우터 함수를 이용해서 강제로 페이지 이동시킴</p>\n<p>(useHistory 훅이 상단에 import!!)</p>\n<p>(Detail.js)</p>\n<p>function Detail(props){</p>\n<p>  let history = useHistory();\nreturn (\n&#x3C;HTML많은곳/>\n&#x3C;button onClick={()=>{</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  props.dispatch({type : '항목추가', payload : {id : 2, name : '새로운상품', quan : 1} });\n  history.push('/cart');\n\n}}>주문하기&lt;/button></code></pre></div>\n<p>  )\n}</p>\n<h1 id=\"usehistory-hook\" style=\"position:relative;\"><a href=\"#usehistory-hook\" aria-label=\"usehistory hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useHistory Hook</h1>\n<h1 id=\"usecallback-성능-최적화\" style=\"position:relative;\"><a href=\"#usecallback-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"usecallback 성능 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useCallback (성능 최적화)</h1>\n<p>함수를 메모이제이션(memoization)하기 위해서 사용되는 hook 함수</p>\n<ul>\n<li>React 컴포넌트가 렌더링 될 때마다 컴포넌트 내 선언된 함수가 랜더링될 때 마다 생성됨\n<code class=\"language-text\">const add = () => x + y;</code></li>\n<li>useCallback() 사용 시 해당 컴포넌트가 랜더링되더라도 첫번째 인자(넘어온 함수), 두번째 인자(넘어온 배열) 내의 값이 변경될 때까지 저장해놓고 재사용할 수 있게 해줌\n<code class=\"language-text\">const add = useCallback(() => x + y, [x, y]);</code><br>\nx 또는 y 값이 바뀌면 새로운 함수가 생성되어 add 변수에 할당되고, x와 y 값이 동일하다면 다음 랜더링 때 함수를 재사용</li>\n</ul>\n<p>Reference</p>\n<p><a href=\"https://www.daleseo.com/react-hooks-use-callback/\">Daleseo님 블로그</a></p>","frontmatter":{"date":"November 01, 2021","title":"Shop Project_React Hook","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211101/"}},"prev":{"id":"99aaa181-49cc-5b27-988a-b9293d2535e7","html":"<p><a href=\"https:nextjs.org/docs/authentication\">Nextjs 공식문서</a></p>\n<h1 id=\"리덕스-사용-이유\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0\" aria-label=\"리덕스 사용 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리덕스 사용 이유</h1>\n<ol>\n<li>상태 관리 용이 (state 관리 용이)\n데이터 수정방법을 reducer 한 곳에 죄다 미리 정의해 reducer(or dispatch)만 보면되니까 복잡하지 않음\n모든 상태 업데이트를 액션으로 정의하고, 액션 정보에 기반하여 리듀서에서 상태를 업데이트하기 때문에 상태를 더욱 쉽게 예측 가능하게 하여 유지보수 측면에서 좋음 (버그 원인 쉽게 파악 가능)\n서비스 규모가 커질수록 복잡해지는 데이터를 한 눈에, 한 곳에 관리할 수 있다는 장점이 있지만 코드 길어짐</li>\n<li>다른 라이브러리들과 다르게 미들웨어 존재\n특정 액션이 디스패치 됐을 때 상태 업데이트 외의 다른 작업들을 따로 처리 가능\n비동기 작업 흐름에 대한 세부적인 컨트롤을 필요로 할 때 유용\n보통 API 요청을 할 때 리덕스와 미들웨어 사용이 당연시 되었지만\n이젠 단순 API 요청을 위하여 미들웨어를 사용 할 필요 없이 SWR과 react-query와 같은 라이브러리를 사용함 </li>\n<li>API 요청 결과를 사용해 서버사이드 렌더링 용이\n리덕스 없이도 구현가능하지만 레퍼런스도 부족하고 번거로운 편임 -> Next js 예외\n다른 대안 Recoil(페북개발자가 만드는 중), Jotai 등의 라이브러리는 아직 서버사이드 렌더링 처리하기위한 준비가 되어있지 않음</li>\n<li>더 쉬운 테스팅 가능\n리듀서에서 다양한 상태 업데이트에 대한 로직을 테스트하기도 쉽고, 리덕스와 연동된 컴포넌트를 테스트 또는 미들웨어의 작동방식을 Mocking 할 수 있음</li>\n<li>글로벌 상태 관리\nprops 전송 없이도 모든 컴포넌트들이 state를 꺼내서 사용할 수 있게 함 (Context API랑 같은 역할)</li>\n<li>컴포넌트가 아닌 곳에서 글로벌 상태를 사용하거나 업데이트를 해야 할 때<br>\nWebSocket을 사용한다거나, 리액트 네이티브 브릿지에서 연동을 할 때 <code class=\"language-text\">getState</code> 또는 <code class=\"language-text\">dispatch</code>를 바로 호출해서 사용시 유용</li>\n<li>이미 유지보수를 하고 있는 프로젝트에서 리덕스를 사용중인 경우가 많음\n과거에는 선택지가 MobX가 유일했어서 리덕스를 많이 사용해왔지만 프로젝트에 리덕스가 필수적이라고 느껴지지 않는다고 해서, 아예 걷어내는건 또 큰 공수가 드니 계속 유지하면서 사용하는 케이스가 많음. 다만, 그러한 경우엔 새로운 기능 또는 리팩토링 하는 기능에 있어선 다른 방식을 시도해보는게 좋음 (react effector, react recoil 같은 라이브러리 등)</li>\n<li>\n<p>dispatch할 때 데이터 실어보낼 수 있응\nredux 환경에서 데이터 수정시</p>\n<ol>\n<li>클릭 액션 발생 시 새로운 값을 추가 하려면 </li>\n<li>reducer에 데이터 수정방법 미리 하나 만들고 버튼 누를 때 dispatch </li>\n<li>dispatch()함수 이용해 HTML안에서 reducer 동작시킴 (버튼을 눌렀을 때 ‘수량증가’라는 state 데이터 수정방법을 실행)</li>\n<li>\n<p>dispatch 할 때 특정 데이터({ type : ‘수량증가’, payload : ‘안녕’ })를 redux store까지 함께 실어보내면\nreducer 안에서 요청을 처리할 땐 <code class=\"language-text\">액션.payload</code> 작성 시 ‘안녕’ 데이터를 사용 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">버튼 누를 때마다 수량 <span class=\"token number\">1</span> 증가\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'수량증가'</span><span class=\"token punctuation\">,</span> 데이터 <span class=\"token operator\">:</span> a<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> + </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token operator\">-</span>버튼 누르면 수량감소를 요청\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'수량감소'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> - </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h1 id=\"next-js-프로젝트에-redux-적용\" style=\"position:relative;\"><a href=\"#next-js-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-redux-%EC%A0%81%EC%9A%A9\" aria-label=\"next js 프로젝트에 redux 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next js 프로젝트에 Redux 적용</h1>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"1-리덕스-라이브러리-설치\" style=\"position:relative;\"><a href=\"#1-%EB%A6%AC%EB%8D%95%EC%8A%A4-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98\" aria-label=\"1 리덕스 라이브러리 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 리덕스 라이브러리 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">`npm i redux react-redux next-redux-wrapper` -> next 라이프사이클에 리덕스를 결합\n`npm i @reduxjs/toolkit` -> typescript 지원\n`npm i redux-logger --save-dev` </code></pre></div>\n<h2 id=\"2-리덕스-적용-위해-리덕스-모듈-생성\" style=\"position:relative;\"><a href=\"#2-%EB%A6%AC%EB%8D%95%EC%8A%A4-%EC%A0%81%EC%9A%A9-%EC%9C%84%ED%95%B4-%EB%A6%AC%EB%8D%95%EC%8A%A4-%EB%AA%A8%EB%93%88-%EC%83%9D%EC%84%B1\" aria-label=\"2 리덕스 적용 위해 리덕스 모듈 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 리덕스 적용 위해 리덕스 모듈 생성</h2>\n<p>리덕스를 사용하기 위해 필요한 리덕스 모듈의 각 항목들은 각 다른 파일에 저장\n루트 디렉터리에 store폴더 생성후 action과 reducer 둘로 나눔</p>\n<h2 id=\"액션-타입-생성\" style=\"position:relative;\"><a href=\"#%EC%95%A1%EC%85%98-%ED%83%80%EC%9E%85-%EC%83%9D%EC%84%B1\" aria-label=\"액션 타입 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>액션 타입 생성</h2>\n<ul>\n<li>액션 타입 만들어 user_action(액션 생성함수)으로 내보내는 역할 </li>\n<li>액션은 무슨일이 일어났는지 설명해주는 객체</li>\n<li>예를 들어 user라는 state를 수정해 주는 역할을 하는 액션은 타입을 SET_USER와 같이 선언하고, </li>\n<li>\n<p>user_action(액션 생성함수)에서 setUser(user)라는 이름의 함수를 만들어 주면 됨</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>actions<span class=\"token operator\">/</span>types<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token constant\">USER</span> <span class=\"token constant\">ACTION</span> <span class=\"token constant\">TYPES</span> 정의 <span class=\"token operator\">-</span><span class=\"token operator\">></span> 주로 대문자로 선언\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">SET_USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"set_user\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"액션-생성-함수-action-creator-→-사용-필수-x\" style=\"position:relative;\"><a href=\"#%EC%95%A1%EC%85%98-%EC%83%9D%EC%84%B1-%ED%95%A8%EC%88%98-action-creator-%E2%86%92-%EC%82%AC%EC%9A%A9-%ED%95%84%EC%88%98-x\" aria-label=\"액션 생성 함수 action creator → 사용 필수 x permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>액션 생성 함수 (Action Creator) → 사용 필수 x</h2>\n<p>단순히 파라미터를 받아와서 액션 객체 형태로 만들어 줌 (액션 반환)\n함수 앞에 export 붙여 다른 파일에서 불러와서 사용해 나중에 컴포넌트에서 쉽게 액션을 발생시키기 위함\n(액션 생성함수 생성 -> 액션 타입 불러옴 -> 리듀서 -> 루트 리듀서)\n주로 camelCase(단어가 합쳐진 부분마다 맨 처음 글자를 대문자)로 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n<span class=\"token constant\">SET_USER</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>export function setUser(user) {\nreturn {\ntype: SET_USER,\npayload: user\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## 리듀서 (Reducer)\n변화를 일으키는 함수. 리듀서에서는 불변성을 꼭 지켜야함\n리듀서는 액션 생성함수들을 통해 만들어진 객체. 즉, 두가지 파라미터( 현재 상태, 전달 받은 액션 ) 파라미터를 참조해 새로운 상태를 만들어서 반환하는 함수를 생성\n\n```javascript\nfunction reducer(state, action) {\n  // 상태 업데이트 로직\n  return alteredState;\n}</code></pre></div>\n<h2 id=\"데이터-수정\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%88%98%EC%A0%95\" aria-label=\"데이터 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 수정</h2>\n<p>redux에 있는 state데이터들을 reducer/dispatch로 수정</p>\n<ol>\n<li>reducer에 state 데이터의 수정방법을 미리 정의</li>\n<li>원하는 곳에서 dispatch() 함수로 reducer를 불러 수정 요청</li>\n<li>state 수정 시 컴포넌트는 dispatch() 이용해 state 수정 해달라고 reducer에 부탁</li>\n</ol>\n<h2 id=\"여러개의-reducer-필요시\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-reducer-%ED%95%84%EC%9A%94%EC%8B%9C\" aria-label=\"여러개의 reducer 필요시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러개의 reducer 필요시</h2>\n<ol>\n<li>reducer에는 state 초기값 + state 수정하는 법을 넣음 (useState와 비슷)</li>\n<li>store에 등록 -> reducer만들었으면 store에 등록해야 사용가능</li>\n<li>combineReducers() 함수 import <code class=\"language-text\">import {createStore, combineReducers} from 'redux';</code></li>\n<li>분리된 리듀서들을 합쳐주기 위한 combineReducers() 안에 모든 리듀서를 object 형식으로 담고</li>\n<li>createStore()안에 넣음 <code class=\"language-text\">store = createStore( combineReducers({reducer, reducer2}) )</code></li>\n</ol>\n<h2 id=\"스토어-store\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%86%A0%EC%96%B4-store\" aria-label=\"스토어 store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스토어 (Store)</h2>\n<p>리덕스에서는 한 애플리케이션당 하나의 스토어 생성 가능하고 내부에는 현재 앱 상태, 리듀서, 몇가지 내장 함수들이 존재함</p>\n<h2 id=\"디스패치-dispatch\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%8A%A4%ED%8C%A8%EC%B9%98-dispatch\" aria-label=\"디스패치 dispatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디스패치 (dispatch)</h2>\n<p>스토어의 내장함수 중 하나 _액션 발생시켜 파라미터로 전달.\ndispatch(action) → 스토어는 리듀서 함수를 실행시켜서 해당 액션을 처리하는 로직이 있다면 액션을 파라미터로 받아 참고해 새로운 상태 만들어 줌</p>\n<h2 id=\"구독-subscribe\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EB%8F%85-subscribe\" aria-label=\"구독 subscribe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구독 (subscribe)</h2>\n<p>스토어의 내장함수 중 하나\n함수 형태의 값을 파라미터로 받아 액션이 디스패치 되었을 때 마다 전달해준 함수가 호출됨\n보통 이  함수를 직접 사용하지 않고 react-redux 라이브러리에서 제공하는 <code class=\"language-text\">connect</code> 함수or <code class=\"language-text\">useSelector</code> Hook을 사용</p>\n<h2 id=\"과정\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%95\" aria-label=\"과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[ 과정 ]</h2>\n<p>유저가 View를 조작함으로써 state 갱신 내용인 Action이 발생되어 Dispatcher에 전달 →\nDispatcher가 Store에게 Action을 전달하면서 Action내용에 따른 state 갱신을 명령한다.\nStore가 state를 갱신하고 갱신된 state를 View에게 전달해 새로운 state가 브라우저(View)에 렌더링(표시)</p>\n<p>이렇게 리덕스는 액션 생성 함수를 만들기 위해 redux-actions을, 불변성을 지켜야하는 원칙 때문에 immer를,\nStore를 효율적으로 핸들링하여 불필요한 리렌더링을 막기 위해 reselect를, Type 정의를 지원하기 위해서 typesafe-actions를,\n비동기를 수월하게 하기위해 redux-thunk를 설치하여 사용하게 되는데 Redux-Toolkit는 이를 하나로 대체 가능하게 함.</p>\n<h1 id=\"redux---toolkit을-사용해-간단하게-상태-관리\" style=\"position:relative;\"><a href=\"#redux---toolkit%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"redux   toolkit을 사용해 간단하게 상태 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux - Toolkit을 사용해 간단하게 상태 관리</h1>\n<p><a href=\"https://redux.js.org/tutorials/fundamentals/part-8-modern-redux\">Redux공식문서</a>\n설치 : <code class=\"language-text\">npm install @reduxjs/toolkit</code></p>\n<ul>\n<li>리덕스툴킷을 리덕스 공식팀에서 리덕스에서 많이 사용된 기능을 비교적 쉽게 사용할 수 있도록 만든 상태관리 도구</li>\n<li>Ducks 패턴을 사용해 한 파일 안에서 reducer와 Action을 관리하기 때문에 기능별 파악이 용이함</li>\n<li>redux-action, reselect, immer, redux-thunk, type definition, Redux Toolkit 기능들을 모두 지원하기 때문에 여러 라이브러리 사용할 필요 없음</li>\n<li>일반적으로 React(CSR)에 Redux 사용하는 건 하나의 Redux store만 존재하므로 어렵지 않지만 Next.js는 처음 렌더링시 SSR을 하게 되기 때문에 유저가 store를 호출할 때마다 Redux store을 새로 생성하하게 되므로 여러개가 될 수 있음</li>\n<li>이 때 생성하는  Redux store와 이후 CSR시 생성하는 Redux store가 다르기 때문에 이 둘을 합쳐주는 로직인 next-redux-wrapper가 필요</li>\n<li>이 라이브러리가 없다면 Next.js의 getServerSideProps, getStaticProps 내에서 Redux store에 접근을 할 수 없음</li>\n</ul>\n<h2 id=\"redux-wrapper\" style=\"position:relative;\"><a href=\"#redux-wrapper\" aria-label=\"redux wrapper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux Wrapper</h2>\n<p>next는 유저가 페이지를 요청할 때마다 스토어를 만들어야 하기 때문에 Store 함수를 wrapper에 넘긴다.\n_app.tsx에 wrapper.withRedux(App)으로 App컴포넌트를 감싸면 각 페이지의 getInitialProps, getServerSideProps, getStaticProps등에서 리덕스 스토어에 접근이 가능해짐\n이때 next의 스토어와 클라이언트의 스토어가 다르기 때문에 둘을 HYDRATE이라는 액션으로 합친다.</p>\n<h2 id=\"hydrate\" style=\"position:relative;\"><a href=\"#hydrate\" aria-label=\"hydrate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HYDRATE</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SSR을 위해 등장한 것, getServerSideProps에서도 Redux store에 접근이 가능하도록 하기 위한 처리임\nreducer에서 action.type으로 사용할 HYDRATE를 next-redux-wrapper로부터 import</code></pre></div>\n<p>우선 <code class=\"language-text\">HYDRATE</code> action을 적용한다. <code class=\"language-text\">HYDRATE</code>는  <code class=\"language-text\">next-redux-wrapper</code>에서 제공하는 액션이다. next.js에서 생성한 redux store와 client에서 생성한 redux store는 다르다. 이 둘을 합칠 때 사용하는 것이 <code class=\"language-text\">HYDRATE</code> 기능이다. <code class=\"language-text\">HYDRATE</code>는 서버에서 생성한 상태를 client store에 합쳐준다. </p>\n<h2 id=\"createslice\" style=\"position:relative;\"><a href=\"#createslice\" aria-label=\"createslice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createSlice</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">리듀서 함수의 객체, 슬라이스 이름, 초기 상태 값을 받아들이고 해당 액션 생성자와 액션 유형으로 슬라이스 리듀서를 자동으로 생성함</code></pre></div>\n<h2 id=\"payloadaction\" style=\"position:relative;\"><a href=\"#payloadaction\" aria-label=\"payloadaction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PayloadAction</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typescript와 함께 사용 시 액션의 payload 필드의 타입을 지정할 수 있게 해주는 제네릭</code></pre></div>\n<p>Reference</p>\n<p><a href=\"https://velog.io/@danmin20/Next.js%EC%97%90%EC%84%9C-redux-toolkit-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\">danmin님 블로그</a></p>","frontmatter":{"date":"November 03, 2021","title":"Shop Project_Redux","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211103/index./"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/TIL_20211102/","nextSlug":"/TIL_20211101/","prevSlug":"/TIL_20211103/index./"}},"staticQueryHashes":["1073350324","2938748437"]}