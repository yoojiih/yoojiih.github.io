{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"2d2e79d3-950b-59ca-acb0-c0bbefd48bd2","excerpt":"환경설정 기본 요구사항 Node.js : 자바스크립트 런타임  NPM : 패키지 매니저 도구 Node js npm package 생성\n Express Light HTTP web Framework 설치\n 서버 생성, 시작 app.get(’/’, (req, res) => res.send(‘Hello World’)) app.listen(port, () => console.log())","frontmatter":{"categories":"TIL","title":"Shop Project_React","date":"November 11, 2021"},"fields":{"slug":"/Shop_React1/"}}},{"node":{"id":"f1ffc20d-507b-50ab-8452-dacf17aef84b","excerpt":"Project명 (무제) _ 개인 프로젝트 목표 Front end 뿐만 아니라 백 서버와 DB를 구축해서 어느 서비스에나 존재하는 \n로그인, 회원가입과 더불어 상품들을 관리하는 쇼핑몰 프로젝트를 진행하고자 한다\n추가적으로 완성한 프로젝트를 aws로 배포해보고자 한다 프로젝트 예상 기간 (2021년 11월 10일 ~ 2021년 11월 23일) 스택 Front-end React\nRedux, Redux-Toolkit\nJavascript\nTailwind Back-end node js\nexpress DB mongo DB 배포 aws 구현 순서 모델 설계 백엔드 로직 구현 프론트 구현 최적화 및 TDD Redux로 상태관리 배포  Reference","frontmatter":{"categories":"TIL","title":"Shop Project_React","date":"November 10, 2021"},"fields":{"slug":"/Shop_React0/"}}},{"node":{"id":"c2c096bc-fe46-5af0-880e-b0f4bcede8ee","excerpt":"Test는 어떤 가설을 검증해 나가는 과정이며 고품질의 소프트웨어를 개발하기 위해선 꼭 필요한 기본 중의 기본\n왜 필요한가\n제대로 동작하는 소프트웨어를 작성하기 위함\n  테스트를 수행하면서 소프트웨어에 대한 가설을 다시 되짚어 볼 수 있음\n  일반적으로 소프트웨어를 테스트하는 과정을 통해 더 나은 코드를 작성할 수 있음\n  테스트를 진행하다 보면 코드를 더 잘 이해할 수 있게 됨\n  소프트웨어 개발 주기에 테스트를 통합함으로써 코드를 더 자주 릴리즈할 수 있게 됨\n  코드를 리팩토링하거나 다른 위치로 옮길 때 큰 도움이 됨 TDD란 Test Driven Development의 약자로 ‘테스트 주도 개발’이라고 하며 테스트케이스를 작성 한 후 실제 코드를 개발하여 리펙토링하는 절차를 따르기 때문에 Test First Development라고도 불림 언제 사용하면 좋은지? 자신에 대한 불확실성이 높은 경우 (처음해보는 프로그램 주제) 외부적인 불확실성이 높은 경우 (고객의 요구조건이 …","frontmatter":{"categories":"TIL","title":"Shop Project_TDD(Test-Driven-Development) 방법론","date":"November 06, 2021"},"fields":{"slug":"/TIl_20211106/"}}},{"node":{"id":"22fb78a6-deda-5a44-b244-1f0593f15a75","excerpt":"기능구현 후 성능향상 & 유지관리  컴포넌트 로딩속도 등을 향상시킴   1.익명함수/object 사용 자제 함수나 오브젝트는 변수에 담아쓰는게 좋음. 콜백하마수나 오브젝트 형식이 아닌 컴포넌트 바깥에 있는 변수에 저장해서 불러 씀\n -> 메모리공간을 아끼는 JS 관습\n컴포넌트 재렌더링 시 이름없는(변수에 저장안된) object, function 자료형 → 매번 새로운 메모리 영역을 할당해줘야하기 때문에 컴퓨터 바빠짐 2.레이아웃에 애니메이션 사용 자제 애니메이션 넣을 때 성능에 지장 없이 만들려면 자바스크립트, transition을 이용한 레이아웃 변경 애니메이션은 브라우저 입장에서는 큰 부담이니 사용 자제\n(레이아웃: width, margin, padding, left right top bottom 등) transform, opacity 같은 CSS 속성(transform은 사이즈 변경, 좌표이동, 회전 전부 가능한 속성)을 이용해 성능 지장 없게 만들어야함. 3. 컴포넌트 la…","frontmatter":{"categories":"TIL","title":"Shop Project_성능 최적화","date":"November 05, 2021"},"fields":{"slug":"/TIL_20211105/"}}},{"node":{"id":"f8024bc6-e485-50b9-b8f7-8f4bfe4360a2","excerpt":"Redux Middleware를 적용하기 전에 동기 & 비동기에 대해 짚고 넘어가고자 함 Javascript Synchronous(동기), Asynchronous(비동기), 콜백함수 Synchronous, Asynchronous 의미 동기: 하나의 요청이 오면 완료가 된 후 다음 요청을 실행하는 방식 (순차적으로 로직 수행됨) 비동기: 어떤 요청이 오면 완료 되기 까지 기다리지 않고 다음 요청을 실행하는 방식\n→ 여러 작업을 동시에 효율적으로 처리하기 때문에 즉시 응답을 못받아 흐름을 정확히 파악해 그에 맞게 적절히 처리 되어야 예상밖의 결과가 나오는 것을 막을 수 있음 (순차적인 흐름을 보장하지 않음, 완료되면 실행, 물리적으로 잠시 보류)  자바스크립트는 일반적인 코드 작성 시 synchronous(동기식)하게 코드 적은 순서대로 윗에서부터 한줄한줄 차례로 처리됨. ajax 요청, 이벤트 리스너, state 변경함수, setTimeout, 이런 함수들은 처리시간이 오래걸리기 때…","frontmatter":{"categories":"TIL","title":"Shop Project_JavaScript_동기 비동기 콜백함수","date":"November 04, 2021"},"fields":{"slug":"/TIL_20211104/"}}},{"node":{"id":"99aaa181-49cc-5b27-988a-b9293d2535e7","excerpt":"Nextjs 공식문서 리덕스 사용 이유 상태 관리 용이 (state 관리 용이)\n데이터 수정방법을 reducer 한 곳에 죄다 미리 정의해 reducer(or dispatch)만 보면되니까 복잡하지 않음\n모든 상태 업데이트를 액션으로 정의하고, 액션 정보에 기반하여 리듀서에서 상태를 업데이트하기 때문에 상태를 더욱 쉽게 예측 가능하게 하여 유지보수 측면에서 좋음 (버그 원인 쉽게 파악 가능) \n서비스 규모가 커질수록 복잡해지는 데이터를 한 눈에, 한 곳에 관리할 수 있다는 장점이 있지만 코드 길어짐 다른 라이브러리들과 다르게 미들웨어 존재\n특정 액션이 디스패치 됐을 때 상태 업데이트 외의 다른 작업들을 따로 처리 가능\n비동기 작업 흐름에 대한 세부적인 컨트롤을 필요로 할 때 유용\n보통 API 요청을 할 때 리덕스와 미들웨어 사용이 당연시 되었지만 \n이젠 단순 API 요청을 위하여 미들웨어를 사용 할 필요 없이 SWR과 react-query와 같은 라이브러리를 사용함  API 요청 …","frontmatter":{"categories":"TIL","title":"Shop Project_Redux","date":"November 03, 2021"},"fields":{"slug":"/TIL_20211103/index./"}}},{"node":{"id":"7f8bd5a9-f505-5215-8c68-b270aa6190cd","excerpt":"next.js는 기본적으로 static generation이 적용되어 있으며 외부데이터(API, DB)등을 포함하여 렌더링해야할 때 ssg ssr을 선택적으로 적용할 수 있다. Nextjs공식문서 Static Generation with data (Recommended) 정적 생성은 build시 HTML을 생성한다\n보통 데이터에 의존하지 않는 페이지들은 모두 이에 해당 (ex.인터렉션에 관계없이 똑같은 정보를 제공해야 하는 프로모션 페이지)\n또한 페이지의 컨텐츠나 경로가 외부 데이터에 의존할 경우, getStaticProps 와 getStaticPaths 를 활용하여 HTML을 정적 생성할 수 있다. Data Fetching Next.js에서 제공하는 Functions (fetching external data for pre-rendering)\nYour page  depends on external data: \nYour page  depend on external data:  (u…","frontmatter":{"categories":"TIL","title":"Shop Project_SSG vs SSR (with Method)","date":"November 02, 2021"},"fields":{"slug":"/TIL_20211102/"}}},{"node":{"id":"7e4528e6-b3b0-5645-8918-e38e459822d5","excerpt":"useEffect Hook 컴포넌트 라이프사이클 \n등장 -> 업데이트(재렌더링)-> 퇴장   Lifecycle에다가 중간에 Hook을 걸어 요구 가능 ex) Detail 컴포넌트 등장 전에 이것좀 해줘 예전 방식의 class 컴포넌트에서 사용하는 Life cycle Hook  긴 함수 사용 useEffect() 내의 코드의 실행조건    컴포넌트가 첫 등장해서 로딩이 끝난 후(mount)  컴포넌트가 재렌더링 되고난 후 (update) 특정 코드 실행가능 (다른곳에서 만들어놓은 함수명, arrow function 가능)  function컴포넌트에서 useEffect Hook 사용방법 import useEffect useEffect() 를 사용해 안에 콜백함수를 집어넣음. 콜백함수 안에는 해당 컴포넌트 로드시 or 업데이트 시 실행하고 싶은 코드 작성 function Detail(){\n  useEffect(()=>{\n    //코드\n  });\n} 여러개 사용 시 적은 순서대로 실행 …","frontmatter":{"categories":"TIL","title":"Shop Project_React Hook","date":"November 01, 2021"},"fields":{"slug":"/TIL_20211101/"}}},{"node":{"id":"44d9b314-e769-5fad-b3c4-ec1225b6d89c","excerpt":"CSS Framework 비교  TailwindCSS “A utility-first CSS framework for rapid UI development”\n이번 블로그에 도입한 Tailwind CSS를 소개하고자 한다\n기존엔 React와 함께 bootstrap, sementic UI등을 사용해 개발해왔지만 \n이번엔 Next js로 개발한 프로젝트이기에 Next js와 가장 호흡이 좋은 CSS Framwork가 어떤 것인지 비교가 필요했음\n수많은 프레임 워크중에서도 GitHub와 Nuxt.js 공식 사이트에서도 사용하고 있는 \nTailwind CSS는 Utility-First 컨셉을 가진 CSS 프레임워크라 m-1, flex와 같이 미리 세팅된 유틸리티 클래스를 활용하는 방식으로 \n클래스명을 설정하는 것만으로도 디자인 시스템의 색상이나 간격, 사이즈 등을 빠르게 반영 가능하고 HTML 코드 내에서 스타일링이 가능해 편리하고 빠른 개발을 가능하게 해주기에 Tailwind CSS를 선택…","frontmatter":{"categories":"TIL","title":"Shop Project_Next js style CSS Framwork Comparison","date":"October 31, 2021"},"fields":{"slug":"/TIL_20211031/"}}},{"node":{"id":"dc7a6b2a-bfe7-586e-bd1e-600054751e7f","excerpt":"Error Page 에러페이지 구현 이유\n    유저가 항상 옳은 경로로 들어온다는 확신도 없고 에러 발생할 경우 유저에게 발생 여부를 알려야 문제 인식 가능함\n    사용자 입장에선 뭐가 문제인지 알아야 그에 맞게 빠르게 대처 가능하기 때문에 좋은 UX를 제공 가능 404 페이지 설정 500 서버 에러페이지 jsx 삼항연산자로 조건문 생성\nconst result = condition ? value1(맞았을 때) : value2(틀렸을 때); 환경 변수 구분 브라우저 환경에 따라 변할 수 있는 값을 분기처리 (개발 / 프로덕션 모드 구분) \nNext js는 별 다른 작업 없이도 환경변수를 쓸 수 있도록 제공함 .env.development 와 .env.production 두가지 파일 생성해 각각 다른이름과 API_URL로 만듦 (API경로를 구분해 다른 리스트 나오게)\n사용법은 node js 환경과 browser 환경이 다름 node js → process.env.변수명 brows…","frontmatter":{"categories":"TIL","title":"Shop Project_Next js_Error Page & 환경변수 구분 개발환경 분리","date":"October 30, 2021"},"fields":{"slug":"/TIL_20211030/"}}},{"node":{"id":"5f07e1b9-ce57-5883-9cf3-b8929ad758ce","excerpt":"API (Application Programming Interface) api 요청하기 전 api를 둘러싼 서버나 통신에 대해서 알고 넘어가기 API 는 데이터와 기능의 집합을 제공하여 컴퓨터 프로그램간 상호작용을 촉진하며 서로 정보를 교환할 수 있는 것이다.\n소프트웨어가 다른 소프트웨어로부터 “지정된 형식”으로 요청(서버가 그 형식에 맞는 행동을 해줌), 명령을 받을 수 있는 소통을 위한 인터페이스\n즉, 개발자는 그 형식에 맞게 코드 작성시 개발 및 유지보수에 유리함 REST (Representational State Transfer) 자원을 이름(자원의 표현)으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것\n통신 규약인 와 마찬가지로 다양한 브라우저, 클라이언트, 요청의 등장과 애플리케이션 통합성의 필요성으로 인해 라는 표준 아키텍처 등장 (규칙) RESTful REST라는 architecture를 구현하는 웹서비스를 나타내기 위해 사용되는 용어 (rest api형식…","frontmatter":{"categories":"TIL","title":"Shop Project_API calls","date":"October 29, 2021"},"fields":{"slug":"/TIL_20211029/"}}},{"node":{"id":"f80d4306-3a41-52ac-971f-24eecfce0b85","excerpt":"프로젝트 구성 Next 구동 순서\n우선 처음 로딩되는 화면이 (=메인페이지)가 어떤 것인지 알아보기위해 간단하게 테스트 해봄\nindex.js vs _app.js  app.js 코드 및 실행화면\n\n index.js 코드\n 위를 보면 _app.js에서 index.js 코드를 불러왔다는 것을 알 수 있음 \n결론은 _app.js가 제일 처음 로딩되는 화면임 Next의 SSR이 가능한 이유 Next는 _app.js와 _document.js가 제일 처음에 실행된다\n( 두 파일 모두 pages 폴더 안에 있어야 하고, Server only file로 클라이언트 단에서 사용하는 함수(ex. addEventlistner, window 등)를 사용하면 안됨 _app.js 파일 (props) 최초로 실행되는 파일\nClient에서 띄워지는 전체 컴포넌트의 레이아웃 (공통 레이아웃으로 최초에 실행되어 내부에 들어갈 컴포넌트들을 실행함)\n_app.js에서 props로 넘어온 Component와 pagePr…","frontmatter":{"categories":"TIL","title":"Shop Project_Next 구동순서 + Routing","date":"October 28, 2021"},"fields":{"slug":"/TIL_20211028/"}}},{"node":{"id":"d5951593-9382-5daf-a159-446800d47a5c","excerpt":"환경설정 기본 요구사항 Node.js : 자바스크립트 런타임  NPM : 패키지 매니저 도구 Yarn : 개선된 버전의 NPM (선택사항)   설치 (Ver. 12.0.1) Next.js 공식 문서 참고 CNA로 next 프로젝트 생성 및 개발환경 실행 CNA으로 설치시 nextjs프로젝트의 기본 세팅을 간편하게 시작하는 방법으로서 react, react-dom, next가 함께 설치됨 컴파일과 번들링이 자동으로 된다 (webpack과 babel을 이용해서) 자동 리프레시 기능으로 수정하면 화면에 바로 반영됨 서버 사이드 렌더링(SSR)이 지원됨 static파일을 지원함 (public폴더 밑에) CRA와 같은 방식으로 짧은 시간 내에 앱을 빌드 할 수 있지만 CRA보다 가볍고 불필요한 잡다한 파일이 적다는 특징이 있다. typescript, sass는 설치와 동시에 적용된다.(react에서 typescript사용하기 위함) 기본적으로 es6문법이 사용가능하고, autoprefix가…","frontmatter":{"categories":"TIL","title":"Shop Project _ Next.js 도입 / 라우팅 / 메인페이지 / 스타일 구성","date":"October 27, 2021"},"fields":{"slug":"/TIL_20211027/"}}},{"node":{"id":"fc56134f-8e48-58ab-b3da-895d91d812c7","excerpt":"Project명 (무제) _ 개인 프로젝트 목표 Frontend 기술 스택 학습에 집중하되 \n실제로 사용자들이 사용한다는 가정하에 UI / UX 고려 및 사용자들의 유입을 위한 검색 엔진 최적화(SEO)에 중점을 둔 서비스 구축 프로젝트 예상 기간 (2021년 10월 26일 ~ 2021년 11월 6일) Front-end Next.js\nReact\nRedux, Redux-Toolkit\nJavascript\nTailwind 1. 서론   프로젝트 개발 진행에 앞서 프로젝트에 적용할 기술 스택의 선정 과정에 대해 기술하고자 한다  프로젝트 구성을 위한 기능들 현재 원활한 협업을 위해 필요한 기능들은 다음과 같다 SSR(Server Side Rendering) / SSG(Static Site Generation) Type Checker Routing State management Styling Bundling Lazy loading Code splitting Static file serve …","frontmatter":{"categories":"TIL","title":"Shop Project","date":"October 26, 2021"},"fields":{"slug":"/TIL_ShopProject/"}}},{"node":{"id":"ad01e22b-1c72-5009-a21e-6b3f3752744c","excerpt":"👋 MD 문법 제목 1개 ~ 6개를 붙여서 제목 글자 크기를 정할 수 있다. 과 텍스트 사이에는 여백이 있어야 한다. 개행 강제개행\n강제개행 단락바꿈 문법입니다. Enter키를 통해 개행이 적용됩니다. 텍스트 단락 줄 바꾸기 편집기에 빈 줄 하나 넣어야 한다. 제목 텍스트일 경우 편집기상에서 줄을 바꾸면 그대로 결과 화면에 나타난다. 가로 줄 순서 있는 목록 번호를 붙여서 나타낸다. 번호 순서대로 작성하지 않아도, 순서 목록은 순서대로 나타난다. 순서 없는 목록 +, -, * 셋중 하나를 붙여서 나열하면 자동으로 글머리 기호가 붙는다. “Tab”을 눌러 들여 쓰면, 여러 단계를 가진 목록을 만들 수 있다. +, -, *를 구별하지 않고 섞어 써도 된다. 굵게 기울임체 굵은 기울임체 취소선 인용 인용문을 삽입할 때는 인용문의 첫 번째 줄 앞에 >를 추가한다. 인용문 안에 또 다른 인용문을 삽입하려면 >>를 추가한다. 소스 코드 텍스트 사이에 소스 코드를 삽입하려면, ` 기호를 사용한…","frontmatter":{"categories":"블로그","title":"Md 문법 정리","date":"October 25, 2021"},"fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"}}},{"node":{"id":"3c420b0d-84d2-582d-a7fe-82e0c660a698","excerpt":"Gatsby(정적 페이지 생성기) + Git pages(배포)로 블로그 생성 블로그 생성 이유 프로젝트 개발을 진행하면서 배웠던 점들을 TIL(Today I Learn)로 기록하고자 직접 블로그를 만들게 됨.  Gatsby로 블로그를 제작한 이유 다른 블로그 사이트들인  velog, 티스토리, notion , medium, dev 등 플랫폼에서 만들 수 있었음에도 불구하고 \n정적 페이지 생성기(Static Site Generator)인 Gatsby로 직접 제작한 이유는 \n정형화된 사이트 형식이 아닌 현재 공부하고 있는  React + GraphQL 을 기반으로 직접 커스터 마이징을 하며 \n웹 개발 공부 겸 본인 사이트를 만들어 보는 것이 도움이 될 것 같아서 이 방법을 택함 정적 페이지 생성기 \n정적사이트 생성기 자동화 도구로 돌려서 정적인 HTML로 구성된 사이트를 배포 \n그리고 마크 다운 문서를 HTML으로 변환시켜서 랜더링 시키는 도구를 탑재 Jekyll, Gatsby, Hu…","frontmatter":{"categories":"블로그","title":"Gatsby 테마로 GitHub Blog 만들기","date":"October 18, 2021"},"fields":{"slug":"/gatsby-github-blog/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"유지현","bio":{"role":"개발자","description":["사람에 가치를 두는","능동적으로 일하는","이로운 것을 만드는"],"thumbnail":""},"social":{"github":"https://github.com/yoojiih","linkedIn":"","email":"maintain126@naver.com"}}}}},"pageContext":{}},"staticQueryHashes":["1073350324","1562467322","2938748437"]}