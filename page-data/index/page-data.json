{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"99aaa181-49cc-5b27-988a-b9293d2535e7","excerpt":"","frontmatter":{"categories":"TIL","title":"Shop Project_Shop Project_Login & Logout(Auth) 장바구니","date":"November 03, 2021"},"fields":{"slug":"/TIL_20211103/index./"}}},{"node":{"id":"7f8bd5a9-f505-5215-8c68-b270aa6190cd","excerpt":"Next js에서 라우팅 구현 페이지 이동 이동할 페이지를 만들기 위해 pages 디렉토리 내부에 파일 생성 pages/about.js\npages/blog/slug.js 간단하게 파일 내부 구현 메인 페이지(index.js)에서 페이지 이동을 위해 “next/link”에서 모듈을 불러와서 Link라는 태그를 작성 링크 태그 안에 a 태그 넣어주고  Link 태그의 속성에는 href를 넣어서 어디로 이동해야 파일이 있는지 명시 라우트가 아닌 외부링크를 사용시에는 Link 사용 x a태그에 주소를 입력.\nclassName같은 속성을 부여할 일이 있을 경우 Link가 아닌 a 태그에 부여할 것. function Home() {\n  return (\n      <>\n        \n          Home\n        \n        \n          About Us\n        \n        \n          Blog Post\n        \n    </>\n  )\n} expor…","frontmatter":{"categories":"TIL","title":"Shop Project_동적 라우팅","date":"November 02, 2021"},"fields":{"slug":"/TIL_20211102/"}}},{"node":{"id":"7e4528e6-b3b0-5645-8918-e38e459822d5","excerpt":"next.js는 기본적으로 static generation이 적용되어 있으며 외부데이터(API, DB)등을 포함하여 렌더링해야할 때 ssg ssr을 선택적으로 적용할 수 있다. Nextjs공식문서 Static Generation with data (Recommended) 정적 생성은 build시 HTML을 생성한다\n보통 데이터에 의존하지 않는 페이지들은 모두 이에 해당 (ex.인터렉션에 관계없이 똑같은 정보를 제공해야 하는 프로모션 페이지)\n또한 페이지의 컨텐츠나 경로가 외부 데이터에 의존할 경우, getStaticProps 와 getStaticPaths 를 활용하여 HTML을 정적 생성할 수 있다. Data Fetching Next.js에서 제공하는 Functions (fetching external data for pre-rendering)\nYour page  depends on external data: \nYour page  depend on external data:  (u…","frontmatter":{"categories":"TIL","title":"Shop Project_SSG vs SSR (with Method)","date":"November 01, 2021"},"fields":{"slug":"/TIL_20211101/"}}},{"node":{"id":"44d9b314-e769-5fad-b3c4-ec1225b6d89c","excerpt":"Flex css (참고)  flex는 css에서 레이아웃 표현 기법중 하나임 \n예전 css는 한정되고 복잡한 속성들로 레이아웃을 표현해왔었는데 이젠 간단하게 레이아웃을 표현할 수 있는 방법이 많이 생겼다 \n그 중 대표적인게 flex 속성\nflex는 기본적으로 정렬된 아이템들의 부모 요소에다가 적용하고(가로정렬, 세로정렬등) \n특히 가로정렬하는데 굉장히 유용한 도구로 쓰임\n근데 부모요소에 flex를 적용시 첫번째 자식에 해당하는 요소들 까지만 flex 속성이 적용됨\n기본적으로 모든 해당 요소들이 좌측과 상단을 기준으로 default값이 설정됨 justify-content (flex된 해당 부모가 감싸고 있는 영역의 요소들을 가로 정렬) justify-content: flex-start → 왼쪽으로 정렬 (기본값)\njustify-content: flex-end → 오른쪽으로 정렬\njustify-content: center → 중앙으로 정렬 justify-content: space (아…","frontmatter":{"categories":"TIL","title":"Shop Project_Next style comparison","date":"October 31, 2021"},"fields":{"slug":"/TIL_20211031/"}}},{"node":{"id":"dc7a6b2a-bfe7-586e-bd1e-600054751e7f","excerpt":"","frontmatter":{"categories":"TIL","title":"Shop Project_TDD_Test jest","date":"October 30, 2021"},"fields":{"slug":"/TIL_20211030/"}}},{"node":{"id":"5f07e1b9-ce57-5883-9cf3-b8929ad758ce","excerpt":"Error Page 에러페이지 구현 이유\n    유저가 항상 옳은 경로로 들어온다는 확신도 없고 에러 발생할 경우 유저에게 발생 여부를 알려야 문제 인식 가능함\n    사용자 입장에선 뭐가 문제인지 알아야 그에 맞게 빠르게 대처 가능하기 때문에 좋은 UX를 제공 가능 404 페이지 설정 500 서버 에러페이지 jsx 삼항연산자로 조건문 생성\nconst result = condition ? value1(맞았을 때) : value2(틀렸을 때); 환경 변수 구분 브라우저 환경에 따라 변할 수 있는 값을 분기처리 (개발 / 프로덕션 모드 구분) \nNext js는 별 다른 작업 없이도 환경변수를 쓸 수 있도록 제공함 .env.development 와 .env.production 두가지 파일 생성해 각각 다른이름과 API_URL로 만듦 (API경로를 구분해 다른 리스트 나오게)\n사용법은 node js 환경과 browser 환경이 다름 node js → process.env.변수명 brows…","frontmatter":{"categories":"TIL","title":"Shop Project_Error Page & 환경변수 구분 개발환경 분리","date":"October 29, 2021"},"fields":{"slug":"/TIL_20211029/"}}},{"node":{"id":"f80d4306-3a41-52ac-971f-24eecfce0b85","excerpt":"프로젝트 구성 Next 구동 순서\n우선 처음 로딩되는 화면이 (=메인페이지)가 어떤 것인지 알아보기위해 간단하게 테스트 해봄\nindex.js vs _app.js  app.js 코드 및 실행화면\n\n index.js 코드\n 위를 보면 _app.js에서 index.js 코드를 불러왔다는 것을 알 수 있음 \n결론은 _app.js가 제일 처음 로딩되는 화면임 Next의 SSR이 가능한 이유 Next는 _app.js와 _document.js가 제일 처음에 실행된다\n( 두 파일 모두 pages 폴더 안에 있어야 하고, Server only file로 클라이언트 단에서 사용하는 함수(ex. addEventlistner, window 등)를 사용하면 안됨 _app.js 파일 (props) 최초로 실행되는 파일\nClient에서 띄워지는 전체 컴포넌트의 레이아웃 (공통 레이아웃으로 최초에 실행되어 내부에 들어갈 컴포넌트들을 실행함)\n_app.js에서 props로 넘어온 Component와 pagePr…","frontmatter":{"categories":"TIL","title":"Shop Project_API calls","date":"October 28, 2021"},"fields":{"slug":"/TIL_20211028/"}}},{"node":{"id":"d5951593-9382-5daf-a159-446800d47a5c","excerpt":"환경설정 기본 요구사항 Node.js : 자바스크립트 런타임  NPM : 패키지 매니저 도구 Yarn : 개선된 버전의 NPM (선택사항)   설치 (Ver. 12.0.1) Next.js 공식 문서 참고 CNA로 next 프로젝트 생성 및 개발환경 실행 CNA으로 설치시 nextjs프로젝트의 기본 세팅을 간편하게 시작하는 방법으로서 react, react-dom, next가 함께 설치됨 컴파일과 번들링이 자동으로 된다 (webpack과 babel을 이용해서) 자동 리프레시 기능으로 수정하면 화면에 바로 반영됨 서버 사이드 렌더링(SSR)이 지원됨 static파일을 지원함 (public폴더 밑에) CRA와 같은 방식으로 짧은 시간 내에 앱을 빌드 할 수 있지만 CRA보다 가볍고 불필요한 잡다한 파일이 적다는 특징이 있다. typescript, sass는 설치와 동시에 적용된다.(react에서 typescript사용하기 위함) 기본적으로 es6문법이 사용가능하고, autoprefix가…","frontmatter":{"categories":"TIL","title":"Shop Project _ Next.js 도입 / 라우팅 / 메인페이지 / 스타일 구성","date":"October 27, 2021"},"fields":{"slug":"/TIL_20211027/"}}},{"node":{"id":"fc56134f-8e48-58ab-b3da-895d91d812c7","excerpt":"Project명 (무제) _ 개인 프로젝트 목표 Frontend 기술 스택 학습에 집중하되 \n실제로 사용자들이 사용한다는 가정하에 UI / UX 고려 및 사용자들의 유입을 위한 검색 엔진 최적화(SEO)에 중점을 둔 서비스 구축 프로젝트 예상 기간 (2021년 10월 26일 ~ 2021년 11월 6일) Front-end Next.js\nReact\nRedux, Redux-saga\nSass 1. 서론 프로젝트 개발 진행에 앞서 프로젝트에 적용할 기술 스택의 선정 과정에 대해 기술하고자 한다  프로젝트 구성을 위한 기능들 현재 원활한 협업을 위해 필요한 기능들은 다음과 같다 SSR(Server Side Rendering) / SSG(Static Site Generation) Type Checker Routing State management Styling Bundling Lazy loading Code splitting Static file serve Scroll restoration w…","frontmatter":{"categories":"TIL","title":"Shop Project","date":"October 26, 2021"},"fields":{"slug":"/TIL_ShopProject/"}}},{"node":{"id":"ad01e22b-1c72-5009-a21e-6b3f3752744c","excerpt":"👋 MD 문법 제목 1개 ~ 6개를 붙여서 제목 글자 크기를 정할 수 있다. 과 텍스트 사이에는 여백이 있어야 한다. 개행 강제개행\n강제개행 단락바꿈 문법입니다. Enter키를 통해 개행이 적용됩니다. 텍스트 단락 줄 바꾸기 편집기에 빈 줄 하나 넣어야 한다. 제목 텍스트일 경우 편집기상에서 줄을 바꾸면 그대로 결과 화면에 나타난다. 가로 줄 순서 있는 목록 번호를 붙여서 나타낸다. 번호 순서대로 작성하지 않아도, 순서 목록은 순서대로 나타난다. 순서 없는 목록 +, -, * 셋중 하나를 붙여서 나열하면 자동으로 글머리 기호가 붙는다. “Tab”을 눌러 들여 쓰면, 여러 단계를 가진 목록을 만들 수 있다. +, -, *를 구별하지 않고 섞어 써도 된다. 굵게 기울임체 굵은 기울임체 취소선 인용 인용문을 삽입할 때는 인용문의 첫 번째 줄 앞에 >를 추가한다. 인용문 안에 또 다른 인용문을 삽입하려면 >>를 추가한다. 소스 코드 텍스트 사이에 소스 코드를 삽입하려면, ` 기호를 사용한…","frontmatter":{"categories":"블로그","title":"Md 문법 정리","date":"October 25, 2021"},"fields":{"slug":"/gatsby-starter-zoomkoding-introduction/"}}},{"node":{"id":"3c420b0d-84d2-582d-a7fe-82e0c660a698","excerpt":"Gatsby(정적 페이지 생성기) + Git pages(배포)로 블로그 생성 블로그 생성 이유 프로젝트 개발을 진행하면서 배웠던 점들을 TIL(Today I Learn)로 기록하고자 직접 블로그를 만들게 됨.  Gatsby로 블로그를 제작한 이유 다른 블로그 사이트들인  velog, 티스토리, notion , medium, dev 등 플랫폼에서 만들 수 있었음에도 불구하고 \n정적 페이지 생성기(Static Site Generator)인 Gatsby로 직접 제작한 이유는 \n정형화된 사이트 형식이 아닌 현재 공부하고 있는  React + GraphQL 을 기반으로 직접 커스터 마이징을 하며 \n웹 개발 공부 겸 본인 사이트를 만들어 보는 것이 도움이 될 것 같아서 이 방법을 택함 정적 페이지 생성기 \n정적사이트 생성기 자동화 도구로 돌려서 정적인 HTML로 구성된 사이트를 배포 \n그리고 마크 다운 문서를 HTML으로 변환시켜서 랜더링 시키는 도구를 탑재 Jekyll, Gatsby, Hu…","frontmatter":{"categories":"블로그","title":"Gatsby 테마로 GitHub Blog 만들기","date":"October 18, 2021"},"fields":{"slug":"/gatsby-github-blog/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"유지현","bio":{"role":"개발자","description":["사람에 가치를 두는","능동적으로 일하는","이로운 것을 만드는"],"thumbnail":""},"social":{"github":"https://github.com/yoojiih","linkedIn":"","email":"maintain126@naver.com"}}}}},"pageContext":{}},"staticQueryHashes":["1073350324","1562467322","2938748437"]}