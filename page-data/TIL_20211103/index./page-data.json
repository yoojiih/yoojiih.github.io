{"componentChunkName":"component---src-templates-blog-template-js","path":"/TIL_20211103/index./","result":{"data":{"cur":{"id":"99aaa181-49cc-5b27-988a-b9293d2535e7","html":"","excerpt":"","frontmatter":{"date":"November 03, 2021","title":"Shop Project_Shop Project_Login & Logout(Auth) 장바구니","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211103/index./"}},"next":{"id":"7f8bd5a9-f505-5215-8c68-b270aa6190cd","html":"<h1 id=\"next-js에서-라우팅-구현\" style=\"position:relative;\"><a href=\"#next-js%EC%97%90%EC%84%9C-%EB%9D%BC%EC%9A%B0%ED%8C%85-%EA%B5%AC%ED%98%84\" aria-label=\"next js에서 라우팅 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next js에서 라우팅 구현</h1>\n<h2 id=\"페이지-이동\" style=\"position:relative;\"><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99\" aria-label=\"페이지 이동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>페이지 이동</h2>\n<ol>\n<li>\n<p>이동할 페이지를 만들기 위해 pages 디렉토리 내부에 파일 생성</p>\n<blockquote>\n<p>pages/about.js\npages/blog/[slug].js</p>\n</blockquote>\n</li>\n<li>\n<p>간단하게 파일 내부 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">About</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>about page<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>메인 페이지(index.js)에서 페이지 이동을 위해 “next/link”에서 모듈을 불러와서 Link라는 태그를 작성</li>\n<li>\n<p>링크 태그 안에 a 태그 넣어주고  Link 태그의 속성에는 href를 넣어서 어디로 이동해야 파일이 있는지 명시</p>\n<blockquote>\n<p>라우트가 아닌 외부링크를 사용시에는 Link 사용 x a태그에 주소를 입력.\nclassName같은 속성을 부여할 일이 있을 경우 Link가 아닌 a 태그에 부여할 것.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'next/link'</span></code></pre></div>\n</li>\n</ol>\n<p>function Home() {\nreturn (\n&#x3C;>\n<Link href=\"/\">\n<a>Home</a>\n</Link>\n<Link href=\"/about\">\n<a>About Us</a>\n</Link>\n<Link href=\"/blog/hello-world\">\n<a>Blog Post</a>\n</Link>\n&#x3C;/>\n)\n}</p>\n<p>export default Home</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 동적 페이지 생성 (dynamic Routes)\n\n## Dynamic Routes \n[Nextjs공식문서](https://nextjs.org/docs/routing/dynamic-routes)\n\n사용 예시) 제품 클릭 시 각 id에 해당하는 상세 페이지로 전환\nview/1 이나 view/abc로 들어왔을 때 모두 pages/view/[id].js 페이지로 가는 것 (pages디렉토리 내에 디렉토리 하나 더 생성 후 [id].js 파일을 생성)\n\n1. 누르면 페이지 보내줘야 하니까  import Link from \"next/link\";\n2. href는 각 아이템의 id로 가게함 (href로 써주는건 a태그랑 사용법 같음)\n    - 방법 1) 쿼리스트링으로 원하는 정보 넘겨주기 &lt;Link href=\"/view/abc?name=${props.name}\">\n    페이지를 요청할 때 페이지명?a=b와 같은 형식으로 값을 넘겨주는 쿼리 스트링으로 동적 페이지 생성\n    - 방법 2) [파일명].js 방식 &lt;Link href=\"/view/${props.name}\"> \n    실제 이동할 경로를 의미하며 URL에 어떻게 보일지를 결정. 각 /view/이름 으로 URL창에 나타남\n    [...id]로 정의하게 되면 {id: [1,2,3]} 은 post/1/2/3 링크와 매치가능.\n    /의 개수만큼 폴더를 만들지 않아도 Link에 /를 여러번 사용가능.\n3. next/router에 존재하는 모듈 중 하나인 useRouter Hook 이용해 쿼리에 담긴 문자열을 받음\n4. [id]를 통해서 url 얻어낸 다음에 \n5. const {id} = router.query \n```javascript\n// pages/view/[id].js\nimport { useRouter } from 'next/router';\n\nconst Post = () => {\n    const router = useRouter();\n    const { id } = router.query;\n    return &lt;p>Post: {id}&lt;/p>;\n};\n\nexport default Post;</code></pre></div>\n<p><a href=\"https://nextjs.org/docs/api-reference/next/link\">Nextjs공식문서</a>\n<a href=\"https://velog.io/@jakeseo_me/Next.js-%EB%B9%A8%EB%A6%AC-%EB%B0%B0%EC%9A%B0%EA%B8%B0-y0jz9oebn0#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">jakeseo_me님 블로그</a></p>","frontmatter":{"date":"November 02, 2021","title":"Shop Project_동적 라우팅","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIL_20211102/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/TIL_20211103/index./","nextSlug":"/TIL_20211102/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}