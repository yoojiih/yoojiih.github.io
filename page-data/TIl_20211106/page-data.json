{"componentChunkName":"component---src-templates-blog-template-js","path":"/TIl_20211106/","result":{"data":{"cur":{"id":"c2c096bc-fe46-5af0-880e-b0f4bcede8ee","html":"<p>Reference</p>","excerpt":"Reference","frontmatter":{"date":"November 06, 2021","title":"Shop Project_Next js에서 Redux사용해 인증(로그인, 회원가입)","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIl_20211106/"}},"next":{"id":"bc332ff5-e0f6-516f-97cb-79ca121a95dd","html":"<h2 id=\"장바구니-데이터를-조작할-수-있는-reducer-생성과정\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EB%B0%94%EA%B5%AC%EB%8B%88-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%A1%B0%EC%9E%91%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-reducer-%EC%83%9D%EC%84%B1%EA%B3%BC%EC%A0%95\" aria-label=\"장바구니 데이터를 조작할 수 있는 reducer 생성과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장바구니 데이터를 조작할 수 있는 reducer 생성과정</h2>\n<ul>\n<li>이미 있는 상품을 장바구니 추가 누르면 수량만 1증가 O 항목추가 X</li>\n<li>‘항목추가’라는 dispatch요청할 때 문제가 있는거니까 reducer에서 데이터 수정방법을 손봐주면 됨</li>\n<li>\n<p>주문하기 버튼 누르면 누를 때 마다 찾은상품.id / 찾은상품.name이라는 실제 페이지내의 상품데이터가 redux store에 저장됨</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>\nprops<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>type <span class=\"token operator\">:</span> <span class=\"token string\">'항목추가'</span><span class=\"token punctuation\">,</span> 데이터 <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> 찾은상품<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> 찾은상품<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> quan <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">주문하기</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> 초기값 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> \n    <span class=\"token punctuation\">{</span>id <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> <span class=\"token string\">'신발'</span><span class=\"token punctuation\">,</span> quan <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>id <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">:</span> <span class=\"token string\">'신발2'</span><span class=\"token punctuation\">,</span> quan <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// reducer에 초기값을 default파라미터 문법으로 집어넣음 </span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> 초기값<span class=\"token punctuation\">,</span> 액션</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 액션.type === 수정방법이름</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>액션<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'항목추가'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// dispatch로 수신한 데이터의 id ({ id : 0, name : '새로운상품' })가 state(초기값 배열)안에 같은 id가 이미 존재 한다면 push()하지 않고 수량(quan)만 증가 </span>\n        <span class=\"token keyword\">const</span> 몇번째있니 <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> \n            <span class=\"token comment\">// state array내 각 자료의 id === 액션.데이터.id 비교</span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> 액션<span class=\"token punctuation\">.</span>데이터<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> 몇번째있니 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        copy<span class=\"token punctuation\">[</span>몇번째있니<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>quan<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        copy<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>액션<span class=\"token punctuation\">.</span>데이터<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> copy\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>액션<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'수량증가'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//수량증가 요청이 들어오면 state 데이터 카피본을 만들어 해당 아이템 quan 항목에 1 더해주고 return</span>\n        <span class=\"token comment\">// array, object로 구성된 state 데이터 수정시 사본을 만드는게 좋음</span>\n        <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//dispatch()할 때 방금 누른 +버튼 옆의 상품번호를 redux store로 함께 실어 보냈기 때문에</span>\n        <span class=\"token comment\">//copy[0].quan++; 가 아닌 copy[방금 누른 +버튼 옆의 상품번호].quan++ 로 변경</span>\n        <span class=\"token comment\">// {액션.데이터}를 state에 추가</span>\n\t    copy<span class=\"token punctuation\">[</span>액션<span class=\"token punctuation\">.</span>데이터<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>quan<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> copy\n    \n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>액션<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'수량감소'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        copy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>quan<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> copy\n    \n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 요청 안들어온 경우 기본 state 리턴</span>\n        <span class=\"token keyword\">return</span> state\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>findIndex()\n특정 값이 array 안에 있는지 찾을 때 사용하는 자바스크립트 기본함수</p>\n<ul>\n<li>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//결과값 3</span></code></pre></div>\n<p>array 안에 1이 있는지 찾고 싶으면\na: array안에 있던 하나하나의 자료 {}\na와 1을 비교해 일치시 몇번째 값인지 남겨줌</p>\n</li>\n</ul>\n</li>\n<li><strong>주문하기 버튼 옆에 수량을 직접 입력할 수 있는 input 생성</strong></li>\n<li><strong>상품의 사이즈 정보를 저장할 수 있는 곳을 만들어서 사이즈 선택 기능 추가</strong></li>\n<li><strong>장바구니 항목 삭제 기능</strong></li>\n</ul>\n<h1 id=\"redux를-이용한-개발환경-셋팅\" style=\"position:relative;\"><a href=\"#redux%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%85%8B%ED%8C%85\" aria-label=\"redux를 이용한 개발환경 셋팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>redux를 이용한 개발환경 셋팅</h1>\n<ul>\n<li>\n<p>redux에서 state를 생성하려면 useState가 아닌 createStore() 함수를 써야함</p>\n<ol>\n<li>createStore를 import 후 <code class=\"language-text\">import {createStore} from 'redux';</code></li>\n<li>state 만들어 store 변수에 저장</li>\n<li>createStore 콜백함수엔 원하는 state 초기값 작성</li>\n<li>&#x3C; Provider> import 후 <code class=\"language-text\">import {Provider} from 'react-redux';</code></li>\n<li>\n<p><Provider>에 store state를 props처럼 등록하면 Provider로 감싼 모든 HTML, 컴포넌트들은 전부 store안에 있던 state값을 props 전송없이 공유 가능 -> state값 공유 원하는 컴포넌트(App)를 감쌈\n//redux 설치 후엔 state들을 store라는 명칭으로 부름!</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Provider<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createStore<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>const store = createStore(()=>{ return [{id : 0, name : ‘멋진신발’, quan : 2}]  })</p>\n<p>ReactDOM.render(\n&#x3C;React.StrictMode>\n<BrowserRouter>\n<Provider store={store}>\n<App/>\n</Provider>\n</BrowserRouter>\n&#x3C;/React.StrictMode>\n);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Reference</code></pre></div>\n</li>\n</ul>","frontmatter":{"date":"November 06, 2021","title":"Shop Project_Next js 장바구니 구현","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIl_20211107/"}},"prev":{"id":"cdc42cc7-e1bf-5f52-9ea9-7eafa0b5210f","html":"<p>Reference</p>","frontmatter":{"date":"November 06, 2021","title":"Shop Project_Next js 지도 API","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/TIl_20211108/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/TIl_20211106/","nextSlug":"/TIl_20211107/","prevSlug":"/TIl_20211108/"}},"staticQueryHashes":["1073350324","2938748437"]}