{"componentChunkName":"component---src-templates-blog-template-js","path":"/Shop_React12/","result":{"data":{"cur":{"id":"6f81dcdf-61c7-5c95-8a24-475ecbba5264","html":"<h1 id=\"상품-페이지-구현\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%92%88-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%AC%ED%98%84\" aria-label=\"상품 페이지 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상품 페이지 구현</h1>\n<h2 id=\"구현-목표\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%AA%A9%ED%91%9C\" aria-label=\"구현 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 목표</h2>\n<ul>\n<li>상품 전체 리스트 api를 불러와 렌더링</li>\n<li>각 상품 이미지 클릭 시 각 상품 id를 url뒤에 붙여 각 아이템에 맞는 페이지를 보여줌</li>\n<li>상품 상세페이지 구현 시 url에 있는 id만 뽑아와서 그에 맞는 api주소를 불러와서 렌더링 해줌</li>\n</ul>\n<h2 id=\"router\" style=\"position:relative;\"><a href=\"#router\" aria-label=\"router permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Router</h2>\n<ul>\n<li>react-router-dom 설치</li>\n</ul>\n<p><code class=\"language-text\">npm install react-router-dom</code></p>\n<p>url을 매치해 해당하는 라우터를 가져와서 보여줌\n/home/  :/home/과 /home/introduction\n/home/introduction : /home/introduction만\n이렇게 2개의 라우터가 있으면 모두 다 렌더링 하기 때문에 한페이지에서 두개의 컴포넌트가 겹쳐보이게 되기 때문에 <code class=\"language-text\">exact</code>를 사용함</p>\n<p>exact를 넣으면 path가 오직 “특정경로” 일때만 동작하도록 실행됨</p>\n<p>//match.params 값을 id 이름으로 받을 것임\n<Route exact path=\"/login/:id\" component={Login} />\n[공식문서 참고]](<a href=\"https://v5.reactrouter.com/web/api/Link/to-object\">https://v5.reactrouter.com/web/api/Link/to-object</a>)</p>\n<h2 id=\"link\" style=\"position:relative;\"><a href=\"#link\" aria-label=\"link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Link</h2>\n<ul>\n<li>링크를 연결시켜줄 뿐 아니라 object 전달이 가능한 <Link>를 사용해 id값 전달</li>\n<li>React에서는 링크를 걸어줄때 <a> tage 대신 <Link>를 사용하게 된다.</li>\n<li><a> tag를 사용하게 되면 링크를 누를때마다 재 렌더링 되기 때문에 웹페이지가 새로고침 되버리기 때문 </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> pathname<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/detail/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n            state<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    title<span class=\"token operator\">:</span> title<span class=\"token punctuation\">,</span>\n                    name<span class=\"token operator\">:</span> name\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>img\n            src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>image_link<span class=\"token punctuation\">}</span>\n            alt<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>path와 state를 지정하여 링크 연결 가능하며 속성(props)으로 전달한다</li>\n</ul>\n<p>(pathname에 목표 url을 지정하고, state에 내가 전달하려는 데이터를 집어넣으면 Link를 통해 데이터를 전달 가능함 )</p>\n<ul>\n<li>전달된 속성(props)를 받아 원하는대로 render해서 사용 가능함</li>\n</ul>\n<p><code class=\"language-text\">location.state.title</code></p>\n<ul>\n<li>주소창에 이런식으로 출력됨 => <a href=\"http://localhost:3000/detail/740\">http://localhost:3000/detail/740</a></li>\n<li>상품 리스트 페이지에서 “장바구니 담기” 버튼 클릭 시, navbar 내 장바구니의 숫자가 1씩 증가하면서 동시에 장바구니 페이지에 담기게 함</li>\n<li>장바구니 페이지에서 삭제 버튼(휴지통 모양의 아이콘)을 클릭하였을 때, navbar 내 장바구니의 숫자가 감소하며 동시에 장바구니의 상품을 삭제</li>\n</ul>\n<p>Reference\n<a href=\"https://rrecoder.tistory.com/101\">rrecoder님 블로그</a>\n<a href=\"https://velog.io/@devstone/react-router-dom-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B3%A0-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\">devstone님 블로그</a>\n<a href=\"https://dsc-sookmyung.tistory.com/41\">dsc님 블로그</a>\n<a href=\"https://velog.io/@sham/Router-Props-link%EB%A1%9C-%EC%A0%84%EB%8B%AC%ED%95%98%EB%8A%94-props\">sham님 블로그</a></p>","excerpt":"상품 페이지 구현 구현 목표 상품 전체 리스트 api를 불러와 렌더링 각 상품 이미지 클릭 시 각 상품 id를 url뒤에 붙여 각 아이템에 맞는 페이지를 보여줌 상품 상세페이지 구현 시 url에 있는 id만 뽑아와서 그에 맞는 api주소를 불러와서 렌더링 해줌 Router react-router-dom 설치  url을 매치해 해당하는 라우터를 가져와서 보여줌\n/home/  :/home/과 /home/introduction\n/home/introduction : /home/introduction만 \n이렇게 2개의 라우터가 있으면 모두 다 렌더링 하기 때문에 한페이지에서 두개의 컴포넌트가 겹쳐보이게 되기 때문에 를 사용함 exact를 넣으면 path가 오직 “특정경로” 일때만 동작하도록 실행됨 //match.params 값을 id 이름으로 받을 것임 \n        \n공식문서 참고](https://v5.reactrouter.com/web/api/Link/to-object) Link 링크…","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React12/"}},"next":{"id":"a15b1bdf-b1cc-5295-9d3a-66a91a67f22e","html":"<h1 id=\"error\" style=\"position:relative;\"><a href=\"#error\" aria-label=\"error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ERROR</h1>\n<h2 id=\"cannot-read-properties-of-undefined-reading-push\" style=\"position:relative;\"><a href=\"#cannot-read-properties-of-undefined-reading-push\" aria-label=\"cannot read properties of undefined reading push permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cannot read properties of undefined (reading ‘push’)</h2>\n<p>해결 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Specification</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withRouter</span><span class=\"token punctuation\">(</span>Specification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>반드시 export시 컴포넌트 명을 withRouter로 감싸줘야 한다!</p>\n<h2 id=\"typeerror-articlesmap-is-not-a-function\" style=\"position:relative;\"><a href=\"#typeerror-articlesmap-is-not-a-function\" aria-label=\"typeerror articlesmap is not a function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeError: articles.map is not a function</h2>\n<p>해결 방법\n→ 오브젝트는 map()함수를 가지고있지 않아 사용할 수가 없다. 배열만 가능하다</p>\n<h2 id=\"switch-is-not-exported-from-react-router-dom-에러\" style=\"position:relative;\"><a href=\"#switch-is-not-exported-from-react-router-dom-%EC%97%90%EB%9F%AC\" aria-label=\"switch is not exported from react router dom 에러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>‘Switch’ is not exported from ‘react-router-dom’ 에러</h2>\n<p><a href=\"https://reactrouter.com/docs/en/v6/upgrading/v5\">공식문서 참고</a></p>\n<p>react-router-dom이 버전 6로 업그레이드되면서, Switch를 더이상 지원을 안하게 되어 <code class=\"language-text\">Switch</code> 에서 <code class=\"language-text\">routes</code>로 바뀌었고\n<code class=\"language-text\">component</code>도 <code class=\"language-text\">element</code>로 바뀜</p>\n<Route component={Home} />\n<p>-> &#x3C;Route element={<Home />} /></p>\n<ul>\n<li>downgrade 시</li>\n</ul>\n<p><code class=\"language-text\">npm install react-router-dom@5</code></p>\n<p><a href=\"https://velog.io/@kcdoggo/Switch-is-not-exported-from-react-router-dom-%EC%97%90%EB%9F%AC\">kcdoggo님 블로그</a>\n<a href=\"https://devbirdfeet.tistory.com/48\">devbridfeet님 블로그</a>\n<a href=\"https://devbirdfeet.tistory.com/113\">devbridfeet님 블로그</a></p>","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React13/"}},"prev":{"id":"3a04554a-4517-5113-bcf8-d18315143d10","html":"<h1 id=\"data-request-response-flow--axios\" style=\"position:relative;\"><a href=\"#data-request-response-flow--axios\" aria-label=\"data request response flow  axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Request, Response Flow &#x26; Axios</h1>\n<p><code class=\"language-text\">Database</code> &#x3C;=> <code class=\"language-text\">server</code> -response-> <code class=\"language-text\">client</code>\n&#x3C;-request-</p>\n<blockquote>\n<p>로그인 과정으로 예를 들자면</p>\n</blockquote>\n<blockquote>\n<p>유저가 클라이언트에서 이름과 비밀번호를 넣고 로그인 버튼 누르면 그 요청(request)이 서버로 이동하고 서버에서는 db에 유저 아이디가 있는지 찾고 있다면 보내준 비밀번호가 맞는지 체크함</p>\n</blockquote>\n<blockquote>\n<p>비밀번호 맞으면 response를 클라이언트 측에 성공했다는 걸 전해주고 비밀번호가 틀리거나 유저 자체가 없으면 없다는 정보들을 클라이언트에 보내줌</p>\n</blockquote>\n<h1 id=\"axios\" style=\"position:relative;\"><a href=\"#axios\" aria-label=\"axios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Axios</h1>\n<p><a href=\"https://yoojiih.github.io/TIL_20211029/\">axios 참고</a>\n데이터 요청시 axios 라이브러리를 사용해서 보냄</p>\n<h2 id=\"axios-설치\" style=\"position:relative;\"><a href=\"#axios-%EC%84%A4%EC%B9%98\" aria-label=\"axios 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>axios 설치</h2>\n<p><code class=\"language-text\">npm i axios</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>client<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>views<span class=\"token operator\">/</span>LandingPage<span class=\"token operator\">/</span>LandingPage<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">LandingPage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// LandingPage에 들어오자마자 실행되는 부분</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//get request를 서버(server/index.js)로 보냄. end point는 /api/hello</span>\n        axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/hello'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 서버에서 돌아오는 response를 콘솔창에 출력</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>시작 페이지<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> LandingPage</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span>server<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// request를 받는 router 생성 </span>\n<span class=\"token comment\">// 클라이언트측에서 get으로 줬으니 get메소드 사용, end point는 /api/hello, (req, res) callback을 주고 </span>\n<span class=\"token comment\">// 원래 라우터 같은 경우 request받은 걸로 처리 후 front로 다시 response줌 (지금은 프론트에 response(메시지)만 줌)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/hello'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!~~ '</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"cors이슈-proxy-설정\" style=\"position:relative;\"><a href=\"#cors%EC%9D%B4%EC%8A%88-proxy-%EC%84%A4%EC%A0%95\" aria-label=\"cors이슈 proxy 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS이슈, Proxy 설정</h1>\n<p>Cross-Origin Resource Sharing(CORS): origin이 다른데 resource를 Sharing할 때 적용되는 정책\nweb document와 서버가 교환 시 same origin이면 항상 허용되지만 다르면 정책에 의해 컨트롤 당함</p>\n<p>Server 포트번호 5000번 -> localhost:5000 (Response) - origin</p>\n<p>Client 포트번호 3000번 -> localhost:3000 (Request) - origin</p>\n<p>axios.get(‘/api/hello’) 이렇게 요청 보내면 3000번으로 가기 때문에 5000번인 서버는 받지 못하는 상황 벌어짐\n이렇게 두개의 다른 포트를 가지고 있는 서버는 Cors 보안 정책 때문에 아무 설정없이 서버에 request를 보낼 수 없음</p>\n<h2 id=\"해결방법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\" aria-label=\"해결방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법</h2>\n<ul>\n<li>방법 1: 개발자 도구 사용(Chrome Cors Extension)</li>\n</ul>\n<p>개발자들만 사용하는 방법이기 때문에 제한적임</p>\n<p>프론트엔드 부분만 컨트롤 가능한 상황 -> json 방식을 이용해 모든 request를 get request로 보냄으로써 해결이 가능. but 제한적임\nbackend 와 frontend 모두 컨트롤 할 수있는 상황 ->  서버에다가 클라이언트에서 오는 건 받을 수 있게 해주고 클라이언트 측에서도 보낼 때 ~한 것들은 허용해달라고 request를 보낼 때 같이 전달해서 보내면 해결됨</p>\n<ul>\n<li>방법 2: Proxy 사용\n<a href=\"https://create-react-app.dev/docs/proxying-api-requests-in-development/\">Configuring the Proxy Manually</a>\nProxy를 임의로 설정하기 위해 client 부분에 모듈 다운로드</li>\n</ul>\n<p><code class=\"language-text\">npm install http-proxy-middleware --save</code></p>\n<p>그 다음 src/setupProxy.js 파일 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createProxyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http-proxy-middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createProxyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// server/index.js에서 정의한 port번호가 5000번이니까 target을 5000번으로 설정</span>\n      <span class=\"token comment\">// front end 3000번 -> back end 5000번으로 주겠다고 설정해 놓음</span>\n      target<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span>\n      changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1 id=\"proxy-server\" style=\"position:relative;\"><a href=\"#proxy-server\" aria-label=\"proxy server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proxy Server</h1>\n<p>보안상의 이유 등으로 직접 통신할 수 없는 두 점 사이에서 대리로 통신(request, response)을 수행하는 기능을 프록시, 그 중계 기능을 하는 컴퓨터 시스템이나 응용프로그램을 프록시 서버라 함</p>\n<h2 id=\"프록시-서버의-주요-특징\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EC%9D%98-%EC%A3%BC%EC%9A%94-%ED%8A%B9%EC%A7%95\" aria-label=\"프록시 서버의 주요 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 서버의 주요 특징</h2>\n<ol>\n<li>프록시 서버는 클라이언트가 자신을 통해서 다른 네트워크 서비스에 간접적으로 접속할 수 있게 해줌 (pc와 외부 인터넷 사이의 징검다리 역할) </li>\n</ol>\n<p>  시스템에 방화벽을 가지고 있는 경우 외부와의 통신을 위해 만들어 놓은 서버 -> 외부 인터넷의 내부 침입을 막는 방화벽 기능</p>\n<ol start=\"2\">\n<li>프록시 서버는 프록시 서버에 요청된 웹 페이지 내용들을 캐시를 이용해 저장 (캐시 데이터, 공유 데이터 제공 기능)</li>\n</ol>\n<p>  Proxy 서버는 사용자의 요청을 Cahche해서 동일 요청이 들어오면 Cache 자원을 반환하기 때문에 리소스로의 접근을 빠르게 할 수 있음</p>\n<p>  예를들어 특정 사이트에 접속시 static한 이미지등을 proxy서버에 저장 시켜놔서 보고 싶을 때 빠르게 proxy서버에 담겨있는 해당 이미지를 볼 수 있음. </p>\n<p>  이렇게 하면 전송시간도 절약하고 불필요하게 외부와의 연결을 하지 않아도 되며 외부와의 트래픽을 줄이게 됨으로써 네트워크 병목현상을 방지 가능</p>\n<blockquote>\n<p>캐시는 컴퓨터의 기억장치에 관련된 기술로, 속도가 느린 기억장치와 속도가 빠른 기억장치가 존재할 경우, 빠른 기억장치에 느린 기억장치의 내용 중 최근에 사용한 일부를 넣어두는 것을 말한다. 이 경우 같은 내용을 여러 번 참조할 때, 두 번째부터는 빠른 속도로 읽을 수 있다.</p>\n</blockquote>\n<ul>\n<li>\n<p>IP 조작\n임의로 보낸 유저 ip 조작할 수 있어 실제 ip를 모르게해 더 나은 보안을 제공함</p>\n<p>추가적으로 ip뿐만 아니라 데이터도 중간에서 조작 가능</p>\n</li>\n<li>A Client(Proxy Server 설치)가 B Proxy에 접근하여 C인터넷(google.com)에 접속하는 방식</li>\n<li>\n<p>네트워크 서비스나 콘텐츠로의 접근 정책을 적용 가능</p>\n<p>ACL(access control list ACL): 사이트 접근에 대한 접근 정책을 정의</p>\n<p>회사에서 직원들이나 집안에서 아이들 특정 사이트 접근제어</p>\n</li>\n<li>\n<p>사용률 기록 &#x26; 검사</p>\n<p>log/Audit: 회사 내 직원의 인터넷 사용을 레포팅할 수 있다. 반대로 인트라넷의 사용을 레포팅할 수 도 있다.</p>\n</li>\n<li>보안 및 통제를 뚫고 나가기 위해 사용할 수 있으며 역으로 IP 추적을 당하지 않을 목적으로 사용. 역기능이긴 하지만 우회를 할 수 있도록 함</li>\n<li>\n<p>밖으로 나가는 콘텐츠 검사</p>\n<p>중계 서버인 프록시 서버를 거치기 때문에 콘텐츠를 검사할 수 있다. </p>\n<p>보안 상의 이유로 80 포트 외에 포트를 막아놓는 지역 제한을 우회해 다른 서비스 이용 가능</p>\n</li>\n<li>익명의 사용자가 서버에 접근하는 것을 막아 보안 유지</li>\n</ul>\n<h1 id=\"concurrently를-이용해-front-back-서버-한번에-켜기\" style=\"position:relative;\"><a href=\"#concurrently%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-front-back-%EC%84%9C%EB%B2%84-%ED%95%9C%EB%B2%88%EC%97%90-%EC%BC%9C%EA%B8%B0\" aria-label=\"concurrently를 이용해 front back 서버 한번에 켜기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concurrently를 이용해 front, back 서버 한번에 켜기</h1>\n<p>여러개의 commands를 동시에 작동 시킬 수 있게해주는 tool\n라이브러리 설치\n<code class=\"language-text\">npm i concurrently --save</code>\n사용법\npackage.json파일에 스크립트 내 켜고 싶은 것들 차례로 나열함\nconcurrently “command1 arg” “commmand2 arg”\nclient 폴더 내 start로 실행 하기 위해 prefix 사용\n<code class=\"language-text\">\"dev\": \"concurrently \\\"npm run backend\\\" \\\"npm run start --prefix client\\\"\"</code></p>\n<p>Reference\n<a href=\"https://velog.io/@jangwonyoon/Proxy-Server%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%9C%EB%B2%84%EB%9E%80\">jang님 블로그</a></p>","frontmatter":{"date":"November 16, 2021","title":"Shop Project_React","categories":"TIL","author":"yooji","emoji":null},"fields":{"slug":"/Shop_React6/"}},"site":{"siteMetadata":{"siteUrl":"https://www.yoojiih.github.io","comments":{"utterances":{"repo":"yoojiih/yoojiih.github.io"}}}}},"pageContext":{"slug":"/Shop_React12/","nextSlug":"/Shop_React13/","prevSlug":"/Shop_React6/"}},"staticQueryHashes":["1073350324","2938748437"]}